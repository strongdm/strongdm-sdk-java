// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protogen. DO NOT EDIT.

package com.strongdm.api;

import com.strongdm.api.plumbing.PageIterator;
import com.strongdm.api.plumbing.PageResult;
import com.strongdm.api.plumbing.PeeringGroupsGrpc;
import com.strongdm.api.plumbing.PeeringGroupsPlumbing;
import com.strongdm.api.plumbing.Plumbing;
import com.strongdm.api.plumbing.Spec.GetRequestMetadata;
import com.strongdm.api.plumbing.Spec.ListRequestMetadata;
import io.grpc.ManagedChannel;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;

/**
 * PeeringGroups provides the building blocks necessary to obtain explicit network topology and
 * routing.
 */
public class PeeringGroups implements SnapshotPeeringGroups {
  private final PeeringGroupsGrpc.PeeringGroupsBlockingStub stub;
  private final Client parent;

  public PeeringGroups(ManagedChannel channel, Client client) {

    this.stub = PeeringGroupsGrpc.newBlockingStub(channel);
    this.parent = client;
  }

  private PeeringGroups(PeeringGroupsGrpc.PeeringGroupsBlockingStub stub, Client client) {
    this.stub = stub;
    this.parent = client;
  }

  /**
   * This function returns a copy of the PeeringGroups service which has the given deadline set for
   * all method calls.
   */
  public PeeringGroups withDeadlineAfter(long duration, TimeUnit units) {
    return new PeeringGroups(this.stub.withDeadlineAfter(duration, units), this.parent);
  }
  /** Create registers a new PeeringGroup. */
  public PeeringGroupCreateResponse create(PeeringGroup peeringGroup) throws RpcException {
    PeeringGroupsPlumbing.PeeringGroupCreateRequest.Builder builder =
        PeeringGroupsPlumbing.PeeringGroupCreateRequest.newBuilder();
    builder.setPeeringGroup(Plumbing.convertPeeringGroupToPlumbing(peeringGroup));
    PeeringGroupsPlumbing.PeeringGroupCreateRequest req = builder.build();
    PeeringGroupsPlumbing.PeeringGroupCreateResponse plumbingResponse;
    int tries = 0;
    while (true) {
      try {
        plumbingResponse =
            this.stub
                .withCallCredentials(this.parent.getCallCredentials("PeeringGroups.Create", req))
                .create(req);
      } catch (Exception e) {
        if (this.parent.shouldRetry(tries, e)) {
          tries++;
          this.parent.jitterSleep(tries);
          continue;
        }
        throw Plumbing.convertExceptionToPorcelain(e);
      }
      break;
    }
    return Plumbing.convertPeeringGroupCreateResponseToPorcelain(plumbingResponse);
  }
  /** Delete removes a PeeringGroup by ID. */
  public PeeringGroupDeleteResponse delete(String id) throws RpcException {
    PeeringGroupsPlumbing.PeeringGroupDeleteRequest.Builder builder =
        PeeringGroupsPlumbing.PeeringGroupDeleteRequest.newBuilder();
    builder.setId((id));
    PeeringGroupsPlumbing.PeeringGroupDeleteRequest req = builder.build();
    PeeringGroupsPlumbing.PeeringGroupDeleteResponse plumbingResponse;
    int tries = 0;
    while (true) {
      try {
        plumbingResponse =
            this.stub
                .withCallCredentials(this.parent.getCallCredentials("PeeringGroups.Delete", req))
                .delete(req);
      } catch (Exception e) {
        if (this.parent.shouldRetry(tries, e)) {
          tries++;
          this.parent.jitterSleep(tries);
          continue;
        }
        throw Plumbing.convertExceptionToPorcelain(e);
      }
      break;
    }
    return Plumbing.convertPeeringGroupDeleteResponseToPorcelain(plumbingResponse);
  }
  /** Get reads one PeeringGroup by ID. It will load all its dependencies. */
  public PeeringGroupGetResponse get(String id) throws RpcException {
    PeeringGroupsPlumbing.PeeringGroupGetRequest.Builder builder =
        PeeringGroupsPlumbing.PeeringGroupGetRequest.newBuilder();
    if (this.parent.snapshotDate != null) {
      GetRequestMetadata.Builder metaBuilder = GetRequestMetadata.newBuilder();
      metaBuilder.setSnapshotAt(Plumbing.convertTimestampToPlumbing(this.parent.snapshotDate));
      builder.setMeta(metaBuilder);
    }
    builder.setId((id));
    PeeringGroupsPlumbing.PeeringGroupGetRequest req = builder.build();
    PeeringGroupsPlumbing.PeeringGroupGetResponse plumbingResponse;
    int tries = 0;
    while (true) {
      try {
        plumbingResponse =
            this.stub
                .withCallCredentials(this.parent.getCallCredentials("PeeringGroups.Get", req))
                .get(req);
      } catch (Exception e) {
        if (this.parent.shouldRetry(tries, e)) {
          tries++;
          this.parent.jitterSleep(tries);
          continue;
        }
        throw Plumbing.convertExceptionToPorcelain(e);
      }
      break;
    }
    return Plumbing.convertPeeringGroupGetResponseToPorcelain(plumbingResponse);
  }
  /** List gets a list of Peering Groups. */
  public Iterable<PeeringGroup> list(String filter, Object... args) throws RpcException {
    PeeringGroupsPlumbing.PeeringGroupListRequest.Builder builder =
        PeeringGroupsPlumbing.PeeringGroupListRequest.newBuilder();
    builder.setFilter(Plumbing.quoteFilterArgs(filter, args));
    ListRequestMetadata.Builder metaBuilder = ListRequestMetadata.newBuilder();
    Object pageSizeOption = this.parent.testOptions.get("PageSize");
    if (pageSizeOption instanceof Integer) {
      metaBuilder.setLimit((int) pageSizeOption);
    }
    if (this.parent.snapshotDate != null) {
      metaBuilder.setSnapshotAt(Plumbing.convertTimestampToPlumbing(this.parent.snapshotDate));
    }
    builder.setMeta(metaBuilder);

    Supplier<PageResult<PeeringGroup>> pageFetcher =
        () -> {
          // Note: this closure captures and reuses the builder to set the next page
          PeeringGroupsPlumbing.PeeringGroupListRequest req = builder.build();
          PeeringGroupsPlumbing.PeeringGroupListResponse plumbingResponse;
          int tries = 0;
          while (true) {
            try {
              plumbingResponse =
                  this.stub
                      .withCallCredentials(
                          this.parent.getCallCredentials("PeeringGroups.List", req))
                      .list(req);
            } catch (Exception e) {
              if (this.parent.shouldRetry(tries, e)) {
                tries++;
                this.parent.jitterSleep(tries);
                continue;
              }
              throw Plumbing.convertExceptionToPorcelain(e);
            }
            break;
          }

          List<PeeringGroup> page =
              Plumbing.convertRepeatedPeeringGroupToPorcelain(
                  plumbingResponse.getPeeringGroupsList());

          boolean hasNextCursor = plumbingResponse.getMeta().getNextCursor() != "";
          builder.setMeta(
              ListRequestMetadata.newBuilder()
                  .setCursor(plumbingResponse.getMeta().getNextCursor()));

          return new PageResult<PeeringGroup>(page, hasNextCursor);
        };

    Iterator<PeeringGroup> iterator = new PageIterator<>(pageFetcher);

    return () -> iterator;
  }
}
