// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protogen. DO NOT EDIT.

package com.strongdm.api.plumbing;

import com.google.protobuf.Duration;
import com.google.protobuf.Timestamp;
import com.google.rpc.Code;
import com.strongdm.api.AlreadyExistsException;
import com.strongdm.api.AuthenticationException;
import com.strongdm.api.BadRequestException;
import com.strongdm.api.InternalException;
import com.strongdm.api.NotFoundException;
import com.strongdm.api.PermissionException;
import com.strongdm.api.RateLimitException;
import com.strongdm.api.RpcException;
import com.strongdm.api.TimeoutException;
import com.strongdm.api.UnknownException;
import com.strongdm.api.plumbing.AccountAttachmentsHistoryPlumbing.*;
import com.strongdm.api.plumbing.AccountAttachmentsPlumbing.*;
import com.strongdm.api.plumbing.AccountGrantsHistoryPlumbing.*;
import com.strongdm.api.plumbing.AccountGrantsPlumbing.*;
import com.strongdm.api.plumbing.AccountPermissionsPlumbing.*;
import com.strongdm.api.plumbing.AccountResourcesHistoryPlumbing.*;
import com.strongdm.api.plumbing.AccountResourcesPlumbing.*;
import com.strongdm.api.plumbing.AccountsHistoryPlumbing.*;
import com.strongdm.api.plumbing.AccountsPlumbing.*;
import com.strongdm.api.plumbing.ActivitiesPlumbing.*;
import com.strongdm.api.plumbing.ControlPanelPlumbing.*;
import com.strongdm.api.plumbing.DriversPlumbing.*;
import com.strongdm.api.plumbing.NodesHistoryPlumbing.*;
import com.strongdm.api.plumbing.NodesPlumbing.*;
import com.strongdm.api.plumbing.OrganizationHistoryPlumbing.*;
import com.strongdm.api.plumbing.QueriesPlumbing.*;
import com.strongdm.api.plumbing.RemoteIdentitiesHistoryPlumbing.*;
import com.strongdm.api.plumbing.RemoteIdentitiesPlumbing.*;
import com.strongdm.api.plumbing.RemoteIdentityGroupsHistoryPlumbing.*;
import com.strongdm.api.plumbing.RemoteIdentityGroupsPlumbing.*;
import com.strongdm.api.plumbing.ReplaysPlumbing.*;
import com.strongdm.api.plumbing.ResourcesHistoryPlumbing.*;
import com.strongdm.api.plumbing.ResourcesPlumbing.*;
import com.strongdm.api.plumbing.RoleResourcesHistoryPlumbing.*;
import com.strongdm.api.plumbing.RoleResourcesPlumbing.*;
import com.strongdm.api.plumbing.RolesHistoryPlumbing.*;
import com.strongdm.api.plumbing.RolesPlumbing.*;
import com.strongdm.api.plumbing.SecretStoresHistoryPlumbing.*;
import com.strongdm.api.plumbing.SecretStoresPlumbing.*;
import com.strongdm.api.plumbing.SecretStoresTypesPlumbing.*;
import com.strongdm.api.plumbing.Spec.*;
import com.strongdm.api.plumbing.TagsPlumbing.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import org.json.JSONArray;
import org.json.JSONObject;

public class Plumbing {

  public static String quoteFilterArgs(String filter, Object... args) throws BadRequestException {
    String[] parts =
        (filter + " ").split("\\?"); // trailing space to stop split from discarding last match
    if (parts.length != args.length + 1) {
      throw new BadRequestException("incorrect number of replacements");
    }
    String b = "";
    for (int i = 0; i < parts.length; i++) {
      b += parts[i];
      if (i < args.length) {
        String s = args[i].toString();
        s = JSONObject.valueToString(s);
        b += s;
      }
    }
    return b;
  }

  public static Timestamp convertTimestampToPlumbing(Date t) {
    long ms = t.getTime();
    return Timestamp.newBuilder()
        .setSeconds(ms / 1000)
        .setNanos((int) ((ms % 1000) * 1000000))
        .build();
  }

  public static Date convertTimestampToPorcelain(Timestamp t) {
    return new Date(t.getSeconds() * 1000 + t.getNanos() / 1000000);
  }

  public static Duration convertDurationToPlumbing(java.time.Duration d) {
    return Duration.newBuilder().setSeconds(d.getSeconds()).setNanos(d.getNano()).build();
  }

  public static java.time.Duration convertDurationToPorcelain(Duration d) {
    return java.time.Duration.ofSeconds(d.getSeconds()).plusNanos(d.getNanos());
  }

  public static com.google.protobuf.ByteString convertBytesToPlumbing(byte[] b) {
    return com.google.protobuf.ByteString.copyFrom(b);
  }

  public static byte[] convertBytesToPorcelain(com.google.protobuf.ByteString b) {
    return b.toByteArray();
  }

  public static java.util.Map<String, String> convertTagsToPorcelain(Tags plumbing) {
    java.util.HashMap<String, String> porcelain = new java.util.HashMap<String, String>();
    for (Tags.Pair p : plumbing.getPairsList()) {
      porcelain.put(p.getName(), p.getValue());
    }
    return porcelain;
  }

  public static Tags convertTagsToPlumbing(java.util.Map<String, String> porcelain) {
    Tags.Builder builder = Tags.newBuilder();
    for (java.util.Map.Entry<String, String> entry : porcelain.entrySet()) {
      builder.addPairs(
          Tags.Pair.newBuilder().setName(entry.getKey()).setValue(entry.getValue()).build());
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AccessRule> convertAccessRulesToPorcelain(String plumbing) {
    if (plumbing == "") {
      return null;
    }
    ArrayList<com.strongdm.api.AccessRule> porcelain = new ArrayList<>();
    JSONArray parsed = new JSONArray(plumbing);
    for (int i = 0; i < parsed.length(); i++) {
      JSONObject object = parsed.optJSONObject(i);
      if (object == null) {
        throw new UnknownException("failed to parse access rules JSON: null or non-object found");
      }
      com.strongdm.api.AccessRule rule = new com.strongdm.api.AccessRule();
      for (Iterator<String> keyIterator = object.keys(); keyIterator.hasNext(); ) {
        String key = keyIterator.next();
        switch (key) {
          case "ids":
            JSONArray ids = object.getJSONArray("ids");
            for (int j = 0; j < ids.length(); j++) {
              rule.addId(ids.getString(j));
            }
            break;
          case "type":
            rule.setType(object.getString("type"));
            break;
          case "tags":
            JSONObject jsonTags = object.getJSONObject("tags");
            HashMap<String, String> tags = new HashMap<>();
            for (Iterator<String> tagKeyIterator = jsonTags.keys(); tagKeyIterator.hasNext(); ) {
              String tagKey = tagKeyIterator.next();
              tags.put(tagKey, jsonTags.getString(tagKey));
            }
            rule.setTags(tags);
            break;
          default:
            throw new UnknownException(
                "unknown access rule field '" + key + "', please upgrade your SDK");
        }
      }
      porcelain.add(rule);
    }
    return porcelain;
  }

  public static String convertAccessRulesToPlumbing(List<com.strongdm.api.AccessRule> porcelain) {
    JSONArray plumbing = new JSONArray();
    if (porcelain.size() == 0) {
      return plumbing.toString();
    }
    for (com.strongdm.api.AccessRule rule : porcelain) {
      JSONObject obj = new JSONObject();
      if (rule.getType() != "") {
        obj.put("type", rule.getType());
      }
      if (rule.getTags() != null) {
        JSONObject jsonTags = new JSONObject();
        for (Map.Entry<String, String> entry : rule.getTags().entrySet()) {
          jsonTags.put(entry.getKey(), entry.getValue());
        }
        obj.put("tags", jsonTags);
      }
      if (rule.getIds() != null) {
        JSONArray jsonIds = new JSONArray();
        for (String id : rule.getIds()) {
          jsonIds.put(id);
        }
        obj.put("ids", jsonIds);
      }
      plumbing.put(obj);
    }
    return plumbing.toString();
  }

  public static com.strongdm.api.AKS convertAKSToPorcelain(AKS plumbing) {
    com.strongdm.api.AKS porcelain = new com.strongdm.api.AKS();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setCertificateAuthority((plumbing.getCertificateAuthority()));
    porcelain.setClientCertificate((plumbing.getClientCertificate()));
    porcelain.setClientKey((plumbing.getClientKey()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthcheckNamespace((plumbing.getHealthcheckNamespace()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setRemoteIdentityGroupId((plumbing.getRemoteIdentityGroupId()));
    porcelain.setRemoteIdentityHealthcheckUsername(
        (plumbing.getRemoteIdentityHealthcheckUsername()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    return porcelain;
  }

  public static AKS convertAKSToPlumbing(com.strongdm.api.AKS porcelain) {
    if (porcelain == null) {
      return null;
    }
    AKS.Builder builder = AKS.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getCertificateAuthority() != null) {
      builder.setCertificateAuthority((porcelain.getCertificateAuthority()));
    }
    if (porcelain.getClientCertificate() != null) {
      builder.setClientCertificate((porcelain.getClientCertificate()));
    }
    if (porcelain.getClientKey() != null) {
      builder.setClientKey((porcelain.getClientKey()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    if (porcelain.getHealthcheckNamespace() != null) {
      builder.setHealthcheckNamespace((porcelain.getHealthcheckNamespace()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getRemoteIdentityGroupId() != null) {
      builder.setRemoteIdentityGroupId((porcelain.getRemoteIdentityGroupId()));
    }
    if (porcelain.getRemoteIdentityHealthcheckUsername() != null) {
      builder.setRemoteIdentityHealthcheckUsername(
          (porcelain.getRemoteIdentityHealthcheckUsername()));
    }
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AKS> convertRepeatedAKSToPorcelain(
      Collection<AKS> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAKSToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AKS> convertRepeatedAKSToPlumbing(
      Collection<com.strongdm.api.AKS> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAKSToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AKSBasicAuth convertAKSBasicAuthToPorcelain(
      AKSBasicAuth plumbing) {
    com.strongdm.api.AKSBasicAuth porcelain = new com.strongdm.api.AKSBasicAuth();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthcheckNamespace((plumbing.getHealthcheckNamespace()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static AKSBasicAuth convertAKSBasicAuthToPlumbing(
      com.strongdm.api.AKSBasicAuth porcelain) {
    if (porcelain == null) {
      return null;
    }
    AKSBasicAuth.Builder builder = AKSBasicAuth.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    if (porcelain.getHealthcheckNamespace() != null) {
      builder.setHealthcheckNamespace((porcelain.getHealthcheckNamespace()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AKSBasicAuth> convertRepeatedAKSBasicAuthToPorcelain(
      Collection<AKSBasicAuth> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAKSBasicAuthToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AKSBasicAuth> convertRepeatedAKSBasicAuthToPlumbing(
      Collection<com.strongdm.api.AKSBasicAuth> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAKSBasicAuthToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AKSServiceAccount convertAKSServiceAccountToPorcelain(
      AKSServiceAccount plumbing) {
    com.strongdm.api.AKSServiceAccount porcelain = new com.strongdm.api.AKSServiceAccount();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthcheckNamespace((plumbing.getHealthcheckNamespace()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setRemoteIdentityGroupId((plumbing.getRemoteIdentityGroupId()));
    porcelain.setRemoteIdentityHealthcheckUsername(
        (plumbing.getRemoteIdentityHealthcheckUsername()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setToken((plumbing.getToken()));
    return porcelain;
  }

  public static AKSServiceAccount convertAKSServiceAccountToPlumbing(
      com.strongdm.api.AKSServiceAccount porcelain) {
    if (porcelain == null) {
      return null;
    }
    AKSServiceAccount.Builder builder = AKSServiceAccount.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    if (porcelain.getHealthcheckNamespace() != null) {
      builder.setHealthcheckNamespace((porcelain.getHealthcheckNamespace()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getRemoteIdentityGroupId() != null) {
      builder.setRemoteIdentityGroupId((porcelain.getRemoteIdentityGroupId()));
    }
    if (porcelain.getRemoteIdentityHealthcheckUsername() != null) {
      builder.setRemoteIdentityHealthcheckUsername(
          (porcelain.getRemoteIdentityHealthcheckUsername()));
    }
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getToken() != null) {
      builder.setToken((porcelain.getToken()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AKSServiceAccount>
      convertRepeatedAKSServiceAccountToPorcelain(Collection<AKSServiceAccount> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAKSServiceAccountToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AKSServiceAccount> convertRepeatedAKSServiceAccountToPlumbing(
      Collection<com.strongdm.api.AKSServiceAccount> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAKSServiceAccountToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AKSServiceAccountUserImpersonation
      convertAKSServiceAccountUserImpersonationToPorcelain(
          AKSServiceAccountUserImpersonation plumbing) {
    com.strongdm.api.AKSServiceAccountUserImpersonation porcelain =
        new com.strongdm.api.AKSServiceAccountUserImpersonation();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthcheckNamespace((plumbing.getHealthcheckNamespace()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setToken((plumbing.getToken()));
    return porcelain;
  }

  public static AKSServiceAccountUserImpersonation
      convertAKSServiceAccountUserImpersonationToPlumbing(
          com.strongdm.api.AKSServiceAccountUserImpersonation porcelain) {
    if (porcelain == null) {
      return null;
    }
    AKSServiceAccountUserImpersonation.Builder builder =
        AKSServiceAccountUserImpersonation.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    if (porcelain.getHealthcheckNamespace() != null) {
      builder.setHealthcheckNamespace((porcelain.getHealthcheckNamespace()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getToken() != null) {
      builder.setToken((porcelain.getToken()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AKSServiceAccountUserImpersonation>
      convertRepeatedAKSServiceAccountUserImpersonationToPorcelain(
          Collection<AKSServiceAccountUserImpersonation> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAKSServiceAccountUserImpersonationToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AKSServiceAccountUserImpersonation>
      convertRepeatedAKSServiceAccountUserImpersonationToPlumbing(
          Collection<com.strongdm.api.AKSServiceAccountUserImpersonation> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAKSServiceAccountUserImpersonationToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AKSUserImpersonation convertAKSUserImpersonationToPorcelain(
      AKSUserImpersonation plumbing) {
    com.strongdm.api.AKSUserImpersonation porcelain = new com.strongdm.api.AKSUserImpersonation();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setCertificateAuthority((plumbing.getCertificateAuthority()));
    porcelain.setClientCertificate((plumbing.getClientCertificate()));
    porcelain.setClientKey((plumbing.getClientKey()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthcheckNamespace((plumbing.getHealthcheckNamespace()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    return porcelain;
  }

  public static AKSUserImpersonation convertAKSUserImpersonationToPlumbing(
      com.strongdm.api.AKSUserImpersonation porcelain) {
    if (porcelain == null) {
      return null;
    }
    AKSUserImpersonation.Builder builder = AKSUserImpersonation.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getCertificateAuthority() != null) {
      builder.setCertificateAuthority((porcelain.getCertificateAuthority()));
    }
    if (porcelain.getClientCertificate() != null) {
      builder.setClientCertificate((porcelain.getClientCertificate()));
    }
    if (porcelain.getClientKey() != null) {
      builder.setClientKey((porcelain.getClientKey()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    if (porcelain.getHealthcheckNamespace() != null) {
      builder.setHealthcheckNamespace((porcelain.getHealthcheckNamespace()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AKSUserImpersonation>
      convertRepeatedAKSUserImpersonationToPorcelain(Collection<AKSUserImpersonation> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAKSUserImpersonationToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AKSUserImpersonation> convertRepeatedAKSUserImpersonationToPlumbing(
      Collection<com.strongdm.api.AKSUserImpersonation> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAKSUserImpersonationToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AWS convertAWSToPorcelain(AWS plumbing) {
    com.strongdm.api.AWS porcelain = new com.strongdm.api.AWS();
    porcelain.setAccessKey((plumbing.getAccessKey()));
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthcheckRegion((plumbing.getHealthcheckRegion()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setRoleArn((plumbing.getRoleArn()));
    porcelain.setRoleExternalId((plumbing.getRoleExternalId()));
    porcelain.setSecretAccessKey((plumbing.getSecretAccessKey()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    return porcelain;
  }

  public static AWS convertAWSToPlumbing(com.strongdm.api.AWS porcelain) {
    if (porcelain == null) {
      return null;
    }
    AWS.Builder builder = AWS.newBuilder();
    if (porcelain.getAccessKey() != null) {
      builder.setAccessKey((porcelain.getAccessKey()));
    }
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    if (porcelain.getHealthcheckRegion() != null) {
      builder.setHealthcheckRegion((porcelain.getHealthcheckRegion()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getRoleArn() != null) {
      builder.setRoleArn((porcelain.getRoleArn()));
    }
    if (porcelain.getRoleExternalId() != null) {
      builder.setRoleExternalId((porcelain.getRoleExternalId()));
    }
    if (porcelain.getSecretAccessKey() != null) {
      builder.setSecretAccessKey((porcelain.getSecretAccessKey()));
    }
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AWS> convertRepeatedAWSToPorcelain(
      Collection<AWS> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAWSToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AWS> convertRepeatedAWSToPlumbing(
      Collection<com.strongdm.api.AWS> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAWSToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AWSConsole convertAWSConsoleToPorcelain(AWSConsole plumbing) {
    com.strongdm.api.AWSConsole porcelain = new com.strongdm.api.AWSConsole();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setEnableEnvVariables((plumbing.getEnableEnvVariables()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setRegion((plumbing.getRegion()));
    porcelain.setRemoteIdentityGroupId((plumbing.getRemoteIdentityGroupId()));
    porcelain.setRemoteIdentityHealthcheckUsername(
        (plumbing.getRemoteIdentityHealthcheckUsername()));
    porcelain.setRoleArn((plumbing.getRoleArn()));
    porcelain.setRoleExternalId((plumbing.getRoleExternalId()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSessionExpiry((plumbing.getSessionExpiry()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    return porcelain;
  }

  public static AWSConsole convertAWSConsoleToPlumbing(com.strongdm.api.AWSConsole porcelain) {
    if (porcelain == null) {
      return null;
    }
    AWSConsole.Builder builder = AWSConsole.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setEnableEnvVariables(porcelain.getEnableEnvVariables());
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getRegion() != null) {
      builder.setRegion((porcelain.getRegion()));
    }
    if (porcelain.getRemoteIdentityGroupId() != null) {
      builder.setRemoteIdentityGroupId((porcelain.getRemoteIdentityGroupId()));
    }
    if (porcelain.getRemoteIdentityHealthcheckUsername() != null) {
      builder.setRemoteIdentityHealthcheckUsername(
          (porcelain.getRemoteIdentityHealthcheckUsername()));
    }
    if (porcelain.getRoleArn() != null) {
      builder.setRoleArn((porcelain.getRoleArn()));
    }
    if (porcelain.getRoleExternalId() != null) {
      builder.setRoleExternalId((porcelain.getRoleExternalId()));
    }
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    builder.setSessionExpiry(porcelain.getSessionExpiry());
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AWSConsole> convertRepeatedAWSConsoleToPorcelain(
      Collection<AWSConsole> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAWSConsoleToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AWSConsole> convertRepeatedAWSConsoleToPlumbing(
      Collection<com.strongdm.api.AWSConsole> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAWSConsoleToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AWSConsoleStaticKeyPair convertAWSConsoleStaticKeyPairToPorcelain(
      AWSConsoleStaticKeyPair plumbing) {
    com.strongdm.api.AWSConsoleStaticKeyPair porcelain =
        new com.strongdm.api.AWSConsoleStaticKeyPair();
    porcelain.setAccessKey((plumbing.getAccessKey()));
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setRegion((plumbing.getRegion()));
    porcelain.setRemoteIdentityGroupId((plumbing.getRemoteIdentityGroupId()));
    porcelain.setRemoteIdentityHealthcheckUsername(
        (plumbing.getRemoteIdentityHealthcheckUsername()));
    porcelain.setRoleArn((plumbing.getRoleArn()));
    porcelain.setRoleExternalId((plumbing.getRoleExternalId()));
    porcelain.setSecretAccessKey((plumbing.getSecretAccessKey()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSessionExpiry((plumbing.getSessionExpiry()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    return porcelain;
  }

  public static AWSConsoleStaticKeyPair convertAWSConsoleStaticKeyPairToPlumbing(
      com.strongdm.api.AWSConsoleStaticKeyPair porcelain) {
    if (porcelain == null) {
      return null;
    }
    AWSConsoleStaticKeyPair.Builder builder = AWSConsoleStaticKeyPair.newBuilder();
    if (porcelain.getAccessKey() != null) {
      builder.setAccessKey((porcelain.getAccessKey()));
    }
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getRegion() != null) {
      builder.setRegion((porcelain.getRegion()));
    }
    if (porcelain.getRemoteIdentityGroupId() != null) {
      builder.setRemoteIdentityGroupId((porcelain.getRemoteIdentityGroupId()));
    }
    if (porcelain.getRemoteIdentityHealthcheckUsername() != null) {
      builder.setRemoteIdentityHealthcheckUsername(
          (porcelain.getRemoteIdentityHealthcheckUsername()));
    }
    if (porcelain.getRoleArn() != null) {
      builder.setRoleArn((porcelain.getRoleArn()));
    }
    if (porcelain.getRoleExternalId() != null) {
      builder.setRoleExternalId((porcelain.getRoleExternalId()));
    }
    if (porcelain.getSecretAccessKey() != null) {
      builder.setSecretAccessKey((porcelain.getSecretAccessKey()));
    }
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    builder.setSessionExpiry(porcelain.getSessionExpiry());
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AWSConsoleStaticKeyPair>
      convertRepeatedAWSConsoleStaticKeyPairToPorcelain(
          Collection<AWSConsoleStaticKeyPair> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAWSConsoleStaticKeyPairToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AWSConsoleStaticKeyPair> convertRepeatedAWSConsoleStaticKeyPairToPlumbing(
      Collection<com.strongdm.api.AWSConsoleStaticKeyPair> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAWSConsoleStaticKeyPairToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AWSStore convertAWSStoreToPorcelain(AWSStore plumbing) {
    com.strongdm.api.AWSStore porcelain = new com.strongdm.api.AWSStore();
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setRegion((plumbing.getRegion()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    return porcelain;
  }

  public static AWSStore convertAWSStoreToPlumbing(com.strongdm.api.AWSStore porcelain) {
    if (porcelain == null) {
      return null;
    }
    AWSStore.Builder builder = AWSStore.newBuilder();
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getRegion() != null) {
      builder.setRegion((porcelain.getRegion()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AWSStore> convertRepeatedAWSStoreToPorcelain(
      Collection<AWSStore> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAWSStoreToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AWSStore> convertRepeatedAWSStoreToPlumbing(
      Collection<com.strongdm.api.AWSStore> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAWSStoreToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.Account convertAccountToPorcelain(Account plumbing) {
    if (plumbing == null) {
      return null;
    }
    if (plumbing.hasService()) {
      return convertServiceToPorcelain(plumbing.getService());
    }
    if (plumbing.hasUser()) {
      return convertUserToPorcelain(plumbing.getUser());
    }
    throw new UnknownException("unknown polymorphic type, please upgrade your SDK");
  }

  public static Account convertAccountToPlumbing(com.strongdm.api.Account porcelain) {
    if (porcelain == null) {
      return null;
    }
    if (porcelain instanceof com.strongdm.api.Service) {
      Account.Builder builder = Account.newBuilder();
      builder.setService(convertServiceToPlumbing((com.strongdm.api.Service) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.User) {
      Account.Builder builder = Account.newBuilder();
      builder.setUser(convertUserToPlumbing((com.strongdm.api.User) porcelain));
      return builder.build();
    }
    return null;
  }

  public static List<com.strongdm.api.Account> convertRepeatedAccountToPorcelain(
      Collection<Account> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAccountToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<Account> convertRepeatedAccountToPlumbing(
      Collection<com.strongdm.api.Account> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAccountToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AccountAttachment convertAccountAttachmentToPorcelain(
      AccountAttachment plumbing) {
    com.strongdm.api.AccountAttachment porcelain = new com.strongdm.api.AccountAttachment();
    porcelain.setAccountId((plumbing.getAccountId()));
    porcelain.setId((plumbing.getId()));
    porcelain.setRoleId((plumbing.getRoleId()));
    return porcelain;
  }

  public static AccountAttachment convertAccountAttachmentToPlumbing(
      com.strongdm.api.AccountAttachment porcelain) {
    if (porcelain == null) {
      return null;
    }
    AccountAttachment.Builder builder = AccountAttachment.newBuilder();
    if (porcelain.getAccountId() != null) {
      builder.setAccountId((porcelain.getAccountId()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getRoleId() != null) {
      builder.setRoleId((porcelain.getRoleId()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AccountAttachment>
      convertRepeatedAccountAttachmentToPorcelain(Collection<AccountAttachment> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAccountAttachmentToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AccountAttachment> convertRepeatedAccountAttachmentToPlumbing(
      Collection<com.strongdm.api.AccountAttachment> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAccountAttachmentToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AccountAttachmentCreateResponse
      convertAccountAttachmentCreateResponseToPorcelain(AccountAttachmentCreateResponse plumbing) {
    com.strongdm.api.AccountAttachmentCreateResponse porcelain =
        new com.strongdm.api.AccountAttachmentCreateResponse();
    porcelain.setAccountAttachment(
        Plumbing.convertAccountAttachmentToPorcelain(plumbing.getAccountAttachment()));
    porcelain.setMeta(Plumbing.convertCreateResponseMetadataToPorcelain(plumbing.getMeta()));
    porcelain.setRateLimit(Plumbing.convertRateLimitMetadataToPorcelain(plumbing.getRateLimit()));
    return porcelain;
  }

  public static AccountAttachmentCreateResponse convertAccountAttachmentCreateResponseToPlumbing(
      com.strongdm.api.AccountAttachmentCreateResponse porcelain) {
    if (porcelain == null) {
      return null;
    }
    AccountAttachmentCreateResponse.Builder builder = AccountAttachmentCreateResponse.newBuilder();
    if (porcelain.getAccountAttachment() != null) {
      builder.setAccountAttachment(
          Plumbing.convertAccountAttachmentToPlumbing(porcelain.getAccountAttachment()));
    }
    if (porcelain.getMeta() != null) {
      builder.setMeta(Plumbing.convertCreateResponseMetadataToPlumbing(porcelain.getMeta()));
    }
    if (porcelain.getRateLimit() != null) {
      builder.setRateLimit(Plumbing.convertRateLimitMetadataToPlumbing(porcelain.getRateLimit()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AccountAttachmentCreateResponse>
      convertRepeatedAccountAttachmentCreateResponseToPorcelain(
          Collection<AccountAttachmentCreateResponse> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAccountAttachmentCreateResponseToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AccountAttachmentCreateResponse>
      convertRepeatedAccountAttachmentCreateResponseToPlumbing(
          Collection<com.strongdm.api.AccountAttachmentCreateResponse> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAccountAttachmentCreateResponseToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AccountAttachmentDeleteResponse
      convertAccountAttachmentDeleteResponseToPorcelain(AccountAttachmentDeleteResponse plumbing) {
    com.strongdm.api.AccountAttachmentDeleteResponse porcelain =
        new com.strongdm.api.AccountAttachmentDeleteResponse();
    porcelain.setMeta(Plumbing.convertDeleteResponseMetadataToPorcelain(plumbing.getMeta()));
    porcelain.setRateLimit(Plumbing.convertRateLimitMetadataToPorcelain(plumbing.getRateLimit()));
    return porcelain;
  }

  public static AccountAttachmentDeleteResponse convertAccountAttachmentDeleteResponseToPlumbing(
      com.strongdm.api.AccountAttachmentDeleteResponse porcelain) {
    if (porcelain == null) {
      return null;
    }
    AccountAttachmentDeleteResponse.Builder builder = AccountAttachmentDeleteResponse.newBuilder();
    if (porcelain.getMeta() != null) {
      builder.setMeta(Plumbing.convertDeleteResponseMetadataToPlumbing(porcelain.getMeta()));
    }
    if (porcelain.getRateLimit() != null) {
      builder.setRateLimit(Plumbing.convertRateLimitMetadataToPlumbing(porcelain.getRateLimit()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AccountAttachmentDeleteResponse>
      convertRepeatedAccountAttachmentDeleteResponseToPorcelain(
          Collection<AccountAttachmentDeleteResponse> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAccountAttachmentDeleteResponseToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AccountAttachmentDeleteResponse>
      convertRepeatedAccountAttachmentDeleteResponseToPlumbing(
          Collection<com.strongdm.api.AccountAttachmentDeleteResponse> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAccountAttachmentDeleteResponseToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AccountAttachmentGetResponse
      convertAccountAttachmentGetResponseToPorcelain(AccountAttachmentGetResponse plumbing) {
    com.strongdm.api.AccountAttachmentGetResponse porcelain =
        new com.strongdm.api.AccountAttachmentGetResponse();
    porcelain.setAccountAttachment(
        Plumbing.convertAccountAttachmentToPorcelain(plumbing.getAccountAttachment()));
    porcelain.setMeta(Plumbing.convertGetResponseMetadataToPorcelain(plumbing.getMeta()));
    porcelain.setRateLimit(Plumbing.convertRateLimitMetadataToPorcelain(plumbing.getRateLimit()));
    return porcelain;
  }

  public static AccountAttachmentGetResponse convertAccountAttachmentGetResponseToPlumbing(
      com.strongdm.api.AccountAttachmentGetResponse porcelain) {
    if (porcelain == null) {
      return null;
    }
    AccountAttachmentGetResponse.Builder builder = AccountAttachmentGetResponse.newBuilder();
    if (porcelain.getAccountAttachment() != null) {
      builder.setAccountAttachment(
          Plumbing.convertAccountAttachmentToPlumbing(porcelain.getAccountAttachment()));
    }
    if (porcelain.getMeta() != null) {
      builder.setMeta(Plumbing.convertGetResponseMetadataToPlumbing(porcelain.getMeta()));
    }
    if (porcelain.getRateLimit() != null) {
      builder.setRateLimit(Plumbing.convertRateLimitMetadataToPlumbing(porcelain.getRateLimit()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AccountAttachmentGetResponse>
      convertRepeatedAccountAttachmentGetResponseToPorcelain(
          Collection<AccountAttachmentGetResponse> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAccountAttachmentGetResponseToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AccountAttachmentGetResponse>
      convertRepeatedAccountAttachmentGetResponseToPlumbing(
          Collection<com.strongdm.api.AccountAttachmentGetResponse> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAccountAttachmentGetResponseToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AccountAttachmentHistory
      convertAccountAttachmentHistoryToPorcelain(AccountAttachmentHistory plumbing) {
    com.strongdm.api.AccountAttachmentHistory porcelain =
        new com.strongdm.api.AccountAttachmentHistory();
    porcelain.setAccountAttachment(
        Plumbing.convertAccountAttachmentToPorcelain(plumbing.getAccountAttachment()));
    porcelain.setActivityId((plumbing.getActivityId()));
    porcelain.setDeletedAt(Plumbing.convertTimestampToPorcelain(plumbing.getDeletedAt()));
    porcelain.setTimestamp(Plumbing.convertTimestampToPorcelain(plumbing.getTimestamp()));
    return porcelain;
  }

  public static AccountAttachmentHistory convertAccountAttachmentHistoryToPlumbing(
      com.strongdm.api.AccountAttachmentHistory porcelain) {
    if (porcelain == null) {
      return null;
    }
    AccountAttachmentHistory.Builder builder = AccountAttachmentHistory.newBuilder();
    if (porcelain.getAccountAttachment() != null) {
      builder.setAccountAttachment(
          Plumbing.convertAccountAttachmentToPlumbing(porcelain.getAccountAttachment()));
    }
    if (porcelain.getActivityId() != null) {
      builder.setActivityId((porcelain.getActivityId()));
    }
    if (porcelain.getDeletedAt() != null) {
      builder.setDeletedAt(Plumbing.convertTimestampToPlumbing(porcelain.getDeletedAt()));
    }
    if (porcelain.getTimestamp() != null) {
      builder.setTimestamp(Plumbing.convertTimestampToPlumbing(porcelain.getTimestamp()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AccountAttachmentHistory>
      convertRepeatedAccountAttachmentHistoryToPorcelain(
          Collection<AccountAttachmentHistory> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAccountAttachmentHistoryToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AccountAttachmentHistory> convertRepeatedAccountAttachmentHistoryToPlumbing(
      Collection<com.strongdm.api.AccountAttachmentHistory> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAccountAttachmentHistoryToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AccountCreateResponse convertAccountCreateResponseToPorcelain(
      AccountCreateResponse plumbing) {
    com.strongdm.api.AccountCreateResponse porcelain = new com.strongdm.api.AccountCreateResponse();
    porcelain.setAccount(Plumbing.convertAccountToPorcelain(plumbing.getAccount()));
    porcelain.setMeta(Plumbing.convertCreateResponseMetadataToPorcelain(plumbing.getMeta()));
    porcelain.setRateLimit(Plumbing.convertRateLimitMetadataToPorcelain(plumbing.getRateLimit()));
    porcelain.setToken((plumbing.getToken()));
    return porcelain;
  }

  public static AccountCreateResponse convertAccountCreateResponseToPlumbing(
      com.strongdm.api.AccountCreateResponse porcelain) {
    if (porcelain == null) {
      return null;
    }
    AccountCreateResponse.Builder builder = AccountCreateResponse.newBuilder();
    if (porcelain.getAccount() != null) {
      builder.setAccount(Plumbing.convertAccountToPlumbing(porcelain.getAccount()));
    }
    if (porcelain.getMeta() != null) {
      builder.setMeta(Plumbing.convertCreateResponseMetadataToPlumbing(porcelain.getMeta()));
    }
    if (porcelain.getRateLimit() != null) {
      builder.setRateLimit(Plumbing.convertRateLimitMetadataToPlumbing(porcelain.getRateLimit()));
    }
    if (porcelain.getToken() != null) {
      builder.setToken((porcelain.getToken()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AccountCreateResponse>
      convertRepeatedAccountCreateResponseToPorcelain(Collection<AccountCreateResponse> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAccountCreateResponseToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AccountCreateResponse> convertRepeatedAccountCreateResponseToPlumbing(
      Collection<com.strongdm.api.AccountCreateResponse> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAccountCreateResponseToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AccountDeleteResponse convertAccountDeleteResponseToPorcelain(
      AccountDeleteResponse plumbing) {
    com.strongdm.api.AccountDeleteResponse porcelain = new com.strongdm.api.AccountDeleteResponse();
    porcelain.setMeta(Plumbing.convertDeleteResponseMetadataToPorcelain(plumbing.getMeta()));
    porcelain.setRateLimit(Plumbing.convertRateLimitMetadataToPorcelain(plumbing.getRateLimit()));
    return porcelain;
  }

  public static AccountDeleteResponse convertAccountDeleteResponseToPlumbing(
      com.strongdm.api.AccountDeleteResponse porcelain) {
    if (porcelain == null) {
      return null;
    }
    AccountDeleteResponse.Builder builder = AccountDeleteResponse.newBuilder();
    if (porcelain.getMeta() != null) {
      builder.setMeta(Plumbing.convertDeleteResponseMetadataToPlumbing(porcelain.getMeta()));
    }
    if (porcelain.getRateLimit() != null) {
      builder.setRateLimit(Plumbing.convertRateLimitMetadataToPlumbing(porcelain.getRateLimit()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AccountDeleteResponse>
      convertRepeatedAccountDeleteResponseToPorcelain(Collection<AccountDeleteResponse> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAccountDeleteResponseToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AccountDeleteResponse> convertRepeatedAccountDeleteResponseToPlumbing(
      Collection<com.strongdm.api.AccountDeleteResponse> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAccountDeleteResponseToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AccountGetResponse convertAccountGetResponseToPorcelain(
      AccountGetResponse plumbing) {
    com.strongdm.api.AccountGetResponse porcelain = new com.strongdm.api.AccountGetResponse();
    porcelain.setAccount(Plumbing.convertAccountToPorcelain(plumbing.getAccount()));
    porcelain.setMeta(Plumbing.convertGetResponseMetadataToPorcelain(plumbing.getMeta()));
    porcelain.setRateLimit(Plumbing.convertRateLimitMetadataToPorcelain(plumbing.getRateLimit()));
    return porcelain;
  }

  public static AccountGetResponse convertAccountGetResponseToPlumbing(
      com.strongdm.api.AccountGetResponse porcelain) {
    if (porcelain == null) {
      return null;
    }
    AccountGetResponse.Builder builder = AccountGetResponse.newBuilder();
    if (porcelain.getAccount() != null) {
      builder.setAccount(Plumbing.convertAccountToPlumbing(porcelain.getAccount()));
    }
    if (porcelain.getMeta() != null) {
      builder.setMeta(Plumbing.convertGetResponseMetadataToPlumbing(porcelain.getMeta()));
    }
    if (porcelain.getRateLimit() != null) {
      builder.setRateLimit(Plumbing.convertRateLimitMetadataToPlumbing(porcelain.getRateLimit()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AccountGetResponse>
      convertRepeatedAccountGetResponseToPorcelain(Collection<AccountGetResponse> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAccountGetResponseToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AccountGetResponse> convertRepeatedAccountGetResponseToPlumbing(
      Collection<com.strongdm.api.AccountGetResponse> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAccountGetResponseToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AccountGrant convertAccountGrantToPorcelain(
      AccountGrant plumbing) {
    com.strongdm.api.AccountGrant porcelain = new com.strongdm.api.AccountGrant();
    porcelain.setAccountId((plumbing.getAccountId()));
    porcelain.setId((plumbing.getId()));
    porcelain.setResourceId((plumbing.getResourceId()));
    porcelain.setStartFrom(Plumbing.convertTimestampToPorcelain(plumbing.getStartFrom()));
    porcelain.setValidUntil(Plumbing.convertTimestampToPorcelain(plumbing.getValidUntil()));
    return porcelain;
  }

  public static AccountGrant convertAccountGrantToPlumbing(
      com.strongdm.api.AccountGrant porcelain) {
    if (porcelain == null) {
      return null;
    }
    AccountGrant.Builder builder = AccountGrant.newBuilder();
    if (porcelain.getAccountId() != null) {
      builder.setAccountId((porcelain.getAccountId()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getResourceId() != null) {
      builder.setResourceId((porcelain.getResourceId()));
    }
    if (porcelain.getStartFrom() != null) {
      builder.setStartFrom(Plumbing.convertTimestampToPlumbing(porcelain.getStartFrom()));
    }
    if (porcelain.getValidUntil() != null) {
      builder.setValidUntil(Plumbing.convertTimestampToPlumbing(porcelain.getValidUntil()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AccountGrant> convertRepeatedAccountGrantToPorcelain(
      Collection<AccountGrant> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAccountGrantToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AccountGrant> convertRepeatedAccountGrantToPlumbing(
      Collection<com.strongdm.api.AccountGrant> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAccountGrantToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AccountGrantCreateResponse
      convertAccountGrantCreateResponseToPorcelain(AccountGrantCreateResponse plumbing) {
    com.strongdm.api.AccountGrantCreateResponse porcelain =
        new com.strongdm.api.AccountGrantCreateResponse();
    porcelain.setAccountGrant(Plumbing.convertAccountGrantToPorcelain(plumbing.getAccountGrant()));
    porcelain.setMeta(Plumbing.convertCreateResponseMetadataToPorcelain(plumbing.getMeta()));
    porcelain.setRateLimit(Plumbing.convertRateLimitMetadataToPorcelain(plumbing.getRateLimit()));
    return porcelain;
  }

  public static AccountGrantCreateResponse convertAccountGrantCreateResponseToPlumbing(
      com.strongdm.api.AccountGrantCreateResponse porcelain) {
    if (porcelain == null) {
      return null;
    }
    AccountGrantCreateResponse.Builder builder = AccountGrantCreateResponse.newBuilder();
    if (porcelain.getAccountGrant() != null) {
      builder.setAccountGrant(Plumbing.convertAccountGrantToPlumbing(porcelain.getAccountGrant()));
    }
    if (porcelain.getMeta() != null) {
      builder.setMeta(Plumbing.convertCreateResponseMetadataToPlumbing(porcelain.getMeta()));
    }
    if (porcelain.getRateLimit() != null) {
      builder.setRateLimit(Plumbing.convertRateLimitMetadataToPlumbing(porcelain.getRateLimit()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AccountGrantCreateResponse>
      convertRepeatedAccountGrantCreateResponseToPorcelain(
          Collection<AccountGrantCreateResponse> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAccountGrantCreateResponseToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AccountGrantCreateResponse>
      convertRepeatedAccountGrantCreateResponseToPlumbing(
          Collection<com.strongdm.api.AccountGrantCreateResponse> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAccountGrantCreateResponseToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AccountGrantDeleteResponse
      convertAccountGrantDeleteResponseToPorcelain(AccountGrantDeleteResponse plumbing) {
    com.strongdm.api.AccountGrantDeleteResponse porcelain =
        new com.strongdm.api.AccountGrantDeleteResponse();
    porcelain.setMeta(Plumbing.convertDeleteResponseMetadataToPorcelain(plumbing.getMeta()));
    porcelain.setRateLimit(Plumbing.convertRateLimitMetadataToPorcelain(plumbing.getRateLimit()));
    return porcelain;
  }

  public static AccountGrantDeleteResponse convertAccountGrantDeleteResponseToPlumbing(
      com.strongdm.api.AccountGrantDeleteResponse porcelain) {
    if (porcelain == null) {
      return null;
    }
    AccountGrantDeleteResponse.Builder builder = AccountGrantDeleteResponse.newBuilder();
    if (porcelain.getMeta() != null) {
      builder.setMeta(Plumbing.convertDeleteResponseMetadataToPlumbing(porcelain.getMeta()));
    }
    if (porcelain.getRateLimit() != null) {
      builder.setRateLimit(Plumbing.convertRateLimitMetadataToPlumbing(porcelain.getRateLimit()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AccountGrantDeleteResponse>
      convertRepeatedAccountGrantDeleteResponseToPorcelain(
          Collection<AccountGrantDeleteResponse> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAccountGrantDeleteResponseToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AccountGrantDeleteResponse>
      convertRepeatedAccountGrantDeleteResponseToPlumbing(
          Collection<com.strongdm.api.AccountGrantDeleteResponse> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAccountGrantDeleteResponseToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AccountGrantGetResponse convertAccountGrantGetResponseToPorcelain(
      AccountGrantGetResponse plumbing) {
    com.strongdm.api.AccountGrantGetResponse porcelain =
        new com.strongdm.api.AccountGrantGetResponse();
    porcelain.setAccountGrant(Plumbing.convertAccountGrantToPorcelain(plumbing.getAccountGrant()));
    porcelain.setMeta(Plumbing.convertGetResponseMetadataToPorcelain(plumbing.getMeta()));
    porcelain.setRateLimit(Plumbing.convertRateLimitMetadataToPorcelain(plumbing.getRateLimit()));
    return porcelain;
  }

  public static AccountGrantGetResponse convertAccountGrantGetResponseToPlumbing(
      com.strongdm.api.AccountGrantGetResponse porcelain) {
    if (porcelain == null) {
      return null;
    }
    AccountGrantGetResponse.Builder builder = AccountGrantGetResponse.newBuilder();
    if (porcelain.getAccountGrant() != null) {
      builder.setAccountGrant(Plumbing.convertAccountGrantToPlumbing(porcelain.getAccountGrant()));
    }
    if (porcelain.getMeta() != null) {
      builder.setMeta(Plumbing.convertGetResponseMetadataToPlumbing(porcelain.getMeta()));
    }
    if (porcelain.getRateLimit() != null) {
      builder.setRateLimit(Plumbing.convertRateLimitMetadataToPlumbing(porcelain.getRateLimit()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AccountGrantGetResponse>
      convertRepeatedAccountGrantGetResponseToPorcelain(
          Collection<AccountGrantGetResponse> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAccountGrantGetResponseToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AccountGrantGetResponse> convertRepeatedAccountGrantGetResponseToPlumbing(
      Collection<com.strongdm.api.AccountGrantGetResponse> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAccountGrantGetResponseToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AccountGrantHistory convertAccountGrantHistoryToPorcelain(
      AccountGrantHistory plumbing) {
    com.strongdm.api.AccountGrantHistory porcelain = new com.strongdm.api.AccountGrantHistory();
    porcelain.setAccountGrant(Plumbing.convertAccountGrantToPorcelain(plumbing.getAccountGrant()));
    porcelain.setActivityId((plumbing.getActivityId()));
    porcelain.setDeletedAt(Plumbing.convertTimestampToPorcelain(plumbing.getDeletedAt()));
    porcelain.setTimestamp(Plumbing.convertTimestampToPorcelain(plumbing.getTimestamp()));
    return porcelain;
  }

  public static AccountGrantHistory convertAccountGrantHistoryToPlumbing(
      com.strongdm.api.AccountGrantHistory porcelain) {
    if (porcelain == null) {
      return null;
    }
    AccountGrantHistory.Builder builder = AccountGrantHistory.newBuilder();
    if (porcelain.getAccountGrant() != null) {
      builder.setAccountGrant(Plumbing.convertAccountGrantToPlumbing(porcelain.getAccountGrant()));
    }
    if (porcelain.getActivityId() != null) {
      builder.setActivityId((porcelain.getActivityId()));
    }
    if (porcelain.getDeletedAt() != null) {
      builder.setDeletedAt(Plumbing.convertTimestampToPlumbing(porcelain.getDeletedAt()));
    }
    if (porcelain.getTimestamp() != null) {
      builder.setTimestamp(Plumbing.convertTimestampToPlumbing(porcelain.getTimestamp()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AccountGrantHistory>
      convertRepeatedAccountGrantHistoryToPorcelain(Collection<AccountGrantHistory> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAccountGrantHistoryToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AccountGrantHistory> convertRepeatedAccountGrantHistoryToPlumbing(
      Collection<com.strongdm.api.AccountGrantHistory> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAccountGrantHistoryToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AccountHistory convertAccountHistoryToPorcelain(
      AccountHistory plumbing) {
    com.strongdm.api.AccountHistory porcelain = new com.strongdm.api.AccountHistory();
    porcelain.setAccount(Plumbing.convertAccountToPorcelain(plumbing.getAccount()));
    porcelain.setActivityId((plumbing.getActivityId()));
    porcelain.setDeletedAt(Plumbing.convertTimestampToPorcelain(plumbing.getDeletedAt()));
    porcelain.setTimestamp(Plumbing.convertTimestampToPorcelain(plumbing.getTimestamp()));
    return porcelain;
  }

  public static AccountHistory convertAccountHistoryToPlumbing(
      com.strongdm.api.AccountHistory porcelain) {
    if (porcelain == null) {
      return null;
    }
    AccountHistory.Builder builder = AccountHistory.newBuilder();
    if (porcelain.getAccount() != null) {
      builder.setAccount(Plumbing.convertAccountToPlumbing(porcelain.getAccount()));
    }
    if (porcelain.getActivityId() != null) {
      builder.setActivityId((porcelain.getActivityId()));
    }
    if (porcelain.getDeletedAt() != null) {
      builder.setDeletedAt(Plumbing.convertTimestampToPlumbing(porcelain.getDeletedAt()));
    }
    if (porcelain.getTimestamp() != null) {
      builder.setTimestamp(Plumbing.convertTimestampToPlumbing(porcelain.getTimestamp()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AccountHistory> convertRepeatedAccountHistoryToPorcelain(
      Collection<AccountHistory> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAccountHistoryToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AccountHistory> convertRepeatedAccountHistoryToPlumbing(
      Collection<com.strongdm.api.AccountHistory> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAccountHistoryToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AccountPermission convertAccountPermissionToPorcelain(
      AccountPermission plumbing) {
    com.strongdm.api.AccountPermission porcelain = new com.strongdm.api.AccountPermission();
    porcelain.setAccountId((plumbing.getAccountId()));
    porcelain.setGrantedAt(Plumbing.convertTimestampToPorcelain(plumbing.getGrantedAt()));
    porcelain.setPermission((plumbing.getPermission()));
    porcelain.setScope((plumbing.getScope()));
    porcelain.setScopedId((plumbing.getScopedId()));
    return porcelain;
  }

  public static AccountPermission convertAccountPermissionToPlumbing(
      com.strongdm.api.AccountPermission porcelain) {
    if (porcelain == null) {
      return null;
    }
    AccountPermission.Builder builder = AccountPermission.newBuilder();
    if (porcelain.getAccountId() != null) {
      builder.setAccountId((porcelain.getAccountId()));
    }
    if (porcelain.getGrantedAt() != null) {
      builder.setGrantedAt(Plumbing.convertTimestampToPlumbing(porcelain.getGrantedAt()));
    }
    if (porcelain.getPermission() != null) {
      builder.setPermission((porcelain.getPermission()));
    }
    if (porcelain.getScope() != null) {
      builder.setScope((porcelain.getScope()));
    }
    if (porcelain.getScopedId() != null) {
      builder.setScopedId((porcelain.getScopedId()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AccountPermission>
      convertRepeatedAccountPermissionToPorcelain(Collection<AccountPermission> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAccountPermissionToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AccountPermission> convertRepeatedAccountPermissionToPlumbing(
      Collection<com.strongdm.api.AccountPermission> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAccountPermissionToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AccountResource convertAccountResourceToPorcelain(
      AccountResource plumbing) {
    com.strongdm.api.AccountResource porcelain = new com.strongdm.api.AccountResource();
    porcelain.setAccountGrantId((plumbing.getAccountGrantId()));
    porcelain.setAccountId((plumbing.getAccountId()));
    porcelain.setExpiresAt(Plumbing.convertTimestampToPorcelain(plumbing.getExpiresAt()));
    porcelain.setGrantedAt(Plumbing.convertTimestampToPorcelain(plumbing.getGrantedAt()));
    porcelain.setResourceId((plumbing.getResourceId()));
    porcelain.setRoleId((plumbing.getRoleId()));
    return porcelain;
  }

  public static AccountResource convertAccountResourceToPlumbing(
      com.strongdm.api.AccountResource porcelain) {
    if (porcelain == null) {
      return null;
    }
    AccountResource.Builder builder = AccountResource.newBuilder();
    if (porcelain.getAccountGrantId() != null) {
      builder.setAccountGrantId((porcelain.getAccountGrantId()));
    }
    if (porcelain.getAccountId() != null) {
      builder.setAccountId((porcelain.getAccountId()));
    }
    if (porcelain.getExpiresAt() != null) {
      builder.setExpiresAt(Plumbing.convertTimestampToPlumbing(porcelain.getExpiresAt()));
    }
    if (porcelain.getGrantedAt() != null) {
      builder.setGrantedAt(Plumbing.convertTimestampToPlumbing(porcelain.getGrantedAt()));
    }
    if (porcelain.getResourceId() != null) {
      builder.setResourceId((porcelain.getResourceId()));
    }
    if (porcelain.getRoleId() != null) {
      builder.setRoleId((porcelain.getRoleId()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AccountResource> convertRepeatedAccountResourceToPorcelain(
      Collection<AccountResource> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAccountResourceToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AccountResource> convertRepeatedAccountResourceToPlumbing(
      Collection<com.strongdm.api.AccountResource> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAccountResourceToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AccountResourceHistory convertAccountResourceHistoryToPorcelain(
      AccountResourceHistory plumbing) {
    com.strongdm.api.AccountResourceHistory porcelain =
        new com.strongdm.api.AccountResourceHistory();
    porcelain.setAccountResource(
        Plumbing.convertAccountResourceToPorcelain(plumbing.getAccountResource()));
    porcelain.setActivityId((plumbing.getActivityId()));
    porcelain.setDeletedAt(Plumbing.convertTimestampToPorcelain(plumbing.getDeletedAt()));
    porcelain.setTimestamp(Plumbing.convertTimestampToPorcelain(plumbing.getTimestamp()));
    return porcelain;
  }

  public static AccountResourceHistory convertAccountResourceHistoryToPlumbing(
      com.strongdm.api.AccountResourceHistory porcelain) {
    if (porcelain == null) {
      return null;
    }
    AccountResourceHistory.Builder builder = AccountResourceHistory.newBuilder();
    if (porcelain.getAccountResource() != null) {
      builder.setAccountResource(
          Plumbing.convertAccountResourceToPlumbing(porcelain.getAccountResource()));
    }
    if (porcelain.getActivityId() != null) {
      builder.setActivityId((porcelain.getActivityId()));
    }
    if (porcelain.getDeletedAt() != null) {
      builder.setDeletedAt(Plumbing.convertTimestampToPlumbing(porcelain.getDeletedAt()));
    }
    if (porcelain.getTimestamp() != null) {
      builder.setTimestamp(Plumbing.convertTimestampToPlumbing(porcelain.getTimestamp()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AccountResourceHistory>
      convertRepeatedAccountResourceHistoryToPorcelain(
          Collection<AccountResourceHistory> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAccountResourceHistoryToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AccountResourceHistory> convertRepeatedAccountResourceHistoryToPlumbing(
      Collection<com.strongdm.api.AccountResourceHistory> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAccountResourceHistoryToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AccountUpdateResponse convertAccountUpdateResponseToPorcelain(
      AccountUpdateResponse plumbing) {
    com.strongdm.api.AccountUpdateResponse porcelain = new com.strongdm.api.AccountUpdateResponse();
    porcelain.setAccount(Plumbing.convertAccountToPorcelain(plumbing.getAccount()));
    porcelain.setMeta(Plumbing.convertUpdateResponseMetadataToPorcelain(plumbing.getMeta()));
    porcelain.setRateLimit(Plumbing.convertRateLimitMetadataToPorcelain(plumbing.getRateLimit()));
    return porcelain;
  }

  public static AccountUpdateResponse convertAccountUpdateResponseToPlumbing(
      com.strongdm.api.AccountUpdateResponse porcelain) {
    if (porcelain == null) {
      return null;
    }
    AccountUpdateResponse.Builder builder = AccountUpdateResponse.newBuilder();
    if (porcelain.getAccount() != null) {
      builder.setAccount(Plumbing.convertAccountToPlumbing(porcelain.getAccount()));
    }
    if (porcelain.getMeta() != null) {
      builder.setMeta(Plumbing.convertUpdateResponseMetadataToPlumbing(porcelain.getMeta()));
    }
    if (porcelain.getRateLimit() != null) {
      builder.setRateLimit(Plumbing.convertRateLimitMetadataToPlumbing(porcelain.getRateLimit()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AccountUpdateResponse>
      convertRepeatedAccountUpdateResponseToPorcelain(Collection<AccountUpdateResponse> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAccountUpdateResponseToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AccountUpdateResponse> convertRepeatedAccountUpdateResponseToPlumbing(
      Collection<com.strongdm.api.AccountUpdateResponse> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAccountUpdateResponseToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.Activity convertActivityToPorcelain(Activity plumbing) {
    com.strongdm.api.Activity porcelain = new com.strongdm.api.Activity();
    porcelain.setActor(Plumbing.convertActivityActorToPorcelain(plumbing.getActor()));
    porcelain.setCompletedAt(Plumbing.convertTimestampToPorcelain(plumbing.getCompletedAt()));
    porcelain.setDescription((plumbing.getDescription()));
    porcelain.setEntities(
        Plumbing.convertRepeatedActivityEntityToPorcelain(plumbing.getEntitiesList()));
    porcelain.setId((plumbing.getId()));
    porcelain.setIpAddress((plumbing.getIpAddress()));
    porcelain.setVerb((plumbing.getVerb()));
    return porcelain;
  }

  public static Activity convertActivityToPlumbing(com.strongdm.api.Activity porcelain) {
    if (porcelain == null) {
      return null;
    }
    Activity.Builder builder = Activity.newBuilder();
    if (porcelain.getActor() != null) {
      builder.setActor(Plumbing.convertActivityActorToPlumbing(porcelain.getActor()));
    }
    if (porcelain.getCompletedAt() != null) {
      builder.setCompletedAt(Plumbing.convertTimestampToPlumbing(porcelain.getCompletedAt()));
    }
    if (porcelain.getDescription() != null) {
      builder.setDescription((porcelain.getDescription()));
    }
    builder.addAllEntities(
        Plumbing.convertRepeatedActivityEntityToPlumbing(porcelain.getEntities()));
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getIpAddress() != null) {
      builder.setIpAddress((porcelain.getIpAddress()));
    }
    if (porcelain.getVerb() != null) {
      builder.setVerb((porcelain.getVerb()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.Activity> convertRepeatedActivityToPorcelain(
      Collection<Activity> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertActivityToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<Activity> convertRepeatedActivityToPlumbing(
      Collection<com.strongdm.api.Activity> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertActivityToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.ActivityActor convertActivityActorToPorcelain(
      ActivityActor plumbing) {
    com.strongdm.api.ActivityActor porcelain = new com.strongdm.api.ActivityActor();
    porcelain.setActivityExternalId((plumbing.getActivityExternalId()));
    porcelain.setEmail((plumbing.getEmail()));
    porcelain.setFirstName((plumbing.getFirstName()));
    porcelain.setId((plumbing.getId()));
    porcelain.setLastName((plumbing.getLastName()));
    return porcelain;
  }

  public static ActivityActor convertActivityActorToPlumbing(
      com.strongdm.api.ActivityActor porcelain) {
    if (porcelain == null) {
      return null;
    }
    ActivityActor.Builder builder = ActivityActor.newBuilder();
    if (porcelain.getActivityExternalId() != null) {
      builder.setActivityExternalId((porcelain.getActivityExternalId()));
    }
    if (porcelain.getEmail() != null) {
      builder.setEmail((porcelain.getEmail()));
    }
    if (porcelain.getFirstName() != null) {
      builder.setFirstName((porcelain.getFirstName()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getLastName() != null) {
      builder.setLastName((porcelain.getLastName()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.ActivityActor> convertRepeatedActivityActorToPorcelain(
      Collection<ActivityActor> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertActivityActorToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<ActivityActor> convertRepeatedActivityActorToPlumbing(
      Collection<com.strongdm.api.ActivityActor> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertActivityActorToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.ActivityEntity convertActivityEntityToPorcelain(
      ActivityEntity plumbing) {
    com.strongdm.api.ActivityEntity porcelain = new com.strongdm.api.ActivityEntity();
    porcelain.setEmail((plumbing.getEmail()));
    porcelain.setExternalId((plumbing.getExternalId()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setType((plumbing.getType()));
    return porcelain;
  }

  public static ActivityEntity convertActivityEntityToPlumbing(
      com.strongdm.api.ActivityEntity porcelain) {
    if (porcelain == null) {
      return null;
    }
    ActivityEntity.Builder builder = ActivityEntity.newBuilder();
    if (porcelain.getEmail() != null) {
      builder.setEmail((porcelain.getEmail()));
    }
    if (porcelain.getExternalId() != null) {
      builder.setExternalId((porcelain.getExternalId()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getType() != null) {
      builder.setType((porcelain.getType()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.ActivityEntity> convertRepeatedActivityEntityToPorcelain(
      Collection<ActivityEntity> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertActivityEntityToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<ActivityEntity> convertRepeatedActivityEntityToPlumbing(
      Collection<com.strongdm.api.ActivityEntity> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertActivityEntityToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.ActivityGetResponse convertActivityGetResponseToPorcelain(
      ActivityGetResponse plumbing) {
    com.strongdm.api.ActivityGetResponse porcelain = new com.strongdm.api.ActivityGetResponse();
    porcelain.setActivity(Plumbing.convertActivityToPorcelain(plumbing.getActivity()));
    porcelain.setMeta(Plumbing.convertGetResponseMetadataToPorcelain(plumbing.getMeta()));
    porcelain.setRateLimit(Plumbing.convertRateLimitMetadataToPorcelain(plumbing.getRateLimit()));
    return porcelain;
  }

  public static ActivityGetResponse convertActivityGetResponseToPlumbing(
      com.strongdm.api.ActivityGetResponse porcelain) {
    if (porcelain == null) {
      return null;
    }
    ActivityGetResponse.Builder builder = ActivityGetResponse.newBuilder();
    if (porcelain.getActivity() != null) {
      builder.setActivity(Plumbing.convertActivityToPlumbing(porcelain.getActivity()));
    }
    if (porcelain.getMeta() != null) {
      builder.setMeta(Plumbing.convertGetResponseMetadataToPlumbing(porcelain.getMeta()));
    }
    if (porcelain.getRateLimit() != null) {
      builder.setRateLimit(Plumbing.convertRateLimitMetadataToPlumbing(porcelain.getRateLimit()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.ActivityGetResponse>
      convertRepeatedActivityGetResponseToPorcelain(Collection<ActivityGetResponse> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertActivityGetResponseToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<ActivityGetResponse> convertRepeatedActivityGetResponseToPlumbing(
      Collection<com.strongdm.api.ActivityGetResponse> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertActivityGetResponseToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AmazonEKS convertAmazonEKSToPorcelain(AmazonEKS plumbing) {
    com.strongdm.api.AmazonEKS porcelain = new com.strongdm.api.AmazonEKS();
    porcelain.setAccessKey((plumbing.getAccessKey()));
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setCertificateAuthority((plumbing.getCertificateAuthority()));
    porcelain.setClusterName((plumbing.getClusterName()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setEndpoint((plumbing.getEndpoint()));
    porcelain.setHealthcheckNamespace((plumbing.getHealthcheckNamespace()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setRegion((plumbing.getRegion()));
    porcelain.setRemoteIdentityGroupId((plumbing.getRemoteIdentityGroupId()));
    porcelain.setRemoteIdentityHealthcheckUsername(
        (plumbing.getRemoteIdentityHealthcheckUsername()));
    porcelain.setRoleArn((plumbing.getRoleArn()));
    porcelain.setRoleExternalId((plumbing.getRoleExternalId()));
    porcelain.setSecretAccessKey((plumbing.getSecretAccessKey()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    return porcelain;
  }

  public static AmazonEKS convertAmazonEKSToPlumbing(com.strongdm.api.AmazonEKS porcelain) {
    if (porcelain == null) {
      return null;
    }
    AmazonEKS.Builder builder = AmazonEKS.newBuilder();
    if (porcelain.getAccessKey() != null) {
      builder.setAccessKey((porcelain.getAccessKey()));
    }
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getCertificateAuthority() != null) {
      builder.setCertificateAuthority((porcelain.getCertificateAuthority()));
    }
    if (porcelain.getClusterName() != null) {
      builder.setClusterName((porcelain.getClusterName()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    if (porcelain.getEndpoint() != null) {
      builder.setEndpoint((porcelain.getEndpoint()));
    }
    if (porcelain.getHealthcheckNamespace() != null) {
      builder.setHealthcheckNamespace((porcelain.getHealthcheckNamespace()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getRegion() != null) {
      builder.setRegion((porcelain.getRegion()));
    }
    if (porcelain.getRemoteIdentityGroupId() != null) {
      builder.setRemoteIdentityGroupId((porcelain.getRemoteIdentityGroupId()));
    }
    if (porcelain.getRemoteIdentityHealthcheckUsername() != null) {
      builder.setRemoteIdentityHealthcheckUsername(
          (porcelain.getRemoteIdentityHealthcheckUsername()));
    }
    if (porcelain.getRoleArn() != null) {
      builder.setRoleArn((porcelain.getRoleArn()));
    }
    if (porcelain.getRoleExternalId() != null) {
      builder.setRoleExternalId((porcelain.getRoleExternalId()));
    }
    if (porcelain.getSecretAccessKey() != null) {
      builder.setSecretAccessKey((porcelain.getSecretAccessKey()));
    }
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AmazonEKS> convertRepeatedAmazonEKSToPorcelain(
      Collection<AmazonEKS> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAmazonEKSToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AmazonEKS> convertRepeatedAmazonEKSToPlumbing(
      Collection<com.strongdm.api.AmazonEKS> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAmazonEKSToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AmazonEKSInstanceProfile
      convertAmazonEKSInstanceProfileToPorcelain(AmazonEKSInstanceProfile plumbing) {
    com.strongdm.api.AmazonEKSInstanceProfile porcelain =
        new com.strongdm.api.AmazonEKSInstanceProfile();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setCertificateAuthority((plumbing.getCertificateAuthority()));
    porcelain.setClusterName((plumbing.getClusterName()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setEndpoint((plumbing.getEndpoint()));
    porcelain.setHealthcheckNamespace((plumbing.getHealthcheckNamespace()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setRegion((plumbing.getRegion()));
    porcelain.setRemoteIdentityGroupId((plumbing.getRemoteIdentityGroupId()));
    porcelain.setRemoteIdentityHealthcheckUsername(
        (plumbing.getRemoteIdentityHealthcheckUsername()));
    porcelain.setRoleArn((plumbing.getRoleArn()));
    porcelain.setRoleExternalId((plumbing.getRoleExternalId()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    return porcelain;
  }

  public static AmazonEKSInstanceProfile convertAmazonEKSInstanceProfileToPlumbing(
      com.strongdm.api.AmazonEKSInstanceProfile porcelain) {
    if (porcelain == null) {
      return null;
    }
    AmazonEKSInstanceProfile.Builder builder = AmazonEKSInstanceProfile.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getCertificateAuthority() != null) {
      builder.setCertificateAuthority((porcelain.getCertificateAuthority()));
    }
    if (porcelain.getClusterName() != null) {
      builder.setClusterName((porcelain.getClusterName()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    if (porcelain.getEndpoint() != null) {
      builder.setEndpoint((porcelain.getEndpoint()));
    }
    if (porcelain.getHealthcheckNamespace() != null) {
      builder.setHealthcheckNamespace((porcelain.getHealthcheckNamespace()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getRegion() != null) {
      builder.setRegion((porcelain.getRegion()));
    }
    if (porcelain.getRemoteIdentityGroupId() != null) {
      builder.setRemoteIdentityGroupId((porcelain.getRemoteIdentityGroupId()));
    }
    if (porcelain.getRemoteIdentityHealthcheckUsername() != null) {
      builder.setRemoteIdentityHealthcheckUsername(
          (porcelain.getRemoteIdentityHealthcheckUsername()));
    }
    if (porcelain.getRoleArn() != null) {
      builder.setRoleArn((porcelain.getRoleArn()));
    }
    if (porcelain.getRoleExternalId() != null) {
      builder.setRoleExternalId((porcelain.getRoleExternalId()));
    }
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AmazonEKSInstanceProfile>
      convertRepeatedAmazonEKSInstanceProfileToPorcelain(
          Collection<AmazonEKSInstanceProfile> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAmazonEKSInstanceProfileToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AmazonEKSInstanceProfile> convertRepeatedAmazonEKSInstanceProfileToPlumbing(
      Collection<com.strongdm.api.AmazonEKSInstanceProfile> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAmazonEKSInstanceProfileToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AmazonEKSInstanceProfileUserImpersonation
      convertAmazonEKSInstanceProfileUserImpersonationToPorcelain(
          AmazonEKSInstanceProfileUserImpersonation plumbing) {
    com.strongdm.api.AmazonEKSInstanceProfileUserImpersonation porcelain =
        new com.strongdm.api.AmazonEKSInstanceProfileUserImpersonation();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setCertificateAuthority((plumbing.getCertificateAuthority()));
    porcelain.setClusterName((plumbing.getClusterName()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setEndpoint((plumbing.getEndpoint()));
    porcelain.setHealthcheckNamespace((plumbing.getHealthcheckNamespace()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setRegion((plumbing.getRegion()));
    porcelain.setRemoteIdentityGroupId((plumbing.getRemoteIdentityGroupId()));
    porcelain.setRemoteIdentityHealthcheckUsername(
        (plumbing.getRemoteIdentityHealthcheckUsername()));
    porcelain.setRoleArn((plumbing.getRoleArn()));
    porcelain.setRoleExternalId((plumbing.getRoleExternalId()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    return porcelain;
  }

  public static AmazonEKSInstanceProfileUserImpersonation
      convertAmazonEKSInstanceProfileUserImpersonationToPlumbing(
          com.strongdm.api.AmazonEKSInstanceProfileUserImpersonation porcelain) {
    if (porcelain == null) {
      return null;
    }
    AmazonEKSInstanceProfileUserImpersonation.Builder builder =
        AmazonEKSInstanceProfileUserImpersonation.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getCertificateAuthority() != null) {
      builder.setCertificateAuthority((porcelain.getCertificateAuthority()));
    }
    if (porcelain.getClusterName() != null) {
      builder.setClusterName((porcelain.getClusterName()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    if (porcelain.getEndpoint() != null) {
      builder.setEndpoint((porcelain.getEndpoint()));
    }
    if (porcelain.getHealthcheckNamespace() != null) {
      builder.setHealthcheckNamespace((porcelain.getHealthcheckNamespace()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getRegion() != null) {
      builder.setRegion((porcelain.getRegion()));
    }
    if (porcelain.getRemoteIdentityGroupId() != null) {
      builder.setRemoteIdentityGroupId((porcelain.getRemoteIdentityGroupId()));
    }
    if (porcelain.getRemoteIdentityHealthcheckUsername() != null) {
      builder.setRemoteIdentityHealthcheckUsername(
          (porcelain.getRemoteIdentityHealthcheckUsername()));
    }
    if (porcelain.getRoleArn() != null) {
      builder.setRoleArn((porcelain.getRoleArn()));
    }
    if (porcelain.getRoleExternalId() != null) {
      builder.setRoleExternalId((porcelain.getRoleExternalId()));
    }
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AmazonEKSInstanceProfileUserImpersonation>
      convertRepeatedAmazonEKSInstanceProfileUserImpersonationToPorcelain(
          Collection<AmazonEKSInstanceProfileUserImpersonation> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAmazonEKSInstanceProfileUserImpersonationToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AmazonEKSInstanceProfileUserImpersonation>
      convertRepeatedAmazonEKSInstanceProfileUserImpersonationToPlumbing(
          Collection<com.strongdm.api.AmazonEKSInstanceProfileUserImpersonation> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAmazonEKSInstanceProfileUserImpersonationToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AmazonEKSUserImpersonation
      convertAmazonEKSUserImpersonationToPorcelain(AmazonEKSUserImpersonation plumbing) {
    com.strongdm.api.AmazonEKSUserImpersonation porcelain =
        new com.strongdm.api.AmazonEKSUserImpersonation();
    porcelain.setAccessKey((plumbing.getAccessKey()));
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setCertificateAuthority((plumbing.getCertificateAuthority()));
    porcelain.setClusterName((plumbing.getClusterName()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setEndpoint((plumbing.getEndpoint()));
    porcelain.setHealthcheckNamespace((plumbing.getHealthcheckNamespace()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setRegion((plumbing.getRegion()));
    porcelain.setRoleArn((plumbing.getRoleArn()));
    porcelain.setRoleExternalId((plumbing.getRoleExternalId()));
    porcelain.setSecretAccessKey((plumbing.getSecretAccessKey()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    return porcelain;
  }

  public static AmazonEKSUserImpersonation convertAmazonEKSUserImpersonationToPlumbing(
      com.strongdm.api.AmazonEKSUserImpersonation porcelain) {
    if (porcelain == null) {
      return null;
    }
    AmazonEKSUserImpersonation.Builder builder = AmazonEKSUserImpersonation.newBuilder();
    if (porcelain.getAccessKey() != null) {
      builder.setAccessKey((porcelain.getAccessKey()));
    }
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getCertificateAuthority() != null) {
      builder.setCertificateAuthority((porcelain.getCertificateAuthority()));
    }
    if (porcelain.getClusterName() != null) {
      builder.setClusterName((porcelain.getClusterName()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    if (porcelain.getEndpoint() != null) {
      builder.setEndpoint((porcelain.getEndpoint()));
    }
    if (porcelain.getHealthcheckNamespace() != null) {
      builder.setHealthcheckNamespace((porcelain.getHealthcheckNamespace()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getRegion() != null) {
      builder.setRegion((porcelain.getRegion()));
    }
    if (porcelain.getRoleArn() != null) {
      builder.setRoleArn((porcelain.getRoleArn()));
    }
    if (porcelain.getRoleExternalId() != null) {
      builder.setRoleExternalId((porcelain.getRoleExternalId()));
    }
    if (porcelain.getSecretAccessKey() != null) {
      builder.setSecretAccessKey((porcelain.getSecretAccessKey()));
    }
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AmazonEKSUserImpersonation>
      convertRepeatedAmazonEKSUserImpersonationToPorcelain(
          Collection<AmazonEKSUserImpersonation> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAmazonEKSUserImpersonationToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AmazonEKSUserImpersonation>
      convertRepeatedAmazonEKSUserImpersonationToPlumbing(
          Collection<com.strongdm.api.AmazonEKSUserImpersonation> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAmazonEKSUserImpersonationToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AmazonES convertAmazonESToPorcelain(AmazonES plumbing) {
    com.strongdm.api.AmazonES porcelain = new com.strongdm.api.AmazonES();
    porcelain.setAccessKey((plumbing.getAccessKey()));
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setEndpoint((plumbing.getEndpoint()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setRegion((plumbing.getRegion()));
    porcelain.setRoleArn((plumbing.getRoleArn()));
    porcelain.setRoleExternalId((plumbing.getRoleExternalId()));
    porcelain.setSecretAccessKey((plumbing.getSecretAccessKey()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    return porcelain;
  }

  public static AmazonES convertAmazonESToPlumbing(com.strongdm.api.AmazonES porcelain) {
    if (porcelain == null) {
      return null;
    }
    AmazonES.Builder builder = AmazonES.newBuilder();
    if (porcelain.getAccessKey() != null) {
      builder.setAccessKey((porcelain.getAccessKey()));
    }
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    if (porcelain.getEndpoint() != null) {
      builder.setEndpoint((porcelain.getEndpoint()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getRegion() != null) {
      builder.setRegion((porcelain.getRegion()));
    }
    if (porcelain.getRoleArn() != null) {
      builder.setRoleArn((porcelain.getRoleArn()));
    }
    if (porcelain.getRoleExternalId() != null) {
      builder.setRoleExternalId((porcelain.getRoleExternalId()));
    }
    if (porcelain.getSecretAccessKey() != null) {
      builder.setSecretAccessKey((porcelain.getSecretAccessKey()));
    }
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AmazonES> convertRepeatedAmazonESToPorcelain(
      Collection<AmazonES> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAmazonESToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AmazonES> convertRepeatedAmazonESToPlumbing(
      Collection<com.strongdm.api.AmazonES> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAmazonESToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AmazonMQAMQP091 convertAmazonMQAMQP091ToPorcelain(
      AmazonMQAMQP091 plumbing) {
    com.strongdm.api.AmazonMQAMQP091 porcelain = new com.strongdm.api.AmazonMQAMQP091();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setTlsRequired((plumbing.getTlsRequired()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static AmazonMQAMQP091 convertAmazonMQAMQP091ToPlumbing(
      com.strongdm.api.AmazonMQAMQP091 porcelain) {
    if (porcelain == null) {
      return null;
    }
    AmazonMQAMQP091.Builder builder = AmazonMQAMQP091.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    builder.setTlsRequired(porcelain.getTlsRequired());
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AmazonMQAMQP091> convertRepeatedAmazonMQAMQP091ToPorcelain(
      Collection<AmazonMQAMQP091> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAmazonMQAMQP091ToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AmazonMQAMQP091> convertRepeatedAmazonMQAMQP091ToPlumbing(
      Collection<com.strongdm.api.AmazonMQAMQP091> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAmazonMQAMQP091ToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.Athena convertAthenaToPorcelain(Athena plumbing) {
    com.strongdm.api.Athena porcelain = new com.strongdm.api.Athena();
    porcelain.setAccessKey((plumbing.getAccessKey()));
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setOutput((plumbing.getOutput()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setRegion((plumbing.getRegion()));
    porcelain.setRoleArn((plumbing.getRoleArn()));
    porcelain.setRoleExternalId((plumbing.getRoleExternalId()));
    porcelain.setSecretAccessKey((plumbing.getSecretAccessKey()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    return porcelain;
  }

  public static Athena convertAthenaToPlumbing(com.strongdm.api.Athena porcelain) {
    if (porcelain == null) {
      return null;
    }
    Athena.Builder builder = Athena.newBuilder();
    if (porcelain.getAccessKey() != null) {
      builder.setAccessKey((porcelain.getAccessKey()));
    }
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getOutput() != null) {
      builder.setOutput((porcelain.getOutput()));
    }
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getRegion() != null) {
      builder.setRegion((porcelain.getRegion()));
    }
    if (porcelain.getRoleArn() != null) {
      builder.setRoleArn((porcelain.getRoleArn()));
    }
    if (porcelain.getRoleExternalId() != null) {
      builder.setRoleExternalId((porcelain.getRoleExternalId()));
    }
    if (porcelain.getSecretAccessKey() != null) {
      builder.setSecretAccessKey((porcelain.getSecretAccessKey()));
    }
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.Athena> convertRepeatedAthenaToPorcelain(
      Collection<Athena> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAthenaToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<Athena> convertRepeatedAthenaToPlumbing(
      Collection<com.strongdm.api.Athena> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAthenaToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AuroraMysql convertAuroraMysqlToPorcelain(AuroraMysql plumbing) {
    com.strongdm.api.AuroraMysql porcelain = new com.strongdm.api.AuroraMysql();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setDatabase((plumbing.getDatabase()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static AuroraMysql convertAuroraMysqlToPlumbing(com.strongdm.api.AuroraMysql porcelain) {
    if (porcelain == null) {
      return null;
    }
    AuroraMysql.Builder builder = AuroraMysql.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getDatabase() != null) {
      builder.setDatabase((porcelain.getDatabase()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AuroraMysql> convertRepeatedAuroraMysqlToPorcelain(
      Collection<AuroraMysql> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAuroraMysqlToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AuroraMysql> convertRepeatedAuroraMysqlToPlumbing(
      Collection<com.strongdm.api.AuroraMysql> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAuroraMysqlToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AuroraPostgres convertAuroraPostgresToPorcelain(
      AuroraPostgres plumbing) {
    com.strongdm.api.AuroraPostgres porcelain = new com.strongdm.api.AuroraPostgres();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setDatabase((plumbing.getDatabase()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setOverrideDatabase((plumbing.getOverrideDatabase()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static AuroraPostgres convertAuroraPostgresToPlumbing(
      com.strongdm.api.AuroraPostgres porcelain) {
    if (porcelain == null) {
      return null;
    }
    AuroraPostgres.Builder builder = AuroraPostgres.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getDatabase() != null) {
      builder.setDatabase((porcelain.getDatabase()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    builder.setOverrideDatabase(porcelain.getOverrideDatabase());
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AuroraPostgres> convertRepeatedAuroraPostgresToPorcelain(
      Collection<AuroraPostgres> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAuroraPostgresToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AuroraPostgres> convertRepeatedAuroraPostgresToPlumbing(
      Collection<com.strongdm.api.AuroraPostgres> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAuroraPostgresToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.Azure convertAzureToPorcelain(Azure plumbing) {
    com.strongdm.api.Azure porcelain = new com.strongdm.api.Azure();
    porcelain.setAppId((plumbing.getAppId()));
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setTenantId((plumbing.getTenantId()));
    return porcelain;
  }

  public static Azure convertAzureToPlumbing(com.strongdm.api.Azure porcelain) {
    if (porcelain == null) {
      return null;
    }
    Azure.Builder builder = Azure.newBuilder();
    if (porcelain.getAppId() != null) {
      builder.setAppId((porcelain.getAppId()));
    }
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getTenantId() != null) {
      builder.setTenantId((porcelain.getTenantId()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.Azure> convertRepeatedAzureToPorcelain(
      Collection<Azure> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAzureToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<Azure> convertRepeatedAzureToPlumbing(
      Collection<com.strongdm.api.Azure> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAzureToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AzureCertificate convertAzureCertificateToPorcelain(
      AzureCertificate plumbing) {
    com.strongdm.api.AzureCertificate porcelain = new com.strongdm.api.AzureCertificate();
    porcelain.setAppId((plumbing.getAppId()));
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setClientCertificate((plumbing.getClientCertificate()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setTenantId((plumbing.getTenantId()));
    return porcelain;
  }

  public static AzureCertificate convertAzureCertificateToPlumbing(
      com.strongdm.api.AzureCertificate porcelain) {
    if (porcelain == null) {
      return null;
    }
    AzureCertificate.Builder builder = AzureCertificate.newBuilder();
    if (porcelain.getAppId() != null) {
      builder.setAppId((porcelain.getAppId()));
    }
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getClientCertificate() != null) {
      builder.setClientCertificate((porcelain.getClientCertificate()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getTenantId() != null) {
      builder.setTenantId((porcelain.getTenantId()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AzureCertificate> convertRepeatedAzureCertificateToPorcelain(
      Collection<AzureCertificate> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAzureCertificateToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AzureCertificate> convertRepeatedAzureCertificateToPlumbing(
      Collection<com.strongdm.api.AzureCertificate> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAzureCertificateToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AzureMysql convertAzureMysqlToPorcelain(AzureMysql plumbing) {
    com.strongdm.api.AzureMysql porcelain = new com.strongdm.api.AzureMysql();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setDatabase((plumbing.getDatabase()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static AzureMysql convertAzureMysqlToPlumbing(com.strongdm.api.AzureMysql porcelain) {
    if (porcelain == null) {
      return null;
    }
    AzureMysql.Builder builder = AzureMysql.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getDatabase() != null) {
      builder.setDatabase((porcelain.getDatabase()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AzureMysql> convertRepeatedAzureMysqlToPorcelain(
      Collection<AzureMysql> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAzureMysqlToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AzureMysql> convertRepeatedAzureMysqlToPlumbing(
      Collection<com.strongdm.api.AzureMysql> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAzureMysqlToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AzurePostgres convertAzurePostgresToPorcelain(
      AzurePostgres plumbing) {
    com.strongdm.api.AzurePostgres porcelain = new com.strongdm.api.AzurePostgres();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setDatabase((plumbing.getDatabase()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setOverrideDatabase((plumbing.getOverrideDatabase()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static AzurePostgres convertAzurePostgresToPlumbing(
      com.strongdm.api.AzurePostgres porcelain) {
    if (porcelain == null) {
      return null;
    }
    AzurePostgres.Builder builder = AzurePostgres.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getDatabase() != null) {
      builder.setDatabase((porcelain.getDatabase()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    builder.setOverrideDatabase(porcelain.getOverrideDatabase());
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AzurePostgres> convertRepeatedAzurePostgresToPorcelain(
      Collection<AzurePostgres> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAzurePostgresToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AzurePostgres> convertRepeatedAzurePostgresToPlumbing(
      Collection<com.strongdm.api.AzurePostgres> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAzurePostgresToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.AzureStore convertAzureStoreToPorcelain(AzureStore plumbing) {
    com.strongdm.api.AzureStore porcelain = new com.strongdm.api.AzureStore();
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setVaultUri((plumbing.getVaultUri()));
    return porcelain;
  }

  public static AzureStore convertAzureStoreToPlumbing(com.strongdm.api.AzureStore porcelain) {
    if (porcelain == null) {
      return null;
    }
    AzureStore.Builder builder = AzureStore.newBuilder();
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getVaultUri() != null) {
      builder.setVaultUri((porcelain.getVaultUri()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.AzureStore> convertRepeatedAzureStoreToPorcelain(
      Collection<AzureStore> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertAzureStoreToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<AzureStore> convertRepeatedAzureStoreToPlumbing(
      Collection<com.strongdm.api.AzureStore> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertAzureStoreToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.BigQuery convertBigQueryToPorcelain(BigQuery plumbing) {
    com.strongdm.api.BigQuery porcelain = new com.strongdm.api.BigQuery();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setEndpoint((plumbing.getEndpoint()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setPrivateKey((plumbing.getPrivateKey()));
    porcelain.setProject((plumbing.getProject()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static BigQuery convertBigQueryToPlumbing(com.strongdm.api.BigQuery porcelain) {
    if (porcelain == null) {
      return null;
    }
    BigQuery.Builder builder = BigQuery.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    if (porcelain.getEndpoint() != null) {
      builder.setEndpoint((porcelain.getEndpoint()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getPrivateKey() != null) {
      builder.setPrivateKey((porcelain.getPrivateKey()));
    }
    if (porcelain.getProject() != null) {
      builder.setProject((porcelain.getProject()));
    }
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.BigQuery> convertRepeatedBigQueryToPorcelain(
      Collection<BigQuery> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertBigQueryToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<BigQuery> convertRepeatedBigQueryToPlumbing(
      Collection<com.strongdm.api.BigQuery> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertBigQueryToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.Cassandra convertCassandraToPorcelain(Cassandra plumbing) {
    com.strongdm.api.Cassandra porcelain = new com.strongdm.api.Cassandra();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setTlsRequired((plumbing.getTlsRequired()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static Cassandra convertCassandraToPlumbing(com.strongdm.api.Cassandra porcelain) {
    if (porcelain == null) {
      return null;
    }
    Cassandra.Builder builder = Cassandra.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    builder.setTlsRequired(porcelain.getTlsRequired());
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.Cassandra> convertRepeatedCassandraToPorcelain(
      Collection<Cassandra> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertCassandraToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<Cassandra> convertRepeatedCassandraToPlumbing(
      Collection<com.strongdm.api.Cassandra> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertCassandraToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.Citus convertCitusToPorcelain(Citus plumbing) {
    com.strongdm.api.Citus porcelain = new com.strongdm.api.Citus();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setDatabase((plumbing.getDatabase()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setOverrideDatabase((plumbing.getOverrideDatabase()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static Citus convertCitusToPlumbing(com.strongdm.api.Citus porcelain) {
    if (porcelain == null) {
      return null;
    }
    Citus.Builder builder = Citus.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getDatabase() != null) {
      builder.setDatabase((porcelain.getDatabase()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    builder.setOverrideDatabase(porcelain.getOverrideDatabase());
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.Citus> convertRepeatedCitusToPorcelain(
      Collection<Citus> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertCitusToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<Citus> convertRepeatedCitusToPlumbing(
      Collection<com.strongdm.api.Citus> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertCitusToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.Clustrix convertClustrixToPorcelain(Clustrix plumbing) {
    com.strongdm.api.Clustrix porcelain = new com.strongdm.api.Clustrix();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setDatabase((plumbing.getDatabase()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static Clustrix convertClustrixToPlumbing(com.strongdm.api.Clustrix porcelain) {
    if (porcelain == null) {
      return null;
    }
    Clustrix.Builder builder = Clustrix.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getDatabase() != null) {
      builder.setDatabase((porcelain.getDatabase()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.Clustrix> convertRepeatedClustrixToPorcelain(
      Collection<Clustrix> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertClustrixToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<Clustrix> convertRepeatedClustrixToPlumbing(
      Collection<com.strongdm.api.Clustrix> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertClustrixToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.Cockroach convertCockroachToPorcelain(Cockroach plumbing) {
    com.strongdm.api.Cockroach porcelain = new com.strongdm.api.Cockroach();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setDatabase((plumbing.getDatabase()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setOverrideDatabase((plumbing.getOverrideDatabase()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static Cockroach convertCockroachToPlumbing(com.strongdm.api.Cockroach porcelain) {
    if (porcelain == null) {
      return null;
    }
    Cockroach.Builder builder = Cockroach.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getDatabase() != null) {
      builder.setDatabase((porcelain.getDatabase()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    builder.setOverrideDatabase(porcelain.getOverrideDatabase());
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.Cockroach> convertRepeatedCockroachToPorcelain(
      Collection<Cockroach> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertCockroachToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<Cockroach> convertRepeatedCockroachToPlumbing(
      Collection<com.strongdm.api.Cockroach> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertCockroachToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.ControlPanelGetSSHCAPublicKeyResponse
      convertControlPanelGetSSHCAPublicKeyResponseToPorcelain(
          ControlPanelGetSSHCAPublicKeyResponse plumbing) {
    com.strongdm.api.ControlPanelGetSSHCAPublicKeyResponse porcelain =
        new com.strongdm.api.ControlPanelGetSSHCAPublicKeyResponse();
    porcelain.setMeta(Plumbing.convertGetResponseMetadataToPorcelain(plumbing.getMeta()));
    porcelain.setPublicKey((plumbing.getPublicKey()));
    porcelain.setRateLimit(Plumbing.convertRateLimitMetadataToPorcelain(plumbing.getRateLimit()));
    return porcelain;
  }

  public static ControlPanelGetSSHCAPublicKeyResponse
      convertControlPanelGetSSHCAPublicKeyResponseToPlumbing(
          com.strongdm.api.ControlPanelGetSSHCAPublicKeyResponse porcelain) {
    if (porcelain == null) {
      return null;
    }
    ControlPanelGetSSHCAPublicKeyResponse.Builder builder =
        ControlPanelGetSSHCAPublicKeyResponse.newBuilder();
    if (porcelain.getMeta() != null) {
      builder.setMeta(Plumbing.convertGetResponseMetadataToPlumbing(porcelain.getMeta()));
    }
    if (porcelain.getPublicKey() != null) {
      builder.setPublicKey((porcelain.getPublicKey()));
    }
    if (porcelain.getRateLimit() != null) {
      builder.setRateLimit(Plumbing.convertRateLimitMetadataToPlumbing(porcelain.getRateLimit()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.ControlPanelGetSSHCAPublicKeyResponse>
      convertRepeatedControlPanelGetSSHCAPublicKeyResponseToPorcelain(
          Collection<ControlPanelGetSSHCAPublicKeyResponse> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertControlPanelGetSSHCAPublicKeyResponseToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<ControlPanelGetSSHCAPublicKeyResponse>
      convertRepeatedControlPanelGetSSHCAPublicKeyResponseToPlumbing(
          Collection<com.strongdm.api.ControlPanelGetSSHCAPublicKeyResponse> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertControlPanelGetSSHCAPublicKeyResponseToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.ControlPanelVerifyJWTResponse
      convertControlPanelVerifyJWTResponseToPorcelain(ControlPanelVerifyJWTResponse plumbing) {
    com.strongdm.api.ControlPanelVerifyJWTResponse porcelain =
        new com.strongdm.api.ControlPanelVerifyJWTResponse();
    porcelain.setMeta(Plumbing.convertGetResponseMetadataToPorcelain(plumbing.getMeta()));
    porcelain.setRateLimit(Plumbing.convertRateLimitMetadataToPorcelain(plumbing.getRateLimit()));
    porcelain.setValid((plumbing.getValid()));
    return porcelain;
  }

  public static ControlPanelVerifyJWTResponse convertControlPanelVerifyJWTResponseToPlumbing(
      com.strongdm.api.ControlPanelVerifyJWTResponse porcelain) {
    if (porcelain == null) {
      return null;
    }
    ControlPanelVerifyJWTResponse.Builder builder = ControlPanelVerifyJWTResponse.newBuilder();
    if (porcelain.getMeta() != null) {
      builder.setMeta(Plumbing.convertGetResponseMetadataToPlumbing(porcelain.getMeta()));
    }
    if (porcelain.getRateLimit() != null) {
      builder.setRateLimit(Plumbing.convertRateLimitMetadataToPlumbing(porcelain.getRateLimit()));
    }
    builder.setValid(porcelain.getValid());
    return builder.build();
  }

  public static List<com.strongdm.api.ControlPanelVerifyJWTResponse>
      convertRepeatedControlPanelVerifyJWTResponseToPorcelain(
          Collection<ControlPanelVerifyJWTResponse> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertControlPanelVerifyJWTResponseToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<ControlPanelVerifyJWTResponse>
      convertRepeatedControlPanelVerifyJWTResponseToPlumbing(
          Collection<com.strongdm.api.ControlPanelVerifyJWTResponse> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertControlPanelVerifyJWTResponseToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.CreateResponseMetadata convertCreateResponseMetadataToPorcelain(
      CreateResponseMetadata plumbing) {
    com.strongdm.api.CreateResponseMetadata porcelain =
        new com.strongdm.api.CreateResponseMetadata();
    return porcelain;
  }

  public static CreateResponseMetadata convertCreateResponseMetadataToPlumbing(
      com.strongdm.api.CreateResponseMetadata porcelain) {
    if (porcelain == null) {
      return null;
    }
    CreateResponseMetadata.Builder builder = CreateResponseMetadata.newBuilder();
    return builder.build();
  }

  public static List<com.strongdm.api.CreateResponseMetadata>
      convertRepeatedCreateResponseMetadataToPorcelain(
          Collection<CreateResponseMetadata> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertCreateResponseMetadataToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<CreateResponseMetadata> convertRepeatedCreateResponseMetadataToPlumbing(
      Collection<com.strongdm.api.CreateResponseMetadata> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertCreateResponseMetadataToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.CyberarkConjurStore convertCyberarkConjurStoreToPorcelain(
      CyberarkConjurStore plumbing) {
    com.strongdm.api.CyberarkConjurStore porcelain = new com.strongdm.api.CyberarkConjurStore();
    porcelain.setAppURL((plumbing.getAppURL()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    return porcelain;
  }

  public static CyberarkConjurStore convertCyberarkConjurStoreToPlumbing(
      com.strongdm.api.CyberarkConjurStore porcelain) {
    if (porcelain == null) {
      return null;
    }
    CyberarkConjurStore.Builder builder = CyberarkConjurStore.newBuilder();
    if (porcelain.getAppURL() != null) {
      builder.setAppURL((porcelain.getAppURL()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.CyberarkConjurStore>
      convertRepeatedCyberarkConjurStoreToPorcelain(Collection<CyberarkConjurStore> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertCyberarkConjurStoreToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<CyberarkConjurStore> convertRepeatedCyberarkConjurStoreToPlumbing(
      Collection<com.strongdm.api.CyberarkConjurStore> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertCyberarkConjurStoreToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.CyberarkPAMExperimentalStore
      convertCyberarkPAMExperimentalStoreToPorcelain(CyberarkPAMExperimentalStore plumbing) {
    com.strongdm.api.CyberarkPAMExperimentalStore porcelain =
        new com.strongdm.api.CyberarkPAMExperimentalStore();
    porcelain.setAppURL((plumbing.getAppURL()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    return porcelain;
  }

  public static CyberarkPAMExperimentalStore convertCyberarkPAMExperimentalStoreToPlumbing(
      com.strongdm.api.CyberarkPAMExperimentalStore porcelain) {
    if (porcelain == null) {
      return null;
    }
    CyberarkPAMExperimentalStore.Builder builder = CyberarkPAMExperimentalStore.newBuilder();
    if (porcelain.getAppURL() != null) {
      builder.setAppURL((porcelain.getAppURL()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.CyberarkPAMExperimentalStore>
      convertRepeatedCyberarkPAMExperimentalStoreToPorcelain(
          Collection<CyberarkPAMExperimentalStore> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertCyberarkPAMExperimentalStoreToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<CyberarkPAMExperimentalStore>
      convertRepeatedCyberarkPAMExperimentalStoreToPlumbing(
          Collection<com.strongdm.api.CyberarkPAMExperimentalStore> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertCyberarkPAMExperimentalStoreToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.CyberarkPAMStore convertCyberarkPAMStoreToPorcelain(
      CyberarkPAMStore plumbing) {
    com.strongdm.api.CyberarkPAMStore porcelain = new com.strongdm.api.CyberarkPAMStore();
    porcelain.setAppURL((plumbing.getAppURL()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    return porcelain;
  }

  public static CyberarkPAMStore convertCyberarkPAMStoreToPlumbing(
      com.strongdm.api.CyberarkPAMStore porcelain) {
    if (porcelain == null) {
      return null;
    }
    CyberarkPAMStore.Builder builder = CyberarkPAMStore.newBuilder();
    if (porcelain.getAppURL() != null) {
      builder.setAppURL((porcelain.getAppURL()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.CyberarkPAMStore> convertRepeatedCyberarkPAMStoreToPorcelain(
      Collection<CyberarkPAMStore> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertCyberarkPAMStoreToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<CyberarkPAMStore> convertRepeatedCyberarkPAMStoreToPlumbing(
      Collection<com.strongdm.api.CyberarkPAMStore> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertCyberarkPAMStoreToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.DB2I convertDB2IToPorcelain(DB2I plumbing) {
    com.strongdm.api.DB2I porcelain = new com.strongdm.api.DB2I();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setTlsRequired((plumbing.getTlsRequired()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static DB2I convertDB2IToPlumbing(com.strongdm.api.DB2I porcelain) {
    if (porcelain == null) {
      return null;
    }
    DB2I.Builder builder = DB2I.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    builder.setTlsRequired(porcelain.getTlsRequired());
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.DB2I> convertRepeatedDB2IToPorcelain(
      Collection<DB2I> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertDB2IToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<DB2I> convertRepeatedDB2IToPlumbing(
      Collection<com.strongdm.api.DB2I> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertDB2IToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.DB2LUW convertDB2LUWToPorcelain(DB2LUW plumbing) {
    com.strongdm.api.DB2LUW porcelain = new com.strongdm.api.DB2LUW();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setDatabase((plumbing.getDatabase()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static DB2LUW convertDB2LUWToPlumbing(com.strongdm.api.DB2LUW porcelain) {
    if (porcelain == null) {
      return null;
    }
    DB2LUW.Builder builder = DB2LUW.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getDatabase() != null) {
      builder.setDatabase((porcelain.getDatabase()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.DB2LUW> convertRepeatedDB2LUWToPorcelain(
      Collection<DB2LUW> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertDB2LUWToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<DB2LUW> convertRepeatedDB2LUWToPlumbing(
      Collection<com.strongdm.api.DB2LUW> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertDB2LUWToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.DeleteResponseMetadata convertDeleteResponseMetadataToPorcelain(
      DeleteResponseMetadata plumbing) {
    com.strongdm.api.DeleteResponseMetadata porcelain =
        new com.strongdm.api.DeleteResponseMetadata();
    return porcelain;
  }

  public static DeleteResponseMetadata convertDeleteResponseMetadataToPlumbing(
      com.strongdm.api.DeleteResponseMetadata porcelain) {
    if (porcelain == null) {
      return null;
    }
    DeleteResponseMetadata.Builder builder = DeleteResponseMetadata.newBuilder();
    return builder.build();
  }

  public static List<com.strongdm.api.DeleteResponseMetadata>
      convertRepeatedDeleteResponseMetadataToPorcelain(
          Collection<DeleteResponseMetadata> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertDeleteResponseMetadataToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<DeleteResponseMetadata> convertRepeatedDeleteResponseMetadataToPlumbing(
      Collection<com.strongdm.api.DeleteResponseMetadata> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertDeleteResponseMetadataToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.DelineaStore convertDelineaStoreToPorcelain(
      DelineaStore plumbing) {
    com.strongdm.api.DelineaStore porcelain = new com.strongdm.api.DelineaStore();
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setServerUrl((plumbing.getServerUrl()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setTenantName((plumbing.getTenantName()));
    return porcelain;
  }

  public static DelineaStore convertDelineaStoreToPlumbing(
      com.strongdm.api.DelineaStore porcelain) {
    if (porcelain == null) {
      return null;
    }
    DelineaStore.Builder builder = DelineaStore.newBuilder();
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getServerUrl() != null) {
      builder.setServerUrl((porcelain.getServerUrl()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getTenantName() != null) {
      builder.setTenantName((porcelain.getTenantName()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.DelineaStore> convertRepeatedDelineaStoreToPorcelain(
      Collection<DelineaStore> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertDelineaStoreToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<DelineaStore> convertRepeatedDelineaStoreToPlumbing(
      Collection<com.strongdm.api.DelineaStore> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertDelineaStoreToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.DocumentDBHost convertDocumentDBHostToPorcelain(
      DocumentDBHost plumbing) {
    com.strongdm.api.DocumentDBHost porcelain = new com.strongdm.api.DocumentDBHost();
    porcelain.setAuthDatabase((plumbing.getAuthDatabase()));
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static DocumentDBHost convertDocumentDBHostToPlumbing(
      com.strongdm.api.DocumentDBHost porcelain) {
    if (porcelain == null) {
      return null;
    }
    DocumentDBHost.Builder builder = DocumentDBHost.newBuilder();
    if (porcelain.getAuthDatabase() != null) {
      builder.setAuthDatabase((porcelain.getAuthDatabase()));
    }
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.DocumentDBHost> convertRepeatedDocumentDBHostToPorcelain(
      Collection<DocumentDBHost> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertDocumentDBHostToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<DocumentDBHost> convertRepeatedDocumentDBHostToPlumbing(
      Collection<com.strongdm.api.DocumentDBHost> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertDocumentDBHostToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.DocumentDBReplicaSet convertDocumentDBReplicaSetToPorcelain(
      DocumentDBReplicaSet plumbing) {
    com.strongdm.api.DocumentDBReplicaSet porcelain = new com.strongdm.api.DocumentDBReplicaSet();
    porcelain.setAuthDatabase((plumbing.getAuthDatabase()));
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setConnectToReplica((plumbing.getConnectToReplica()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setReplicaSet((plumbing.getReplicaSet()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static DocumentDBReplicaSet convertDocumentDBReplicaSetToPlumbing(
      com.strongdm.api.DocumentDBReplicaSet porcelain) {
    if (porcelain == null) {
      return null;
    }
    DocumentDBReplicaSet.Builder builder = DocumentDBReplicaSet.newBuilder();
    if (porcelain.getAuthDatabase() != null) {
      builder.setAuthDatabase((porcelain.getAuthDatabase()));
    }
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    builder.setConnectToReplica(porcelain.getConnectToReplica());
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getReplicaSet() != null) {
      builder.setReplicaSet((porcelain.getReplicaSet()));
    }
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.DocumentDBReplicaSet>
      convertRepeatedDocumentDBReplicaSetToPorcelain(Collection<DocumentDBReplicaSet> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertDocumentDBReplicaSetToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<DocumentDBReplicaSet> convertRepeatedDocumentDBReplicaSetToPlumbing(
      Collection<com.strongdm.api.DocumentDBReplicaSet> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertDocumentDBReplicaSetToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.Druid convertDruidToPorcelain(Druid plumbing) {
    com.strongdm.api.Druid porcelain = new com.strongdm.api.Druid();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static Druid convertDruidToPlumbing(com.strongdm.api.Druid porcelain) {
    if (porcelain == null) {
      return null;
    }
    Druid.Builder builder = Druid.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.Druid> convertRepeatedDruidToPorcelain(
      Collection<Druid> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertDruidToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<Druid> convertRepeatedDruidToPlumbing(
      Collection<com.strongdm.api.Druid> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertDruidToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.DynamoDB convertDynamoDBToPorcelain(DynamoDB plumbing) {
    com.strongdm.api.DynamoDB porcelain = new com.strongdm.api.DynamoDB();
    porcelain.setAccessKey((plumbing.getAccessKey()));
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setEndpoint((plumbing.getEndpoint()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setRegion((plumbing.getRegion()));
    porcelain.setRoleArn((plumbing.getRoleArn()));
    porcelain.setRoleExternalId((plumbing.getRoleExternalId()));
    porcelain.setSecretAccessKey((plumbing.getSecretAccessKey()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    return porcelain;
  }

  public static DynamoDB convertDynamoDBToPlumbing(com.strongdm.api.DynamoDB porcelain) {
    if (porcelain == null) {
      return null;
    }
    DynamoDB.Builder builder = DynamoDB.newBuilder();
    if (porcelain.getAccessKey() != null) {
      builder.setAccessKey((porcelain.getAccessKey()));
    }
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    if (porcelain.getEndpoint() != null) {
      builder.setEndpoint((porcelain.getEndpoint()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getRegion() != null) {
      builder.setRegion((porcelain.getRegion()));
    }
    if (porcelain.getRoleArn() != null) {
      builder.setRoleArn((porcelain.getRoleArn()));
    }
    if (porcelain.getRoleExternalId() != null) {
      builder.setRoleExternalId((porcelain.getRoleExternalId()));
    }
    if (porcelain.getSecretAccessKey() != null) {
      builder.setSecretAccessKey((porcelain.getSecretAccessKey()));
    }
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.DynamoDB> convertRepeatedDynamoDBToPorcelain(
      Collection<DynamoDB> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertDynamoDBToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<DynamoDB> convertRepeatedDynamoDBToPlumbing(
      Collection<com.strongdm.api.DynamoDB> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertDynamoDBToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.Elastic convertElasticToPorcelain(Elastic plumbing) {
    com.strongdm.api.Elastic porcelain = new com.strongdm.api.Elastic();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setTlsRequired((plumbing.getTlsRequired()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static Elastic convertElasticToPlumbing(com.strongdm.api.Elastic porcelain) {
    if (porcelain == null) {
      return null;
    }
    Elastic.Builder builder = Elastic.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    builder.setTlsRequired(porcelain.getTlsRequired());
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.Elastic> convertRepeatedElasticToPorcelain(
      Collection<Elastic> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertElasticToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<Elastic> convertRepeatedElasticToPlumbing(
      Collection<com.strongdm.api.Elastic> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertElasticToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.ElasticacheRedis convertElasticacheRedisToPorcelain(
      ElasticacheRedis plumbing) {
    com.strongdm.api.ElasticacheRedis porcelain = new com.strongdm.api.ElasticacheRedis();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setTlsRequired((plumbing.getTlsRequired()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static ElasticacheRedis convertElasticacheRedisToPlumbing(
      com.strongdm.api.ElasticacheRedis porcelain) {
    if (porcelain == null) {
      return null;
    }
    ElasticacheRedis.Builder builder = ElasticacheRedis.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    builder.setTlsRequired(porcelain.getTlsRequired());
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.ElasticacheRedis> convertRepeatedElasticacheRedisToPorcelain(
      Collection<ElasticacheRedis> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertElasticacheRedisToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<ElasticacheRedis> convertRepeatedElasticacheRedisToPlumbing(
      Collection<com.strongdm.api.ElasticacheRedis> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertElasticacheRedisToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.GCP convertGCPToPorcelain(GCP plumbing) {
    com.strongdm.api.GCP porcelain = new com.strongdm.api.GCP();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setId((plumbing.getId()));
    porcelain.setKeyfile((plumbing.getKeyfile()));
    porcelain.setName((plumbing.getName()));
    porcelain.setScopes((plumbing.getScopes()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    return porcelain;
  }

  public static GCP convertGCPToPlumbing(com.strongdm.api.GCP porcelain) {
    if (porcelain == null) {
      return null;
    }
    GCP.Builder builder = GCP.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getKeyfile() != null) {
      builder.setKeyfile((porcelain.getKeyfile()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getScopes() != null) {
      builder.setScopes((porcelain.getScopes()));
    }
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.GCP> convertRepeatedGCPToPorcelain(
      Collection<GCP> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertGCPToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<GCP> convertRepeatedGCPToPlumbing(
      Collection<com.strongdm.api.GCP> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertGCPToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.GCPStore convertGCPStoreToPorcelain(GCPStore plumbing) {
    com.strongdm.api.GCPStore porcelain = new com.strongdm.api.GCPStore();
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setProjectID((plumbing.getProjectID()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    return porcelain;
  }

  public static GCPStore convertGCPStoreToPlumbing(com.strongdm.api.GCPStore porcelain) {
    if (porcelain == null) {
      return null;
    }
    GCPStore.Builder builder = GCPStore.newBuilder();
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getProjectID() != null) {
      builder.setProjectID((porcelain.getProjectID()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.GCPStore> convertRepeatedGCPStoreToPorcelain(
      Collection<GCPStore> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertGCPStoreToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<GCPStore> convertRepeatedGCPStoreToPlumbing(
      Collection<com.strongdm.api.GCPStore> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertGCPStoreToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.Gateway convertGatewayToPorcelain(Gateway plumbing) {
    com.strongdm.api.Gateway porcelain = new com.strongdm.api.Gateway();
    porcelain.setBindAddress((plumbing.getBindAddress()));
    porcelain.setDevice((plumbing.getDevice()));
    porcelain.setGatewayFilter((plumbing.getGatewayFilter()));
    porcelain.setId((plumbing.getId()));
    porcelain.setListenAddress((plumbing.getListenAddress()));
    porcelain.setLocation((plumbing.getLocation()));
    porcelain.setName((plumbing.getName()));
    porcelain.setState((plumbing.getState()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setVersion((plumbing.getVersion()));
    return porcelain;
  }

  public static Gateway convertGatewayToPlumbing(com.strongdm.api.Gateway porcelain) {
    if (porcelain == null) {
      return null;
    }
    Gateway.Builder builder = Gateway.newBuilder();
    if (porcelain.getBindAddress() != null) {
      builder.setBindAddress((porcelain.getBindAddress()));
    }
    if (porcelain.getDevice() != null) {
      builder.setDevice((porcelain.getDevice()));
    }
    if (porcelain.getGatewayFilter() != null) {
      builder.setGatewayFilter((porcelain.getGatewayFilter()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getListenAddress() != null) {
      builder.setListenAddress((porcelain.getListenAddress()));
    }
    if (porcelain.getLocation() != null) {
      builder.setLocation((porcelain.getLocation()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getState() != null) {
      builder.setState((porcelain.getState()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getVersion() != null) {
      builder.setVersion((porcelain.getVersion()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.Gateway> convertRepeatedGatewayToPorcelain(
      Collection<Gateway> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertGatewayToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<Gateway> convertRepeatedGatewayToPlumbing(
      Collection<com.strongdm.api.Gateway> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertGatewayToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.GetResponseMetadata convertGetResponseMetadataToPorcelain(
      GetResponseMetadata plumbing) {
    com.strongdm.api.GetResponseMetadata porcelain = new com.strongdm.api.GetResponseMetadata();
    return porcelain;
  }

  public static GetResponseMetadata convertGetResponseMetadataToPlumbing(
      com.strongdm.api.GetResponseMetadata porcelain) {
    if (porcelain == null) {
      return null;
    }
    GetResponseMetadata.Builder builder = GetResponseMetadata.newBuilder();
    return builder.build();
  }

  public static List<com.strongdm.api.GetResponseMetadata>
      convertRepeatedGetResponseMetadataToPorcelain(Collection<GetResponseMetadata> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertGetResponseMetadataToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<GetResponseMetadata> convertRepeatedGetResponseMetadataToPlumbing(
      Collection<com.strongdm.api.GetResponseMetadata> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertGetResponseMetadataToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.GoogleGKE convertGoogleGKEToPorcelain(GoogleGKE plumbing) {
    com.strongdm.api.GoogleGKE porcelain = new com.strongdm.api.GoogleGKE();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setCertificateAuthority((plumbing.getCertificateAuthority()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setEndpoint((plumbing.getEndpoint()));
    porcelain.setHealthcheckNamespace((plumbing.getHealthcheckNamespace()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setRemoteIdentityGroupId((plumbing.getRemoteIdentityGroupId()));
    porcelain.setRemoteIdentityHealthcheckUsername(
        (plumbing.getRemoteIdentityHealthcheckUsername()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setServiceAccountKey((plumbing.getServiceAccountKey()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    return porcelain;
  }

  public static GoogleGKE convertGoogleGKEToPlumbing(com.strongdm.api.GoogleGKE porcelain) {
    if (porcelain == null) {
      return null;
    }
    GoogleGKE.Builder builder = GoogleGKE.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getCertificateAuthority() != null) {
      builder.setCertificateAuthority((porcelain.getCertificateAuthority()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    if (porcelain.getEndpoint() != null) {
      builder.setEndpoint((porcelain.getEndpoint()));
    }
    if (porcelain.getHealthcheckNamespace() != null) {
      builder.setHealthcheckNamespace((porcelain.getHealthcheckNamespace()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getRemoteIdentityGroupId() != null) {
      builder.setRemoteIdentityGroupId((porcelain.getRemoteIdentityGroupId()));
    }
    if (porcelain.getRemoteIdentityHealthcheckUsername() != null) {
      builder.setRemoteIdentityHealthcheckUsername(
          (porcelain.getRemoteIdentityHealthcheckUsername()));
    }
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getServiceAccountKey() != null) {
      builder.setServiceAccountKey((porcelain.getServiceAccountKey()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.GoogleGKE> convertRepeatedGoogleGKEToPorcelain(
      Collection<GoogleGKE> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertGoogleGKEToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<GoogleGKE> convertRepeatedGoogleGKEToPlumbing(
      Collection<com.strongdm.api.GoogleGKE> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertGoogleGKEToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.GoogleGKEUserImpersonation
      convertGoogleGKEUserImpersonationToPorcelain(GoogleGKEUserImpersonation plumbing) {
    com.strongdm.api.GoogleGKEUserImpersonation porcelain =
        new com.strongdm.api.GoogleGKEUserImpersonation();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setCertificateAuthority((plumbing.getCertificateAuthority()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setEndpoint((plumbing.getEndpoint()));
    porcelain.setHealthcheckNamespace((plumbing.getHealthcheckNamespace()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setServiceAccountKey((plumbing.getServiceAccountKey()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    return porcelain;
  }

  public static GoogleGKEUserImpersonation convertGoogleGKEUserImpersonationToPlumbing(
      com.strongdm.api.GoogleGKEUserImpersonation porcelain) {
    if (porcelain == null) {
      return null;
    }
    GoogleGKEUserImpersonation.Builder builder = GoogleGKEUserImpersonation.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getCertificateAuthority() != null) {
      builder.setCertificateAuthority((porcelain.getCertificateAuthority()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    if (porcelain.getEndpoint() != null) {
      builder.setEndpoint((porcelain.getEndpoint()));
    }
    if (porcelain.getHealthcheckNamespace() != null) {
      builder.setHealthcheckNamespace((porcelain.getHealthcheckNamespace()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getServiceAccountKey() != null) {
      builder.setServiceAccountKey((porcelain.getServiceAccountKey()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.GoogleGKEUserImpersonation>
      convertRepeatedGoogleGKEUserImpersonationToPorcelain(
          Collection<GoogleGKEUserImpersonation> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertGoogleGKEUserImpersonationToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<GoogleGKEUserImpersonation>
      convertRepeatedGoogleGKEUserImpersonationToPlumbing(
          Collection<com.strongdm.api.GoogleGKEUserImpersonation> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertGoogleGKEUserImpersonationToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.Greenplum convertGreenplumToPorcelain(Greenplum plumbing) {
    com.strongdm.api.Greenplum porcelain = new com.strongdm.api.Greenplum();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setDatabase((plumbing.getDatabase()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setOverrideDatabase((plumbing.getOverrideDatabase()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static Greenplum convertGreenplumToPlumbing(com.strongdm.api.Greenplum porcelain) {
    if (porcelain == null) {
      return null;
    }
    Greenplum.Builder builder = Greenplum.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getDatabase() != null) {
      builder.setDatabase((porcelain.getDatabase()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    builder.setOverrideDatabase(porcelain.getOverrideDatabase());
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.Greenplum> convertRepeatedGreenplumToPorcelain(
      Collection<Greenplum> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertGreenplumToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<Greenplum> convertRepeatedGreenplumToPlumbing(
      Collection<com.strongdm.api.Greenplum> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertGreenplumToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.HTTPAuth convertHTTPAuthToPorcelain(HTTPAuth plumbing) {
    com.strongdm.api.HTTPAuth porcelain = new com.strongdm.api.HTTPAuth();
    porcelain.setAuthHeader((plumbing.getAuthHeader()));
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setDefaultPath((plumbing.getDefaultPath()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHeadersBlacklist((plumbing.getHeadersBlacklist()));
    porcelain.setHealthcheckPath((plumbing.getHealthcheckPath()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostOverride((plumbing.getHostOverride()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setUrl((plumbing.getUrl()));
    return porcelain;
  }

  public static HTTPAuth convertHTTPAuthToPlumbing(com.strongdm.api.HTTPAuth porcelain) {
    if (porcelain == null) {
      return null;
    }
    HTTPAuth.Builder builder = HTTPAuth.newBuilder();
    if (porcelain.getAuthHeader() != null) {
      builder.setAuthHeader((porcelain.getAuthHeader()));
    }
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getDefaultPath() != null) {
      builder.setDefaultPath((porcelain.getDefaultPath()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    if (porcelain.getHeadersBlacklist() != null) {
      builder.setHeadersBlacklist((porcelain.getHeadersBlacklist()));
    }
    if (porcelain.getHealthcheckPath() != null) {
      builder.setHealthcheckPath((porcelain.getHealthcheckPath()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostOverride() != null) {
      builder.setHostOverride((porcelain.getHostOverride()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getUrl() != null) {
      builder.setUrl((porcelain.getUrl()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.HTTPAuth> convertRepeatedHTTPAuthToPorcelain(
      Collection<HTTPAuth> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertHTTPAuthToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<HTTPAuth> convertRepeatedHTTPAuthToPlumbing(
      Collection<com.strongdm.api.HTTPAuth> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertHTTPAuthToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.HTTPBasicAuth convertHTTPBasicAuthToPorcelain(
      HTTPBasicAuth plumbing) {
    com.strongdm.api.HTTPBasicAuth porcelain = new com.strongdm.api.HTTPBasicAuth();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setDefaultPath((plumbing.getDefaultPath()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHeadersBlacklist((plumbing.getHeadersBlacklist()));
    porcelain.setHealthcheckPath((plumbing.getHealthcheckPath()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostOverride((plumbing.getHostOverride()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setUrl((plumbing.getUrl()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static HTTPBasicAuth convertHTTPBasicAuthToPlumbing(
      com.strongdm.api.HTTPBasicAuth porcelain) {
    if (porcelain == null) {
      return null;
    }
    HTTPBasicAuth.Builder builder = HTTPBasicAuth.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getDefaultPath() != null) {
      builder.setDefaultPath((porcelain.getDefaultPath()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    if (porcelain.getHeadersBlacklist() != null) {
      builder.setHeadersBlacklist((porcelain.getHeadersBlacklist()));
    }
    if (porcelain.getHealthcheckPath() != null) {
      builder.setHealthcheckPath((porcelain.getHealthcheckPath()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostOverride() != null) {
      builder.setHostOverride((porcelain.getHostOverride()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getUrl() != null) {
      builder.setUrl((porcelain.getUrl()));
    }
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.HTTPBasicAuth> convertRepeatedHTTPBasicAuthToPorcelain(
      Collection<HTTPBasicAuth> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertHTTPBasicAuthToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<HTTPBasicAuth> convertRepeatedHTTPBasicAuthToPlumbing(
      Collection<com.strongdm.api.HTTPBasicAuth> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertHTTPBasicAuthToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.HTTPNoAuth convertHTTPNoAuthToPorcelain(HTTPNoAuth plumbing) {
    com.strongdm.api.HTTPNoAuth porcelain = new com.strongdm.api.HTTPNoAuth();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setDefaultPath((plumbing.getDefaultPath()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHeadersBlacklist((plumbing.getHeadersBlacklist()));
    porcelain.setHealthcheckPath((plumbing.getHealthcheckPath()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostOverride((plumbing.getHostOverride()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setUrl((plumbing.getUrl()));
    return porcelain;
  }

  public static HTTPNoAuth convertHTTPNoAuthToPlumbing(com.strongdm.api.HTTPNoAuth porcelain) {
    if (porcelain == null) {
      return null;
    }
    HTTPNoAuth.Builder builder = HTTPNoAuth.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getDefaultPath() != null) {
      builder.setDefaultPath((porcelain.getDefaultPath()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    if (porcelain.getHeadersBlacklist() != null) {
      builder.setHeadersBlacklist((porcelain.getHeadersBlacklist()));
    }
    if (porcelain.getHealthcheckPath() != null) {
      builder.setHealthcheckPath((porcelain.getHealthcheckPath()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostOverride() != null) {
      builder.setHostOverride((porcelain.getHostOverride()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getUrl() != null) {
      builder.setUrl((porcelain.getUrl()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.HTTPNoAuth> convertRepeatedHTTPNoAuthToPorcelain(
      Collection<HTTPNoAuth> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertHTTPNoAuthToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<HTTPNoAuth> convertRepeatedHTTPNoAuthToPlumbing(
      Collection<com.strongdm.api.HTTPNoAuth> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertHTTPNoAuthToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.Kubernetes convertKubernetesToPorcelain(Kubernetes plumbing) {
    com.strongdm.api.Kubernetes porcelain = new com.strongdm.api.Kubernetes();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setCertificateAuthority((plumbing.getCertificateAuthority()));
    porcelain.setClientCertificate((plumbing.getClientCertificate()));
    porcelain.setClientKey((plumbing.getClientKey()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthcheckNamespace((plumbing.getHealthcheckNamespace()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setRemoteIdentityGroupId((plumbing.getRemoteIdentityGroupId()));
    porcelain.setRemoteIdentityHealthcheckUsername(
        (plumbing.getRemoteIdentityHealthcheckUsername()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    return porcelain;
  }

  public static Kubernetes convertKubernetesToPlumbing(com.strongdm.api.Kubernetes porcelain) {
    if (porcelain == null) {
      return null;
    }
    Kubernetes.Builder builder = Kubernetes.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getCertificateAuthority() != null) {
      builder.setCertificateAuthority((porcelain.getCertificateAuthority()));
    }
    if (porcelain.getClientCertificate() != null) {
      builder.setClientCertificate((porcelain.getClientCertificate()));
    }
    if (porcelain.getClientKey() != null) {
      builder.setClientKey((porcelain.getClientKey()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    if (porcelain.getHealthcheckNamespace() != null) {
      builder.setHealthcheckNamespace((porcelain.getHealthcheckNamespace()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getRemoteIdentityGroupId() != null) {
      builder.setRemoteIdentityGroupId((porcelain.getRemoteIdentityGroupId()));
    }
    if (porcelain.getRemoteIdentityHealthcheckUsername() != null) {
      builder.setRemoteIdentityHealthcheckUsername(
          (porcelain.getRemoteIdentityHealthcheckUsername()));
    }
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.Kubernetes> convertRepeatedKubernetesToPorcelain(
      Collection<Kubernetes> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertKubernetesToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<Kubernetes> convertRepeatedKubernetesToPlumbing(
      Collection<com.strongdm.api.Kubernetes> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertKubernetesToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.KubernetesBasicAuth convertKubernetesBasicAuthToPorcelain(
      KubernetesBasicAuth plumbing) {
    com.strongdm.api.KubernetesBasicAuth porcelain = new com.strongdm.api.KubernetesBasicAuth();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthcheckNamespace((plumbing.getHealthcheckNamespace()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static KubernetesBasicAuth convertKubernetesBasicAuthToPlumbing(
      com.strongdm.api.KubernetesBasicAuth porcelain) {
    if (porcelain == null) {
      return null;
    }
    KubernetesBasicAuth.Builder builder = KubernetesBasicAuth.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    if (porcelain.getHealthcheckNamespace() != null) {
      builder.setHealthcheckNamespace((porcelain.getHealthcheckNamespace()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.KubernetesBasicAuth>
      convertRepeatedKubernetesBasicAuthToPorcelain(Collection<KubernetesBasicAuth> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertKubernetesBasicAuthToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<KubernetesBasicAuth> convertRepeatedKubernetesBasicAuthToPlumbing(
      Collection<com.strongdm.api.KubernetesBasicAuth> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertKubernetesBasicAuthToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.KubernetesServiceAccount
      convertKubernetesServiceAccountToPorcelain(KubernetesServiceAccount plumbing) {
    com.strongdm.api.KubernetesServiceAccount porcelain =
        new com.strongdm.api.KubernetesServiceAccount();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthcheckNamespace((plumbing.getHealthcheckNamespace()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setRemoteIdentityGroupId((plumbing.getRemoteIdentityGroupId()));
    porcelain.setRemoteIdentityHealthcheckUsername(
        (plumbing.getRemoteIdentityHealthcheckUsername()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setToken((plumbing.getToken()));
    return porcelain;
  }

  public static KubernetesServiceAccount convertKubernetesServiceAccountToPlumbing(
      com.strongdm.api.KubernetesServiceAccount porcelain) {
    if (porcelain == null) {
      return null;
    }
    KubernetesServiceAccount.Builder builder = KubernetesServiceAccount.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    if (porcelain.getHealthcheckNamespace() != null) {
      builder.setHealthcheckNamespace((porcelain.getHealthcheckNamespace()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getRemoteIdentityGroupId() != null) {
      builder.setRemoteIdentityGroupId((porcelain.getRemoteIdentityGroupId()));
    }
    if (porcelain.getRemoteIdentityHealthcheckUsername() != null) {
      builder.setRemoteIdentityHealthcheckUsername(
          (porcelain.getRemoteIdentityHealthcheckUsername()));
    }
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getToken() != null) {
      builder.setToken((porcelain.getToken()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.KubernetesServiceAccount>
      convertRepeatedKubernetesServiceAccountToPorcelain(
          Collection<KubernetesServiceAccount> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertKubernetesServiceAccountToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<KubernetesServiceAccount> convertRepeatedKubernetesServiceAccountToPlumbing(
      Collection<com.strongdm.api.KubernetesServiceAccount> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertKubernetesServiceAccountToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.KubernetesServiceAccountUserImpersonation
      convertKubernetesServiceAccountUserImpersonationToPorcelain(
          KubernetesServiceAccountUserImpersonation plumbing) {
    com.strongdm.api.KubernetesServiceAccountUserImpersonation porcelain =
        new com.strongdm.api.KubernetesServiceAccountUserImpersonation();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthcheckNamespace((plumbing.getHealthcheckNamespace()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setToken((plumbing.getToken()));
    return porcelain;
  }

  public static KubernetesServiceAccountUserImpersonation
      convertKubernetesServiceAccountUserImpersonationToPlumbing(
          com.strongdm.api.KubernetesServiceAccountUserImpersonation porcelain) {
    if (porcelain == null) {
      return null;
    }
    KubernetesServiceAccountUserImpersonation.Builder builder =
        KubernetesServiceAccountUserImpersonation.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    if (porcelain.getHealthcheckNamespace() != null) {
      builder.setHealthcheckNamespace((porcelain.getHealthcheckNamespace()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getToken() != null) {
      builder.setToken((porcelain.getToken()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.KubernetesServiceAccountUserImpersonation>
      convertRepeatedKubernetesServiceAccountUserImpersonationToPorcelain(
          Collection<KubernetesServiceAccountUserImpersonation> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertKubernetesServiceAccountUserImpersonationToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<KubernetesServiceAccountUserImpersonation>
      convertRepeatedKubernetesServiceAccountUserImpersonationToPlumbing(
          Collection<com.strongdm.api.KubernetesServiceAccountUserImpersonation> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertKubernetesServiceAccountUserImpersonationToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.KubernetesUserImpersonation
      convertKubernetesUserImpersonationToPorcelain(KubernetesUserImpersonation plumbing) {
    com.strongdm.api.KubernetesUserImpersonation porcelain =
        new com.strongdm.api.KubernetesUserImpersonation();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setCertificateAuthority((plumbing.getCertificateAuthority()));
    porcelain.setClientCertificate((plumbing.getClientCertificate()));
    porcelain.setClientKey((plumbing.getClientKey()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthcheckNamespace((plumbing.getHealthcheckNamespace()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    return porcelain;
  }

  public static KubernetesUserImpersonation convertKubernetesUserImpersonationToPlumbing(
      com.strongdm.api.KubernetesUserImpersonation porcelain) {
    if (porcelain == null) {
      return null;
    }
    KubernetesUserImpersonation.Builder builder = KubernetesUserImpersonation.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getCertificateAuthority() != null) {
      builder.setCertificateAuthority((porcelain.getCertificateAuthority()));
    }
    if (porcelain.getClientCertificate() != null) {
      builder.setClientCertificate((porcelain.getClientCertificate()));
    }
    if (porcelain.getClientKey() != null) {
      builder.setClientKey((porcelain.getClientKey()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    if (porcelain.getHealthcheckNamespace() != null) {
      builder.setHealthcheckNamespace((porcelain.getHealthcheckNamespace()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.KubernetesUserImpersonation>
      convertRepeatedKubernetesUserImpersonationToPorcelain(
          Collection<KubernetesUserImpersonation> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertKubernetesUserImpersonationToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<KubernetesUserImpersonation>
      convertRepeatedKubernetesUserImpersonationToPlumbing(
          Collection<com.strongdm.api.KubernetesUserImpersonation> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertKubernetesUserImpersonationToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.MTLSMysql convertMTLSMysqlToPorcelain(MTLSMysql plumbing) {
    com.strongdm.api.MTLSMysql porcelain = new com.strongdm.api.MTLSMysql();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setCertificateAuthority((plumbing.getCertificateAuthority()));
    porcelain.setClientCertificate((plumbing.getClientCertificate()));
    porcelain.setClientKey((plumbing.getClientKey()));
    porcelain.setDatabase((plumbing.getDatabase()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setServerName((plumbing.getServerName()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static MTLSMysql convertMTLSMysqlToPlumbing(com.strongdm.api.MTLSMysql porcelain) {
    if (porcelain == null) {
      return null;
    }
    MTLSMysql.Builder builder = MTLSMysql.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getCertificateAuthority() != null) {
      builder.setCertificateAuthority((porcelain.getCertificateAuthority()));
    }
    if (porcelain.getClientCertificate() != null) {
      builder.setClientCertificate((porcelain.getClientCertificate()));
    }
    if (porcelain.getClientKey() != null) {
      builder.setClientKey((porcelain.getClientKey()));
    }
    if (porcelain.getDatabase() != null) {
      builder.setDatabase((porcelain.getDatabase()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getServerName() != null) {
      builder.setServerName((porcelain.getServerName()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.MTLSMysql> convertRepeatedMTLSMysqlToPorcelain(
      Collection<MTLSMysql> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertMTLSMysqlToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<MTLSMysql> convertRepeatedMTLSMysqlToPlumbing(
      Collection<com.strongdm.api.MTLSMysql> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertMTLSMysqlToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.MTLSPostgres convertMTLSPostgresToPorcelain(
      MTLSPostgres plumbing) {
    com.strongdm.api.MTLSPostgres porcelain = new com.strongdm.api.MTLSPostgres();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setCertificateAuthority((plumbing.getCertificateAuthority()));
    porcelain.setClientCertificate((plumbing.getClientCertificate()));
    porcelain.setClientKey((plumbing.getClientKey()));
    porcelain.setDatabase((plumbing.getDatabase()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setOverrideDatabase((plumbing.getOverrideDatabase()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setServerName((plumbing.getServerName()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static MTLSPostgres convertMTLSPostgresToPlumbing(
      com.strongdm.api.MTLSPostgres porcelain) {
    if (porcelain == null) {
      return null;
    }
    MTLSPostgres.Builder builder = MTLSPostgres.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getCertificateAuthority() != null) {
      builder.setCertificateAuthority((porcelain.getCertificateAuthority()));
    }
    if (porcelain.getClientCertificate() != null) {
      builder.setClientCertificate((porcelain.getClientCertificate()));
    }
    if (porcelain.getClientKey() != null) {
      builder.setClientKey((porcelain.getClientKey()));
    }
    if (porcelain.getDatabase() != null) {
      builder.setDatabase((porcelain.getDatabase()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    builder.setOverrideDatabase(porcelain.getOverrideDatabase());
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getServerName() != null) {
      builder.setServerName((porcelain.getServerName()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.MTLSPostgres> convertRepeatedMTLSPostgresToPorcelain(
      Collection<MTLSPostgres> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertMTLSPostgresToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<MTLSPostgres> convertRepeatedMTLSPostgresToPlumbing(
      Collection<com.strongdm.api.MTLSPostgres> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertMTLSPostgresToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.Maria convertMariaToPorcelain(Maria plumbing) {
    com.strongdm.api.Maria porcelain = new com.strongdm.api.Maria();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setDatabase((plumbing.getDatabase()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static Maria convertMariaToPlumbing(com.strongdm.api.Maria porcelain) {
    if (porcelain == null) {
      return null;
    }
    Maria.Builder builder = Maria.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getDatabase() != null) {
      builder.setDatabase((porcelain.getDatabase()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.Maria> convertRepeatedMariaToPorcelain(
      Collection<Maria> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertMariaToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<Maria> convertRepeatedMariaToPlumbing(
      Collection<com.strongdm.api.Maria> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertMariaToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.Memcached convertMemcachedToPorcelain(Memcached plumbing) {
    com.strongdm.api.Memcached porcelain = new com.strongdm.api.Memcached();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    return porcelain;
  }

  public static Memcached convertMemcachedToPlumbing(com.strongdm.api.Memcached porcelain) {
    if (porcelain == null) {
      return null;
    }
    Memcached.Builder builder = Memcached.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.Memcached> convertRepeatedMemcachedToPorcelain(
      Collection<Memcached> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertMemcachedToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<Memcached> convertRepeatedMemcachedToPlumbing(
      Collection<com.strongdm.api.Memcached> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertMemcachedToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.Memsql convertMemsqlToPorcelain(Memsql plumbing) {
    com.strongdm.api.Memsql porcelain = new com.strongdm.api.Memsql();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setDatabase((plumbing.getDatabase()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static Memsql convertMemsqlToPlumbing(com.strongdm.api.Memsql porcelain) {
    if (porcelain == null) {
      return null;
    }
    Memsql.Builder builder = Memsql.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getDatabase() != null) {
      builder.setDatabase((porcelain.getDatabase()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.Memsql> convertRepeatedMemsqlToPorcelain(
      Collection<Memsql> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertMemsqlToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<Memsql> convertRepeatedMemsqlToPlumbing(
      Collection<com.strongdm.api.Memsql> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertMemsqlToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.MongoHost convertMongoHostToPorcelain(MongoHost plumbing) {
    com.strongdm.api.MongoHost porcelain = new com.strongdm.api.MongoHost();
    porcelain.setAuthDatabase((plumbing.getAuthDatabase()));
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setTlsRequired((plumbing.getTlsRequired()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static MongoHost convertMongoHostToPlumbing(com.strongdm.api.MongoHost porcelain) {
    if (porcelain == null) {
      return null;
    }
    MongoHost.Builder builder = MongoHost.newBuilder();
    if (porcelain.getAuthDatabase() != null) {
      builder.setAuthDatabase((porcelain.getAuthDatabase()));
    }
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    builder.setTlsRequired(porcelain.getTlsRequired());
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.MongoHost> convertRepeatedMongoHostToPorcelain(
      Collection<MongoHost> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertMongoHostToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<MongoHost> convertRepeatedMongoHostToPlumbing(
      Collection<com.strongdm.api.MongoHost> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertMongoHostToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.MongoLegacyHost convertMongoLegacyHostToPorcelain(
      MongoLegacyHost plumbing) {
    com.strongdm.api.MongoLegacyHost porcelain = new com.strongdm.api.MongoLegacyHost();
    porcelain.setAuthDatabase((plumbing.getAuthDatabase()));
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setReplicaSet((plumbing.getReplicaSet()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setTlsRequired((plumbing.getTlsRequired()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static MongoLegacyHost convertMongoLegacyHostToPlumbing(
      com.strongdm.api.MongoLegacyHost porcelain) {
    if (porcelain == null) {
      return null;
    }
    MongoLegacyHost.Builder builder = MongoLegacyHost.newBuilder();
    if (porcelain.getAuthDatabase() != null) {
      builder.setAuthDatabase((porcelain.getAuthDatabase()));
    }
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getReplicaSet() != null) {
      builder.setReplicaSet((porcelain.getReplicaSet()));
    }
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    builder.setTlsRequired(porcelain.getTlsRequired());
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.MongoLegacyHost> convertRepeatedMongoLegacyHostToPorcelain(
      Collection<MongoLegacyHost> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertMongoLegacyHostToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<MongoLegacyHost> convertRepeatedMongoLegacyHostToPlumbing(
      Collection<com.strongdm.api.MongoLegacyHost> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertMongoLegacyHostToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.MongoLegacyReplicaset convertMongoLegacyReplicasetToPorcelain(
      MongoLegacyReplicaset plumbing) {
    com.strongdm.api.MongoLegacyReplicaset porcelain = new com.strongdm.api.MongoLegacyReplicaset();
    porcelain.setAuthDatabase((plumbing.getAuthDatabase()));
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setConnectToReplica((plumbing.getConnectToReplica()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setReplicaSet((plumbing.getReplicaSet()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setTlsRequired((plumbing.getTlsRequired()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static MongoLegacyReplicaset convertMongoLegacyReplicasetToPlumbing(
      com.strongdm.api.MongoLegacyReplicaset porcelain) {
    if (porcelain == null) {
      return null;
    }
    MongoLegacyReplicaset.Builder builder = MongoLegacyReplicaset.newBuilder();
    if (porcelain.getAuthDatabase() != null) {
      builder.setAuthDatabase((porcelain.getAuthDatabase()));
    }
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    builder.setConnectToReplica(porcelain.getConnectToReplica());
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getReplicaSet() != null) {
      builder.setReplicaSet((porcelain.getReplicaSet()));
    }
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    builder.setTlsRequired(porcelain.getTlsRequired());
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.MongoLegacyReplicaset>
      convertRepeatedMongoLegacyReplicasetToPorcelain(Collection<MongoLegacyReplicaset> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertMongoLegacyReplicasetToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<MongoLegacyReplicaset> convertRepeatedMongoLegacyReplicasetToPlumbing(
      Collection<com.strongdm.api.MongoLegacyReplicaset> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertMongoLegacyReplicasetToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.MongoReplicaSet convertMongoReplicaSetToPorcelain(
      MongoReplicaSet plumbing) {
    com.strongdm.api.MongoReplicaSet porcelain = new com.strongdm.api.MongoReplicaSet();
    porcelain.setAuthDatabase((plumbing.getAuthDatabase()));
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setConnectToReplica((plumbing.getConnectToReplica()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setReplicaSet((plumbing.getReplicaSet()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setTlsRequired((plumbing.getTlsRequired()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static MongoReplicaSet convertMongoReplicaSetToPlumbing(
      com.strongdm.api.MongoReplicaSet porcelain) {
    if (porcelain == null) {
      return null;
    }
    MongoReplicaSet.Builder builder = MongoReplicaSet.newBuilder();
    if (porcelain.getAuthDatabase() != null) {
      builder.setAuthDatabase((porcelain.getAuthDatabase()));
    }
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    builder.setConnectToReplica(porcelain.getConnectToReplica());
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getReplicaSet() != null) {
      builder.setReplicaSet((porcelain.getReplicaSet()));
    }
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    builder.setTlsRequired(porcelain.getTlsRequired());
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.MongoReplicaSet> convertRepeatedMongoReplicaSetToPorcelain(
      Collection<MongoReplicaSet> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertMongoReplicaSetToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<MongoReplicaSet> convertRepeatedMongoReplicaSetToPlumbing(
      Collection<com.strongdm.api.MongoReplicaSet> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertMongoReplicaSetToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.MongoShardedCluster convertMongoShardedClusterToPorcelain(
      MongoShardedCluster plumbing) {
    com.strongdm.api.MongoShardedCluster porcelain = new com.strongdm.api.MongoShardedCluster();
    porcelain.setAuthDatabase((plumbing.getAuthDatabase()));
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setTlsRequired((plumbing.getTlsRequired()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static MongoShardedCluster convertMongoShardedClusterToPlumbing(
      com.strongdm.api.MongoShardedCluster porcelain) {
    if (porcelain == null) {
      return null;
    }
    MongoShardedCluster.Builder builder = MongoShardedCluster.newBuilder();
    if (porcelain.getAuthDatabase() != null) {
      builder.setAuthDatabase((porcelain.getAuthDatabase()));
    }
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    builder.setTlsRequired(porcelain.getTlsRequired());
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.MongoShardedCluster>
      convertRepeatedMongoShardedClusterToPorcelain(Collection<MongoShardedCluster> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertMongoShardedClusterToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<MongoShardedCluster> convertRepeatedMongoShardedClusterToPlumbing(
      Collection<com.strongdm.api.MongoShardedCluster> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertMongoShardedClusterToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.Mysql convertMysqlToPorcelain(Mysql plumbing) {
    com.strongdm.api.Mysql porcelain = new com.strongdm.api.Mysql();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setDatabase((plumbing.getDatabase()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static Mysql convertMysqlToPlumbing(com.strongdm.api.Mysql porcelain) {
    if (porcelain == null) {
      return null;
    }
    Mysql.Builder builder = Mysql.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getDatabase() != null) {
      builder.setDatabase((porcelain.getDatabase()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.Mysql> convertRepeatedMysqlToPorcelain(
      Collection<Mysql> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertMysqlToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<Mysql> convertRepeatedMysqlToPlumbing(
      Collection<com.strongdm.api.Mysql> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertMysqlToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.Neptune convertNeptuneToPorcelain(Neptune plumbing) {
    com.strongdm.api.Neptune porcelain = new com.strongdm.api.Neptune();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setEndpoint((plumbing.getEndpoint()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    return porcelain;
  }

  public static Neptune convertNeptuneToPlumbing(com.strongdm.api.Neptune porcelain) {
    if (porcelain == null) {
      return null;
    }
    Neptune.Builder builder = Neptune.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    if (porcelain.getEndpoint() != null) {
      builder.setEndpoint((porcelain.getEndpoint()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.Neptune> convertRepeatedNeptuneToPorcelain(
      Collection<Neptune> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertNeptuneToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<Neptune> convertRepeatedNeptuneToPlumbing(
      Collection<com.strongdm.api.Neptune> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertNeptuneToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.NeptuneIAM convertNeptuneIAMToPorcelain(NeptuneIAM plumbing) {
    com.strongdm.api.NeptuneIAM porcelain = new com.strongdm.api.NeptuneIAM();
    porcelain.setAccessKey((plumbing.getAccessKey()));
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setEndpoint((plumbing.getEndpoint()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setRegion((plumbing.getRegion()));
    porcelain.setRoleArn((plumbing.getRoleArn()));
    porcelain.setRoleExternalId((plumbing.getRoleExternalId()));
    porcelain.setSecretAccessKey((plumbing.getSecretAccessKey()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    return porcelain;
  }

  public static NeptuneIAM convertNeptuneIAMToPlumbing(com.strongdm.api.NeptuneIAM porcelain) {
    if (porcelain == null) {
      return null;
    }
    NeptuneIAM.Builder builder = NeptuneIAM.newBuilder();
    if (porcelain.getAccessKey() != null) {
      builder.setAccessKey((porcelain.getAccessKey()));
    }
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    if (porcelain.getEndpoint() != null) {
      builder.setEndpoint((porcelain.getEndpoint()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getRegion() != null) {
      builder.setRegion((porcelain.getRegion()));
    }
    if (porcelain.getRoleArn() != null) {
      builder.setRoleArn((porcelain.getRoleArn()));
    }
    if (porcelain.getRoleExternalId() != null) {
      builder.setRoleExternalId((porcelain.getRoleExternalId()));
    }
    if (porcelain.getSecretAccessKey() != null) {
      builder.setSecretAccessKey((porcelain.getSecretAccessKey()));
    }
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.NeptuneIAM> convertRepeatedNeptuneIAMToPorcelain(
      Collection<NeptuneIAM> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertNeptuneIAMToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<NeptuneIAM> convertRepeatedNeptuneIAMToPlumbing(
      Collection<com.strongdm.api.NeptuneIAM> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertNeptuneIAMToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.Node convertNodeToPorcelain(Node plumbing) {
    if (plumbing == null) {
      return null;
    }
    if (plumbing.hasGateway()) {
      return convertGatewayToPorcelain(plumbing.getGateway());
    }
    if (plumbing.hasRelay()) {
      return convertRelayToPorcelain(plumbing.getRelay());
    }
    throw new UnknownException("unknown polymorphic type, please upgrade your SDK");
  }

  public static Node convertNodeToPlumbing(com.strongdm.api.Node porcelain) {
    if (porcelain == null) {
      return null;
    }
    if (porcelain instanceof com.strongdm.api.Gateway) {
      Node.Builder builder = Node.newBuilder();
      builder.setGateway(convertGatewayToPlumbing((com.strongdm.api.Gateway) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.Relay) {
      Node.Builder builder = Node.newBuilder();
      builder.setRelay(convertRelayToPlumbing((com.strongdm.api.Relay) porcelain));
      return builder.build();
    }
    return null;
  }

  public static List<com.strongdm.api.Node> convertRepeatedNodeToPorcelain(
      Collection<Node> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertNodeToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<Node> convertRepeatedNodeToPlumbing(
      Collection<com.strongdm.api.Node> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertNodeToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.NodeCreateResponse convertNodeCreateResponseToPorcelain(
      NodeCreateResponse plumbing) {
    com.strongdm.api.NodeCreateResponse porcelain = new com.strongdm.api.NodeCreateResponse();
    porcelain.setMeta(Plumbing.convertCreateResponseMetadataToPorcelain(plumbing.getMeta()));
    porcelain.setNode(Plumbing.convertNodeToPorcelain(plumbing.getNode()));
    porcelain.setRateLimit(Plumbing.convertRateLimitMetadataToPorcelain(plumbing.getRateLimit()));
    porcelain.setToken((plumbing.getToken()));
    return porcelain;
  }

  public static NodeCreateResponse convertNodeCreateResponseToPlumbing(
      com.strongdm.api.NodeCreateResponse porcelain) {
    if (porcelain == null) {
      return null;
    }
    NodeCreateResponse.Builder builder = NodeCreateResponse.newBuilder();
    if (porcelain.getMeta() != null) {
      builder.setMeta(Plumbing.convertCreateResponseMetadataToPlumbing(porcelain.getMeta()));
    }
    if (porcelain.getNode() != null) {
      builder.setNode(Plumbing.convertNodeToPlumbing(porcelain.getNode()));
    }
    if (porcelain.getRateLimit() != null) {
      builder.setRateLimit(Plumbing.convertRateLimitMetadataToPlumbing(porcelain.getRateLimit()));
    }
    if (porcelain.getToken() != null) {
      builder.setToken((porcelain.getToken()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.NodeCreateResponse>
      convertRepeatedNodeCreateResponseToPorcelain(Collection<NodeCreateResponse> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertNodeCreateResponseToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<NodeCreateResponse> convertRepeatedNodeCreateResponseToPlumbing(
      Collection<com.strongdm.api.NodeCreateResponse> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertNodeCreateResponseToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.NodeDeleteResponse convertNodeDeleteResponseToPorcelain(
      NodeDeleteResponse plumbing) {
    com.strongdm.api.NodeDeleteResponse porcelain = new com.strongdm.api.NodeDeleteResponse();
    porcelain.setMeta(Plumbing.convertDeleteResponseMetadataToPorcelain(plumbing.getMeta()));
    porcelain.setRateLimit(Plumbing.convertRateLimitMetadataToPorcelain(plumbing.getRateLimit()));
    return porcelain;
  }

  public static NodeDeleteResponse convertNodeDeleteResponseToPlumbing(
      com.strongdm.api.NodeDeleteResponse porcelain) {
    if (porcelain == null) {
      return null;
    }
    NodeDeleteResponse.Builder builder = NodeDeleteResponse.newBuilder();
    if (porcelain.getMeta() != null) {
      builder.setMeta(Plumbing.convertDeleteResponseMetadataToPlumbing(porcelain.getMeta()));
    }
    if (porcelain.getRateLimit() != null) {
      builder.setRateLimit(Plumbing.convertRateLimitMetadataToPlumbing(porcelain.getRateLimit()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.NodeDeleteResponse>
      convertRepeatedNodeDeleteResponseToPorcelain(Collection<NodeDeleteResponse> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertNodeDeleteResponseToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<NodeDeleteResponse> convertRepeatedNodeDeleteResponseToPlumbing(
      Collection<com.strongdm.api.NodeDeleteResponse> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertNodeDeleteResponseToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.NodeGetResponse convertNodeGetResponseToPorcelain(
      NodeGetResponse plumbing) {
    com.strongdm.api.NodeGetResponse porcelain = new com.strongdm.api.NodeGetResponse();
    porcelain.setMeta(Plumbing.convertGetResponseMetadataToPorcelain(plumbing.getMeta()));
    porcelain.setNode(Plumbing.convertNodeToPorcelain(plumbing.getNode()));
    porcelain.setRateLimit(Plumbing.convertRateLimitMetadataToPorcelain(plumbing.getRateLimit()));
    return porcelain;
  }

  public static NodeGetResponse convertNodeGetResponseToPlumbing(
      com.strongdm.api.NodeGetResponse porcelain) {
    if (porcelain == null) {
      return null;
    }
    NodeGetResponse.Builder builder = NodeGetResponse.newBuilder();
    if (porcelain.getMeta() != null) {
      builder.setMeta(Plumbing.convertGetResponseMetadataToPlumbing(porcelain.getMeta()));
    }
    if (porcelain.getNode() != null) {
      builder.setNode(Plumbing.convertNodeToPlumbing(porcelain.getNode()));
    }
    if (porcelain.getRateLimit() != null) {
      builder.setRateLimit(Plumbing.convertRateLimitMetadataToPlumbing(porcelain.getRateLimit()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.NodeGetResponse> convertRepeatedNodeGetResponseToPorcelain(
      Collection<NodeGetResponse> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertNodeGetResponseToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<NodeGetResponse> convertRepeatedNodeGetResponseToPlumbing(
      Collection<com.strongdm.api.NodeGetResponse> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertNodeGetResponseToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.NodeHistory convertNodeHistoryToPorcelain(NodeHistory plumbing) {
    com.strongdm.api.NodeHistory porcelain = new com.strongdm.api.NodeHistory();
    porcelain.setActivityId((plumbing.getActivityId()));
    porcelain.setDeletedAt(Plumbing.convertTimestampToPorcelain(plumbing.getDeletedAt()));
    porcelain.setNode(Plumbing.convertNodeToPorcelain(plumbing.getNode()));
    porcelain.setTimestamp(Plumbing.convertTimestampToPorcelain(plumbing.getTimestamp()));
    return porcelain;
  }

  public static NodeHistory convertNodeHistoryToPlumbing(com.strongdm.api.NodeHistory porcelain) {
    if (porcelain == null) {
      return null;
    }
    NodeHistory.Builder builder = NodeHistory.newBuilder();
    if (porcelain.getActivityId() != null) {
      builder.setActivityId((porcelain.getActivityId()));
    }
    if (porcelain.getDeletedAt() != null) {
      builder.setDeletedAt(Plumbing.convertTimestampToPlumbing(porcelain.getDeletedAt()));
    }
    if (porcelain.getNode() != null) {
      builder.setNode(Plumbing.convertNodeToPlumbing(porcelain.getNode()));
    }
    if (porcelain.getTimestamp() != null) {
      builder.setTimestamp(Plumbing.convertTimestampToPlumbing(porcelain.getTimestamp()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.NodeHistory> convertRepeatedNodeHistoryToPorcelain(
      Collection<NodeHistory> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertNodeHistoryToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<NodeHistory> convertRepeatedNodeHistoryToPlumbing(
      Collection<com.strongdm.api.NodeHistory> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertNodeHistoryToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.NodeUpdateResponse convertNodeUpdateResponseToPorcelain(
      NodeUpdateResponse plumbing) {
    com.strongdm.api.NodeUpdateResponse porcelain = new com.strongdm.api.NodeUpdateResponse();
    porcelain.setMeta(Plumbing.convertUpdateResponseMetadataToPorcelain(plumbing.getMeta()));
    porcelain.setNode(Plumbing.convertNodeToPorcelain(plumbing.getNode()));
    porcelain.setRateLimit(Plumbing.convertRateLimitMetadataToPorcelain(plumbing.getRateLimit()));
    return porcelain;
  }

  public static NodeUpdateResponse convertNodeUpdateResponseToPlumbing(
      com.strongdm.api.NodeUpdateResponse porcelain) {
    if (porcelain == null) {
      return null;
    }
    NodeUpdateResponse.Builder builder = NodeUpdateResponse.newBuilder();
    if (porcelain.getMeta() != null) {
      builder.setMeta(Plumbing.convertUpdateResponseMetadataToPlumbing(porcelain.getMeta()));
    }
    if (porcelain.getNode() != null) {
      builder.setNode(Plumbing.convertNodeToPlumbing(porcelain.getNode()));
    }
    if (porcelain.getRateLimit() != null) {
      builder.setRateLimit(Plumbing.convertRateLimitMetadataToPlumbing(porcelain.getRateLimit()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.NodeUpdateResponse>
      convertRepeatedNodeUpdateResponseToPorcelain(Collection<NodeUpdateResponse> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertNodeUpdateResponseToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<NodeUpdateResponse> convertRepeatedNodeUpdateResponseToPlumbing(
      Collection<com.strongdm.api.NodeUpdateResponse> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertNodeUpdateResponseToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.Oracle convertOracleToPorcelain(Oracle plumbing) {
    com.strongdm.api.Oracle porcelain = new com.strongdm.api.Oracle();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setDatabase((plumbing.getDatabase()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setTlsRequired((plumbing.getTlsRequired()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static Oracle convertOracleToPlumbing(com.strongdm.api.Oracle porcelain) {
    if (porcelain == null) {
      return null;
    }
    Oracle.Builder builder = Oracle.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getDatabase() != null) {
      builder.setDatabase((porcelain.getDatabase()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    builder.setTlsRequired(porcelain.getTlsRequired());
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.Oracle> convertRepeatedOracleToPorcelain(
      Collection<Oracle> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertOracleToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<Oracle> convertRepeatedOracleToPlumbing(
      Collection<com.strongdm.api.Oracle> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertOracleToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.Organization convertOrganizationToPorcelain(
      Organization plumbing) {
    com.strongdm.api.Organization porcelain = new com.strongdm.api.Organization();
    porcelain.setAuthProvider((plumbing.getAuthProvider()));
    porcelain.setCreatedAt(Plumbing.convertTimestampToPorcelain(plumbing.getCreatedAt()));
    porcelain.setIdleTimeout(Plumbing.convertDurationToPorcelain(plumbing.getIdleTimeout()));
    porcelain.setIdleTimeoutEnabled((plumbing.getIdleTimeoutEnabled()));
    porcelain.setKind((plumbing.getKind()));
    porcelain.setLogLocalEncoder((plumbing.getLogLocalEncoder()));
    porcelain.setLogLocalFormat((plumbing.getLogLocalFormat()));
    porcelain.setLogLocalStorage((plumbing.getLogLocalStorage()));
    porcelain.setLogRemoteEncoder((plumbing.getLogRemoteEncoder()));
    porcelain.setLogSocketPath((plumbing.getLogSocketPath()));
    porcelain.setLogTcpAddress((plumbing.getLogTcpAddress()));
    porcelain.setMfaEnabled((plumbing.getMfaEnabled()));
    porcelain.setMfaProvider((plumbing.getMfaProvider()));
    porcelain.setName((plumbing.getName()));
    porcelain.setRequireSecretStore((plumbing.getRequireSecretStore()));
    porcelain.setSamlMetadataUrl((plumbing.getSamlMetadataUrl()));
    porcelain.setScimProvider((plumbing.getScimProvider()));
    porcelain.setSensitiveLabel((plumbing.getSensitiveLabel()));
    porcelain.setSessionTimeout(Plumbing.convertDurationToPorcelain(plumbing.getSessionTimeout()));
    porcelain.setSessionTimeoutEnabled((plumbing.getSessionTimeoutEnabled()));
    porcelain.setSshCertificateAuthorityPublicKey((plumbing.getSshCertificateAuthorityPublicKey()));
    porcelain.setSshCertificateAuthorityUpdatedAt(
        Plumbing.convertTimestampToPorcelain(plumbing.getSshCertificateAuthorityUpdatedAt()));
    porcelain.setUpdatedAt(Plumbing.convertTimestampToPorcelain(plumbing.getUpdatedAt()));
    porcelain.setWebsitesSubdomain((plumbing.getWebsitesSubdomain()));
    return porcelain;
  }

  public static Organization convertOrganizationToPlumbing(
      com.strongdm.api.Organization porcelain) {
    if (porcelain == null) {
      return null;
    }
    Organization.Builder builder = Organization.newBuilder();
    if (porcelain.getAuthProvider() != null) {
      builder.setAuthProvider((porcelain.getAuthProvider()));
    }
    if (porcelain.getCreatedAt() != null) {
      builder.setCreatedAt(Plumbing.convertTimestampToPlumbing(porcelain.getCreatedAt()));
    }
    if (porcelain.getIdleTimeout() != null) {
      builder.setIdleTimeout(Plumbing.convertDurationToPlumbing(porcelain.getIdleTimeout()));
    }
    builder.setIdleTimeoutEnabled(porcelain.getIdleTimeoutEnabled());
    if (porcelain.getKind() != null) {
      builder.setKind((porcelain.getKind()));
    }
    if (porcelain.getLogLocalEncoder() != null) {
      builder.setLogLocalEncoder((porcelain.getLogLocalEncoder()));
    }
    if (porcelain.getLogLocalFormat() != null) {
      builder.setLogLocalFormat((porcelain.getLogLocalFormat()));
    }
    if (porcelain.getLogLocalStorage() != null) {
      builder.setLogLocalStorage((porcelain.getLogLocalStorage()));
    }
    if (porcelain.getLogRemoteEncoder() != null) {
      builder.setLogRemoteEncoder((porcelain.getLogRemoteEncoder()));
    }
    if (porcelain.getLogSocketPath() != null) {
      builder.setLogSocketPath((porcelain.getLogSocketPath()));
    }
    if (porcelain.getLogTcpAddress() != null) {
      builder.setLogTcpAddress((porcelain.getLogTcpAddress()));
    }
    builder.setMfaEnabled(porcelain.getMfaEnabled());
    if (porcelain.getMfaProvider() != null) {
      builder.setMfaProvider((porcelain.getMfaProvider()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    builder.setRequireSecretStore(porcelain.getRequireSecretStore());
    if (porcelain.getSamlMetadataUrl() != null) {
      builder.setSamlMetadataUrl((porcelain.getSamlMetadataUrl()));
    }
    if (porcelain.getScimProvider() != null) {
      builder.setScimProvider((porcelain.getScimProvider()));
    }
    if (porcelain.getSensitiveLabel() != null) {
      builder.setSensitiveLabel((porcelain.getSensitiveLabel()));
    }
    if (porcelain.getSessionTimeout() != null) {
      builder.setSessionTimeout(Plumbing.convertDurationToPlumbing(porcelain.getSessionTimeout()));
    }
    builder.setSessionTimeoutEnabled(porcelain.getSessionTimeoutEnabled());
    if (porcelain.getSshCertificateAuthorityPublicKey() != null) {
      builder.setSshCertificateAuthorityPublicKey(
          (porcelain.getSshCertificateAuthorityPublicKey()));
    }
    if (porcelain.getSshCertificateAuthorityUpdatedAt() != null) {
      builder.setSshCertificateAuthorityUpdatedAt(
          Plumbing.convertTimestampToPlumbing(porcelain.getSshCertificateAuthorityUpdatedAt()));
    }
    if (porcelain.getUpdatedAt() != null) {
      builder.setUpdatedAt(Plumbing.convertTimestampToPlumbing(porcelain.getUpdatedAt()));
    }
    if (porcelain.getWebsitesSubdomain() != null) {
      builder.setWebsitesSubdomain((porcelain.getWebsitesSubdomain()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.Organization> convertRepeatedOrganizationToPorcelain(
      Collection<Organization> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertOrganizationToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<Organization> convertRepeatedOrganizationToPlumbing(
      Collection<com.strongdm.api.Organization> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertOrganizationToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.OrganizationHistoryRecord
      convertOrganizationHistoryRecordToPorcelain(OrganizationHistoryRecord plumbing) {
    com.strongdm.api.OrganizationHistoryRecord porcelain =
        new com.strongdm.api.OrganizationHistoryRecord();
    porcelain.setActivityId((plumbing.getActivityId()));
    porcelain.setOrganization(Plumbing.convertOrganizationToPorcelain(plumbing.getOrganization()));
    porcelain.setTimestamp(Plumbing.convertTimestampToPorcelain(plumbing.getTimestamp()));
    return porcelain;
  }

  public static OrganizationHistoryRecord convertOrganizationHistoryRecordToPlumbing(
      com.strongdm.api.OrganizationHistoryRecord porcelain) {
    if (porcelain == null) {
      return null;
    }
    OrganizationHistoryRecord.Builder builder = OrganizationHistoryRecord.newBuilder();
    if (porcelain.getActivityId() != null) {
      builder.setActivityId((porcelain.getActivityId()));
    }
    if (porcelain.getOrganization() != null) {
      builder.setOrganization(Plumbing.convertOrganizationToPlumbing(porcelain.getOrganization()));
    }
    if (porcelain.getTimestamp() != null) {
      builder.setTimestamp(Plumbing.convertTimestampToPlumbing(porcelain.getTimestamp()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.OrganizationHistoryRecord>
      convertRepeatedOrganizationHistoryRecordToPorcelain(
          Collection<OrganizationHistoryRecord> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertOrganizationHistoryRecordToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<OrganizationHistoryRecord> convertRepeatedOrganizationHistoryRecordToPlumbing(
      Collection<com.strongdm.api.OrganizationHistoryRecord> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertOrganizationHistoryRecordToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.Postgres convertPostgresToPorcelain(Postgres plumbing) {
    com.strongdm.api.Postgres porcelain = new com.strongdm.api.Postgres();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setDatabase((plumbing.getDatabase()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setOverrideDatabase((plumbing.getOverrideDatabase()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static Postgres convertPostgresToPlumbing(com.strongdm.api.Postgres porcelain) {
    if (porcelain == null) {
      return null;
    }
    Postgres.Builder builder = Postgres.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getDatabase() != null) {
      builder.setDatabase((porcelain.getDatabase()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    builder.setOverrideDatabase(porcelain.getOverrideDatabase());
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.Postgres> convertRepeatedPostgresToPorcelain(
      Collection<Postgres> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertPostgresToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<Postgres> convertRepeatedPostgresToPlumbing(
      Collection<com.strongdm.api.Postgres> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertPostgresToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.Presto convertPrestoToPorcelain(Presto plumbing) {
    com.strongdm.api.Presto porcelain = new com.strongdm.api.Presto();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setDatabase((plumbing.getDatabase()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setTlsRequired((plumbing.getTlsRequired()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static Presto convertPrestoToPlumbing(com.strongdm.api.Presto porcelain) {
    if (porcelain == null) {
      return null;
    }
    Presto.Builder builder = Presto.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getDatabase() != null) {
      builder.setDatabase((porcelain.getDatabase()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    builder.setTlsRequired(porcelain.getTlsRequired());
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.Presto> convertRepeatedPrestoToPorcelain(
      Collection<Presto> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertPrestoToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<Presto> convertRepeatedPrestoToPlumbing(
      Collection<com.strongdm.api.Presto> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertPrestoToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.Query convertQueryToPorcelain(Query plumbing) {
    com.strongdm.api.Query porcelain = new com.strongdm.api.Query();
    porcelain.setAccountEmail((plumbing.getAccountEmail()));
    porcelain.setAccountFirstName((plumbing.getAccountFirstName()));
    porcelain.setAccountId((plumbing.getAccountId()));
    porcelain.setAccountLastName((plumbing.getAccountLastName()));
    porcelain.setAccountTags(Plumbing.convertTagsToPorcelain(plumbing.getAccountTags()));
    porcelain.setCapture(Plumbing.convertQueryCaptureToPorcelain(plumbing.getCapture()));
    porcelain.setCompletedAt(Plumbing.convertTimestampToPorcelain(plumbing.getCompletedAt()));
    porcelain.setDuration(Plumbing.convertDurationToPorcelain(plumbing.getDuration()));
    porcelain.setEgressNodeId((plumbing.getEgressNodeId()));
    porcelain.setEncrypted((plumbing.getEncrypted()));
    porcelain.setId((plumbing.getId()));
    porcelain.setQueryBody((plumbing.getQueryBody()));
    porcelain.setQueryCategory((plumbing.getQueryCategory()));
    porcelain.setQueryHash((plumbing.getQueryHash()));
    porcelain.setQueryKey((plumbing.getQueryKey()));
    porcelain.setRecordCount((plumbing.getRecordCount()));
    porcelain.setRemoteIdentityUsername((plumbing.getRemoteIdentityUsername()));
    porcelain.setReplayable((plumbing.getReplayable()));
    porcelain.setResourceId((plumbing.getResourceId()));
    porcelain.setResourceName((plumbing.getResourceName()));
    porcelain.setResourceTags(Plumbing.convertTagsToPorcelain(plumbing.getResourceTags()));
    porcelain.setResourceType((plumbing.getResourceType()));
    porcelain.setTimestamp(Plumbing.convertTimestampToPorcelain(plumbing.getTimestamp()));
    return porcelain;
  }

  public static Query convertQueryToPlumbing(com.strongdm.api.Query porcelain) {
    if (porcelain == null) {
      return null;
    }
    Query.Builder builder = Query.newBuilder();
    if (porcelain.getAccountEmail() != null) {
      builder.setAccountEmail((porcelain.getAccountEmail()));
    }
    if (porcelain.getAccountFirstName() != null) {
      builder.setAccountFirstName((porcelain.getAccountFirstName()));
    }
    if (porcelain.getAccountId() != null) {
      builder.setAccountId((porcelain.getAccountId()));
    }
    if (porcelain.getAccountLastName() != null) {
      builder.setAccountLastName((porcelain.getAccountLastName()));
    }
    if (porcelain.getAccountTags() != null) {
      builder.setAccountTags(Plumbing.convertTagsToPlumbing(porcelain.getAccountTags()));
    }
    if (porcelain.getCapture() != null) {
      builder.setCapture(Plumbing.convertQueryCaptureToPlumbing(porcelain.getCapture()));
    }
    if (porcelain.getCompletedAt() != null) {
      builder.setCompletedAt(Plumbing.convertTimestampToPlumbing(porcelain.getCompletedAt()));
    }
    if (porcelain.getDuration() != null) {
      builder.setDuration(Plumbing.convertDurationToPlumbing(porcelain.getDuration()));
    }
    if (porcelain.getEgressNodeId() != null) {
      builder.setEgressNodeId((porcelain.getEgressNodeId()));
    }
    builder.setEncrypted(porcelain.getEncrypted());
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getQueryBody() != null) {
      builder.setQueryBody((porcelain.getQueryBody()));
    }
    if (porcelain.getQueryCategory() != null) {
      builder.setQueryCategory((porcelain.getQueryCategory()));
    }
    if (porcelain.getQueryHash() != null) {
      builder.setQueryHash((porcelain.getQueryHash()));
    }
    if (porcelain.getQueryKey() != null) {
      builder.setQueryKey((porcelain.getQueryKey()));
    }
    builder.setRecordCount(porcelain.getRecordCount());
    if (porcelain.getRemoteIdentityUsername() != null) {
      builder.setRemoteIdentityUsername((porcelain.getRemoteIdentityUsername()));
    }
    builder.setReplayable(porcelain.getReplayable());
    if (porcelain.getResourceId() != null) {
      builder.setResourceId((porcelain.getResourceId()));
    }
    if (porcelain.getResourceName() != null) {
      builder.setResourceName((porcelain.getResourceName()));
    }
    if (porcelain.getResourceTags() != null) {
      builder.setResourceTags(Plumbing.convertTagsToPlumbing(porcelain.getResourceTags()));
    }
    if (porcelain.getResourceType() != null) {
      builder.setResourceType((porcelain.getResourceType()));
    }
    if (porcelain.getTimestamp() != null) {
      builder.setTimestamp(Plumbing.convertTimestampToPlumbing(porcelain.getTimestamp()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.Query> convertRepeatedQueryToPorcelain(
      Collection<Query> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertQueryToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<Query> convertRepeatedQueryToPlumbing(
      Collection<com.strongdm.api.Query> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertQueryToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.QueryCapture convertQueryCaptureToPorcelain(
      QueryCapture plumbing) {
    com.strongdm.api.QueryCapture porcelain = new com.strongdm.api.QueryCapture();
    porcelain.setClientCommand((plumbing.getClientCommand()));
    porcelain.setCommand((plumbing.getCommand()));
    porcelain.setContainer((plumbing.getContainer()));
    porcelain.setEnv((plumbing.getEnv()));
    porcelain.setFileName((plumbing.getFileName()));
    porcelain.setFileSize((plumbing.getFileSize()));
    porcelain.setHeight((plumbing.getHeight()));
    porcelain.setPod((plumbing.getPod()));
    porcelain.setRequestBody(Plumbing.convertBytesToPorcelain(plumbing.getRequestBody()));
    porcelain.setRequestMethod((plumbing.getRequestMethod()));
    porcelain.setRequestUri((plumbing.getRequestUri()));
    porcelain.setType((plumbing.getType()));
    porcelain.setWidth((plumbing.getWidth()));
    return porcelain;
  }

  public static QueryCapture convertQueryCaptureToPlumbing(
      com.strongdm.api.QueryCapture porcelain) {
    if (porcelain == null) {
      return null;
    }
    QueryCapture.Builder builder = QueryCapture.newBuilder();
    if (porcelain.getClientCommand() != null) {
      builder.setClientCommand((porcelain.getClientCommand()));
    }
    if (porcelain.getCommand() != null) {
      builder.setCommand((porcelain.getCommand()));
    }
    if (porcelain.getContainer() != null) {
      builder.setContainer((porcelain.getContainer()));
    }
    builder.putAllEnv((porcelain.getEnv()));
    if (porcelain.getFileName() != null) {
      builder.setFileName((porcelain.getFileName()));
    }
    builder.setFileSize(porcelain.getFileSize());
    builder.setHeight(porcelain.getHeight());
    if (porcelain.getPod() != null) {
      builder.setPod((porcelain.getPod()));
    }
    if (porcelain.getRequestBody() != null) {
      builder.setRequestBody(Plumbing.convertBytesToPlumbing(porcelain.getRequestBody()));
    }
    if (porcelain.getRequestMethod() != null) {
      builder.setRequestMethod((porcelain.getRequestMethod()));
    }
    if (porcelain.getRequestUri() != null) {
      builder.setRequestUri((porcelain.getRequestUri()));
    }
    if (porcelain.getType() != null) {
      builder.setType((porcelain.getType()));
    }
    builder.setWidth(porcelain.getWidth());
    return builder.build();
  }

  public static List<com.strongdm.api.QueryCapture> convertRepeatedQueryCaptureToPorcelain(
      Collection<QueryCapture> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertQueryCaptureToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<QueryCapture> convertRepeatedQueryCaptureToPlumbing(
      Collection<com.strongdm.api.QueryCapture> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertQueryCaptureToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.RDP convertRDPToPorcelain(RDP plumbing) {
    com.strongdm.api.RDP porcelain = new com.strongdm.api.RDP();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setDowngradeNlaConnections((plumbing.getDowngradeNlaConnections()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static RDP convertRDPToPlumbing(com.strongdm.api.RDP porcelain) {
    if (porcelain == null) {
      return null;
    }
    RDP.Builder builder = RDP.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    builder.setDowngradeNlaConnections(porcelain.getDowngradeNlaConnections());
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.RDP> convertRepeatedRDPToPorcelain(
      Collection<RDP> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertRDPToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<RDP> convertRepeatedRDPToPlumbing(
      Collection<com.strongdm.api.RDP> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertRDPToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.RabbitMQAMQP091 convertRabbitMQAMQP091ToPorcelain(
      RabbitMQAMQP091 plumbing) {
    com.strongdm.api.RabbitMQAMQP091 porcelain = new com.strongdm.api.RabbitMQAMQP091();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setTlsRequired((plumbing.getTlsRequired()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static RabbitMQAMQP091 convertRabbitMQAMQP091ToPlumbing(
      com.strongdm.api.RabbitMQAMQP091 porcelain) {
    if (porcelain == null) {
      return null;
    }
    RabbitMQAMQP091.Builder builder = RabbitMQAMQP091.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    builder.setTlsRequired(porcelain.getTlsRequired());
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.RabbitMQAMQP091> convertRepeatedRabbitMQAMQP091ToPorcelain(
      Collection<RabbitMQAMQP091> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertRabbitMQAMQP091ToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<RabbitMQAMQP091> convertRepeatedRabbitMQAMQP091ToPlumbing(
      Collection<com.strongdm.api.RabbitMQAMQP091> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertRabbitMQAMQP091ToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.RateLimitMetadata convertRateLimitMetadataToPorcelain(
      RateLimitMetadata plumbing) {
    com.strongdm.api.RateLimitMetadata porcelain = new com.strongdm.api.RateLimitMetadata();
    porcelain.setBucket((plumbing.getBucket()));
    porcelain.setLimit((plumbing.getLimit()));
    porcelain.setRemaining((plumbing.getRemaining()));
    porcelain.setResetAt(Plumbing.convertTimestampToPorcelain(plumbing.getResetAt()));
    return porcelain;
  }

  public static RateLimitMetadata convertRateLimitMetadataToPlumbing(
      com.strongdm.api.RateLimitMetadata porcelain) {
    if (porcelain == null) {
      return null;
    }
    RateLimitMetadata.Builder builder = RateLimitMetadata.newBuilder();
    if (porcelain.getBucket() != null) {
      builder.setBucket((porcelain.getBucket()));
    }
    builder.setLimit(porcelain.getLimit());
    builder.setRemaining(porcelain.getRemaining());
    if (porcelain.getResetAt() != null) {
      builder.setResetAt(Plumbing.convertTimestampToPlumbing(porcelain.getResetAt()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.RateLimitMetadata>
      convertRepeatedRateLimitMetadataToPorcelain(Collection<RateLimitMetadata> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertRateLimitMetadataToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<RateLimitMetadata> convertRepeatedRateLimitMetadataToPlumbing(
      Collection<com.strongdm.api.RateLimitMetadata> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertRateLimitMetadataToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.RawTCP convertRawTCPToPorcelain(RawTCP plumbing) {
    com.strongdm.api.RawTCP porcelain = new com.strongdm.api.RawTCP();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    return porcelain;
  }

  public static RawTCP convertRawTCPToPlumbing(com.strongdm.api.RawTCP porcelain) {
    if (porcelain == null) {
      return null;
    }
    RawTCP.Builder builder = RawTCP.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.RawTCP> convertRepeatedRawTCPToPorcelain(
      Collection<RawTCP> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertRawTCPToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<RawTCP> convertRepeatedRawTCPToPlumbing(
      Collection<com.strongdm.api.RawTCP> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertRawTCPToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.Redis convertRedisToPorcelain(Redis plumbing) {
    com.strongdm.api.Redis porcelain = new com.strongdm.api.Redis();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setTlsRequired((plumbing.getTlsRequired()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static Redis convertRedisToPlumbing(com.strongdm.api.Redis porcelain) {
    if (porcelain == null) {
      return null;
    }
    Redis.Builder builder = Redis.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    builder.setTlsRequired(porcelain.getTlsRequired());
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.Redis> convertRepeatedRedisToPorcelain(
      Collection<Redis> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertRedisToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<Redis> convertRepeatedRedisToPlumbing(
      Collection<com.strongdm.api.Redis> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertRedisToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.Redshift convertRedshiftToPorcelain(Redshift plumbing) {
    com.strongdm.api.Redshift porcelain = new com.strongdm.api.Redshift();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setDatabase((plumbing.getDatabase()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setOverrideDatabase((plumbing.getOverrideDatabase()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static Redshift convertRedshiftToPlumbing(com.strongdm.api.Redshift porcelain) {
    if (porcelain == null) {
      return null;
    }
    Redshift.Builder builder = Redshift.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getDatabase() != null) {
      builder.setDatabase((porcelain.getDatabase()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    builder.setOverrideDatabase(porcelain.getOverrideDatabase());
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.Redshift> convertRepeatedRedshiftToPorcelain(
      Collection<Redshift> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertRedshiftToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<Redshift> convertRepeatedRedshiftToPlumbing(
      Collection<com.strongdm.api.Redshift> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertRedshiftToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.Relay convertRelayToPorcelain(Relay plumbing) {
    com.strongdm.api.Relay porcelain = new com.strongdm.api.Relay();
    porcelain.setDevice((plumbing.getDevice()));
    porcelain.setGatewayFilter((plumbing.getGatewayFilter()));
    porcelain.setId((plumbing.getId()));
    porcelain.setLocation((plumbing.getLocation()));
    porcelain.setName((plumbing.getName()));
    porcelain.setState((plumbing.getState()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setVersion((plumbing.getVersion()));
    return porcelain;
  }

  public static Relay convertRelayToPlumbing(com.strongdm.api.Relay porcelain) {
    if (porcelain == null) {
      return null;
    }
    Relay.Builder builder = Relay.newBuilder();
    if (porcelain.getDevice() != null) {
      builder.setDevice((porcelain.getDevice()));
    }
    if (porcelain.getGatewayFilter() != null) {
      builder.setGatewayFilter((porcelain.getGatewayFilter()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getLocation() != null) {
      builder.setLocation((porcelain.getLocation()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getState() != null) {
      builder.setState((porcelain.getState()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getVersion() != null) {
      builder.setVersion((porcelain.getVersion()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.Relay> convertRepeatedRelayToPorcelain(
      Collection<Relay> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertRelayToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<Relay> convertRepeatedRelayToPlumbing(
      Collection<com.strongdm.api.Relay> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertRelayToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.RemoteIdentity convertRemoteIdentityToPorcelain(
      RemoteIdentity plumbing) {
    com.strongdm.api.RemoteIdentity porcelain = new com.strongdm.api.RemoteIdentity();
    porcelain.setAccountId((plumbing.getAccountId()));
    porcelain.setId((plumbing.getId()));
    porcelain.setRemoteIdentityGroupId((plumbing.getRemoteIdentityGroupId()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static RemoteIdentity convertRemoteIdentityToPlumbing(
      com.strongdm.api.RemoteIdentity porcelain) {
    if (porcelain == null) {
      return null;
    }
    RemoteIdentity.Builder builder = RemoteIdentity.newBuilder();
    if (porcelain.getAccountId() != null) {
      builder.setAccountId((porcelain.getAccountId()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getRemoteIdentityGroupId() != null) {
      builder.setRemoteIdentityGroupId((porcelain.getRemoteIdentityGroupId()));
    }
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.RemoteIdentity> convertRepeatedRemoteIdentityToPorcelain(
      Collection<RemoteIdentity> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertRemoteIdentityToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<RemoteIdentity> convertRepeatedRemoteIdentityToPlumbing(
      Collection<com.strongdm.api.RemoteIdentity> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertRemoteIdentityToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.RemoteIdentityCreateResponse
      convertRemoteIdentityCreateResponseToPorcelain(RemoteIdentityCreateResponse plumbing) {
    com.strongdm.api.RemoteIdentityCreateResponse porcelain =
        new com.strongdm.api.RemoteIdentityCreateResponse();
    porcelain.setMeta(Plumbing.convertCreateResponseMetadataToPorcelain(plumbing.getMeta()));
    porcelain.setRateLimit(Plumbing.convertRateLimitMetadataToPorcelain(plumbing.getRateLimit()));
    porcelain.setRemoteIdentity(
        Plumbing.convertRemoteIdentityToPorcelain(plumbing.getRemoteIdentity()));
    return porcelain;
  }

  public static RemoteIdentityCreateResponse convertRemoteIdentityCreateResponseToPlumbing(
      com.strongdm.api.RemoteIdentityCreateResponse porcelain) {
    if (porcelain == null) {
      return null;
    }
    RemoteIdentityCreateResponse.Builder builder = RemoteIdentityCreateResponse.newBuilder();
    if (porcelain.getMeta() != null) {
      builder.setMeta(Plumbing.convertCreateResponseMetadataToPlumbing(porcelain.getMeta()));
    }
    if (porcelain.getRateLimit() != null) {
      builder.setRateLimit(Plumbing.convertRateLimitMetadataToPlumbing(porcelain.getRateLimit()));
    }
    if (porcelain.getRemoteIdentity() != null) {
      builder.setRemoteIdentity(
          Plumbing.convertRemoteIdentityToPlumbing(porcelain.getRemoteIdentity()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.RemoteIdentityCreateResponse>
      convertRepeatedRemoteIdentityCreateResponseToPorcelain(
          Collection<RemoteIdentityCreateResponse> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertRemoteIdentityCreateResponseToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<RemoteIdentityCreateResponse>
      convertRepeatedRemoteIdentityCreateResponseToPlumbing(
          Collection<com.strongdm.api.RemoteIdentityCreateResponse> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertRemoteIdentityCreateResponseToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.RemoteIdentityDeleteResponse
      convertRemoteIdentityDeleteResponseToPorcelain(RemoteIdentityDeleteResponse plumbing) {
    com.strongdm.api.RemoteIdentityDeleteResponse porcelain =
        new com.strongdm.api.RemoteIdentityDeleteResponse();
    porcelain.setMeta(Plumbing.convertDeleteResponseMetadataToPorcelain(plumbing.getMeta()));
    porcelain.setRateLimit(Plumbing.convertRateLimitMetadataToPorcelain(plumbing.getRateLimit()));
    return porcelain;
  }

  public static RemoteIdentityDeleteResponse convertRemoteIdentityDeleteResponseToPlumbing(
      com.strongdm.api.RemoteIdentityDeleteResponse porcelain) {
    if (porcelain == null) {
      return null;
    }
    RemoteIdentityDeleteResponse.Builder builder = RemoteIdentityDeleteResponse.newBuilder();
    if (porcelain.getMeta() != null) {
      builder.setMeta(Plumbing.convertDeleteResponseMetadataToPlumbing(porcelain.getMeta()));
    }
    if (porcelain.getRateLimit() != null) {
      builder.setRateLimit(Plumbing.convertRateLimitMetadataToPlumbing(porcelain.getRateLimit()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.RemoteIdentityDeleteResponse>
      convertRepeatedRemoteIdentityDeleteResponseToPorcelain(
          Collection<RemoteIdentityDeleteResponse> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertRemoteIdentityDeleteResponseToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<RemoteIdentityDeleteResponse>
      convertRepeatedRemoteIdentityDeleteResponseToPlumbing(
          Collection<com.strongdm.api.RemoteIdentityDeleteResponse> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertRemoteIdentityDeleteResponseToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.RemoteIdentityGetResponse
      convertRemoteIdentityGetResponseToPorcelain(RemoteIdentityGetResponse plumbing) {
    com.strongdm.api.RemoteIdentityGetResponse porcelain =
        new com.strongdm.api.RemoteIdentityGetResponse();
    porcelain.setMeta(Plumbing.convertGetResponseMetadataToPorcelain(plumbing.getMeta()));
    porcelain.setRateLimit(Plumbing.convertRateLimitMetadataToPorcelain(plumbing.getRateLimit()));
    porcelain.setRemoteIdentity(
        Plumbing.convertRemoteIdentityToPorcelain(plumbing.getRemoteIdentity()));
    return porcelain;
  }

  public static RemoteIdentityGetResponse convertRemoteIdentityGetResponseToPlumbing(
      com.strongdm.api.RemoteIdentityGetResponse porcelain) {
    if (porcelain == null) {
      return null;
    }
    RemoteIdentityGetResponse.Builder builder = RemoteIdentityGetResponse.newBuilder();
    if (porcelain.getMeta() != null) {
      builder.setMeta(Plumbing.convertGetResponseMetadataToPlumbing(porcelain.getMeta()));
    }
    if (porcelain.getRateLimit() != null) {
      builder.setRateLimit(Plumbing.convertRateLimitMetadataToPlumbing(porcelain.getRateLimit()));
    }
    if (porcelain.getRemoteIdentity() != null) {
      builder.setRemoteIdentity(
          Plumbing.convertRemoteIdentityToPlumbing(porcelain.getRemoteIdentity()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.RemoteIdentityGetResponse>
      convertRepeatedRemoteIdentityGetResponseToPorcelain(
          Collection<RemoteIdentityGetResponse> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertRemoteIdentityGetResponseToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<RemoteIdentityGetResponse> convertRepeatedRemoteIdentityGetResponseToPlumbing(
      Collection<com.strongdm.api.RemoteIdentityGetResponse> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertRemoteIdentityGetResponseToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.RemoteIdentityGroup convertRemoteIdentityGroupToPorcelain(
      RemoteIdentityGroup plumbing) {
    com.strongdm.api.RemoteIdentityGroup porcelain = new com.strongdm.api.RemoteIdentityGroup();
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    return porcelain;
  }

  public static RemoteIdentityGroup convertRemoteIdentityGroupToPlumbing(
      com.strongdm.api.RemoteIdentityGroup porcelain) {
    if (porcelain == null) {
      return null;
    }
    RemoteIdentityGroup.Builder builder = RemoteIdentityGroup.newBuilder();
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.RemoteIdentityGroup>
      convertRepeatedRemoteIdentityGroupToPorcelain(Collection<RemoteIdentityGroup> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertRemoteIdentityGroupToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<RemoteIdentityGroup> convertRepeatedRemoteIdentityGroupToPlumbing(
      Collection<com.strongdm.api.RemoteIdentityGroup> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertRemoteIdentityGroupToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.RemoteIdentityGroupGetResponse
      convertRemoteIdentityGroupGetResponseToPorcelain(RemoteIdentityGroupGetResponse plumbing) {
    com.strongdm.api.RemoteIdentityGroupGetResponse porcelain =
        new com.strongdm.api.RemoteIdentityGroupGetResponse();
    porcelain.setMeta(Plumbing.convertGetResponseMetadataToPorcelain(plumbing.getMeta()));
    porcelain.setRateLimit(Plumbing.convertRateLimitMetadataToPorcelain(plumbing.getRateLimit()));
    porcelain.setRemoteIdentityGroup(
        Plumbing.convertRemoteIdentityGroupToPorcelain(plumbing.getRemoteIdentityGroup()));
    return porcelain;
  }

  public static RemoteIdentityGroupGetResponse convertRemoteIdentityGroupGetResponseToPlumbing(
      com.strongdm.api.RemoteIdentityGroupGetResponse porcelain) {
    if (porcelain == null) {
      return null;
    }
    RemoteIdentityGroupGetResponse.Builder builder = RemoteIdentityGroupGetResponse.newBuilder();
    if (porcelain.getMeta() != null) {
      builder.setMeta(Plumbing.convertGetResponseMetadataToPlumbing(porcelain.getMeta()));
    }
    if (porcelain.getRateLimit() != null) {
      builder.setRateLimit(Plumbing.convertRateLimitMetadataToPlumbing(porcelain.getRateLimit()));
    }
    if (porcelain.getRemoteIdentityGroup() != null) {
      builder.setRemoteIdentityGroup(
          Plumbing.convertRemoteIdentityGroupToPlumbing(porcelain.getRemoteIdentityGroup()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.RemoteIdentityGroupGetResponse>
      convertRepeatedRemoteIdentityGroupGetResponseToPorcelain(
          Collection<RemoteIdentityGroupGetResponse> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertRemoteIdentityGroupGetResponseToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<RemoteIdentityGroupGetResponse>
      convertRepeatedRemoteIdentityGroupGetResponseToPlumbing(
          Collection<com.strongdm.api.RemoteIdentityGroupGetResponse> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertRemoteIdentityGroupGetResponseToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.RemoteIdentityGroupHistory
      convertRemoteIdentityGroupHistoryToPorcelain(RemoteIdentityGroupHistory plumbing) {
    com.strongdm.api.RemoteIdentityGroupHistory porcelain =
        new com.strongdm.api.RemoteIdentityGroupHistory();
    porcelain.setActivityId((plumbing.getActivityId()));
    porcelain.setDeletedAt(Plumbing.convertTimestampToPorcelain(plumbing.getDeletedAt()));
    porcelain.setRemoteIdentityGroup(
        Plumbing.convertRemoteIdentityGroupToPorcelain(plumbing.getRemoteIdentityGroup()));
    porcelain.setTimestamp(Plumbing.convertTimestampToPorcelain(plumbing.getTimestamp()));
    return porcelain;
  }

  public static RemoteIdentityGroupHistory convertRemoteIdentityGroupHistoryToPlumbing(
      com.strongdm.api.RemoteIdentityGroupHistory porcelain) {
    if (porcelain == null) {
      return null;
    }
    RemoteIdentityGroupHistory.Builder builder = RemoteIdentityGroupHistory.newBuilder();
    if (porcelain.getActivityId() != null) {
      builder.setActivityId((porcelain.getActivityId()));
    }
    if (porcelain.getDeletedAt() != null) {
      builder.setDeletedAt(Plumbing.convertTimestampToPlumbing(porcelain.getDeletedAt()));
    }
    if (porcelain.getRemoteIdentityGroup() != null) {
      builder.setRemoteIdentityGroup(
          Plumbing.convertRemoteIdentityGroupToPlumbing(porcelain.getRemoteIdentityGroup()));
    }
    if (porcelain.getTimestamp() != null) {
      builder.setTimestamp(Plumbing.convertTimestampToPlumbing(porcelain.getTimestamp()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.RemoteIdentityGroupHistory>
      convertRepeatedRemoteIdentityGroupHistoryToPorcelain(
          Collection<RemoteIdentityGroupHistory> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertRemoteIdentityGroupHistoryToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<RemoteIdentityGroupHistory>
      convertRepeatedRemoteIdentityGroupHistoryToPlumbing(
          Collection<com.strongdm.api.RemoteIdentityGroupHistory> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertRemoteIdentityGroupHistoryToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.RemoteIdentityHistory convertRemoteIdentityHistoryToPorcelain(
      RemoteIdentityHistory plumbing) {
    com.strongdm.api.RemoteIdentityHistory porcelain = new com.strongdm.api.RemoteIdentityHistory();
    porcelain.setActivityId((plumbing.getActivityId()));
    porcelain.setDeletedAt(Plumbing.convertTimestampToPorcelain(plumbing.getDeletedAt()));
    porcelain.setRemoteIdentity(
        Plumbing.convertRemoteIdentityToPorcelain(plumbing.getRemoteIdentity()));
    porcelain.setTimestamp(Plumbing.convertTimestampToPorcelain(plumbing.getTimestamp()));
    return porcelain;
  }

  public static RemoteIdentityHistory convertRemoteIdentityHistoryToPlumbing(
      com.strongdm.api.RemoteIdentityHistory porcelain) {
    if (porcelain == null) {
      return null;
    }
    RemoteIdentityHistory.Builder builder = RemoteIdentityHistory.newBuilder();
    if (porcelain.getActivityId() != null) {
      builder.setActivityId((porcelain.getActivityId()));
    }
    if (porcelain.getDeletedAt() != null) {
      builder.setDeletedAt(Plumbing.convertTimestampToPlumbing(porcelain.getDeletedAt()));
    }
    if (porcelain.getRemoteIdentity() != null) {
      builder.setRemoteIdentity(
          Plumbing.convertRemoteIdentityToPlumbing(porcelain.getRemoteIdentity()));
    }
    if (porcelain.getTimestamp() != null) {
      builder.setTimestamp(Plumbing.convertTimestampToPlumbing(porcelain.getTimestamp()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.RemoteIdentityHistory>
      convertRepeatedRemoteIdentityHistoryToPorcelain(Collection<RemoteIdentityHistory> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertRemoteIdentityHistoryToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<RemoteIdentityHistory> convertRepeatedRemoteIdentityHistoryToPlumbing(
      Collection<com.strongdm.api.RemoteIdentityHistory> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertRemoteIdentityHistoryToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.RemoteIdentityUpdateResponse
      convertRemoteIdentityUpdateResponseToPorcelain(RemoteIdentityUpdateResponse plumbing) {
    com.strongdm.api.RemoteIdentityUpdateResponse porcelain =
        new com.strongdm.api.RemoteIdentityUpdateResponse();
    porcelain.setMeta(Plumbing.convertUpdateResponseMetadataToPorcelain(plumbing.getMeta()));
    porcelain.setRateLimit(Plumbing.convertRateLimitMetadataToPorcelain(plumbing.getRateLimit()));
    porcelain.setRemoteIdentity(
        Plumbing.convertRemoteIdentityToPorcelain(plumbing.getRemoteIdentity()));
    return porcelain;
  }

  public static RemoteIdentityUpdateResponse convertRemoteIdentityUpdateResponseToPlumbing(
      com.strongdm.api.RemoteIdentityUpdateResponse porcelain) {
    if (porcelain == null) {
      return null;
    }
    RemoteIdentityUpdateResponse.Builder builder = RemoteIdentityUpdateResponse.newBuilder();
    if (porcelain.getMeta() != null) {
      builder.setMeta(Plumbing.convertUpdateResponseMetadataToPlumbing(porcelain.getMeta()));
    }
    if (porcelain.getRateLimit() != null) {
      builder.setRateLimit(Plumbing.convertRateLimitMetadataToPlumbing(porcelain.getRateLimit()));
    }
    if (porcelain.getRemoteIdentity() != null) {
      builder.setRemoteIdentity(
          Plumbing.convertRemoteIdentityToPlumbing(porcelain.getRemoteIdentity()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.RemoteIdentityUpdateResponse>
      convertRepeatedRemoteIdentityUpdateResponseToPorcelain(
          Collection<RemoteIdentityUpdateResponse> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertRemoteIdentityUpdateResponseToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<RemoteIdentityUpdateResponse>
      convertRepeatedRemoteIdentityUpdateResponseToPlumbing(
          Collection<com.strongdm.api.RemoteIdentityUpdateResponse> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertRemoteIdentityUpdateResponseToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.ReplayChunk convertReplayChunkToPorcelain(ReplayChunk plumbing) {
    com.strongdm.api.ReplayChunk porcelain = new com.strongdm.api.ReplayChunk();
    porcelain.setData(Plumbing.convertBytesToPorcelain(plumbing.getData()));
    porcelain.setEvents(
        Plumbing.convertRepeatedReplayChunkEventToPorcelain(plumbing.getEventsList()));
    return porcelain;
  }

  public static ReplayChunk convertReplayChunkToPlumbing(com.strongdm.api.ReplayChunk porcelain) {
    if (porcelain == null) {
      return null;
    }
    ReplayChunk.Builder builder = ReplayChunk.newBuilder();
    if (porcelain.getData() != null) {
      builder.setData(Plumbing.convertBytesToPlumbing(porcelain.getData()));
    }
    builder.addAllEvents(Plumbing.convertRepeatedReplayChunkEventToPlumbing(porcelain.getEvents()));
    return builder.build();
  }

  public static List<com.strongdm.api.ReplayChunk> convertRepeatedReplayChunkToPorcelain(
      Collection<ReplayChunk> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertReplayChunkToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<ReplayChunk> convertRepeatedReplayChunkToPlumbing(
      Collection<com.strongdm.api.ReplayChunk> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertReplayChunkToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.ReplayChunkEvent convertReplayChunkEventToPorcelain(
      ReplayChunkEvent plumbing) {
    com.strongdm.api.ReplayChunkEvent porcelain = new com.strongdm.api.ReplayChunkEvent();
    porcelain.setData(Plumbing.convertBytesToPorcelain(plumbing.getData()));
    porcelain.setDuration(Plumbing.convertDurationToPorcelain(plumbing.getDuration()));
    return porcelain;
  }

  public static ReplayChunkEvent convertReplayChunkEventToPlumbing(
      com.strongdm.api.ReplayChunkEvent porcelain) {
    if (porcelain == null) {
      return null;
    }
    ReplayChunkEvent.Builder builder = ReplayChunkEvent.newBuilder();
    if (porcelain.getData() != null) {
      builder.setData(Plumbing.convertBytesToPlumbing(porcelain.getData()));
    }
    if (porcelain.getDuration() != null) {
      builder.setDuration(Plumbing.convertDurationToPlumbing(porcelain.getDuration()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.ReplayChunkEvent> convertRepeatedReplayChunkEventToPorcelain(
      Collection<ReplayChunkEvent> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertReplayChunkEventToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<ReplayChunkEvent> convertRepeatedReplayChunkEventToPlumbing(
      Collection<com.strongdm.api.ReplayChunkEvent> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertReplayChunkEventToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.Resource convertResourceToPorcelain(Resource plumbing) {
    if (plumbing == null) {
      return null;
    }
    if (plumbing.hasAks()) {
      return convertAKSToPorcelain(plumbing.getAks());
    }
    if (plumbing.hasAksBasicAuth()) {
      return convertAKSBasicAuthToPorcelain(plumbing.getAksBasicAuth());
    }
    if (plumbing.hasAksServiceAccount()) {
      return convertAKSServiceAccountToPorcelain(plumbing.getAksServiceAccount());
    }
    if (plumbing.hasAksServiceAccountUserImpersonation()) {
      return convertAKSServiceAccountUserImpersonationToPorcelain(
          plumbing.getAksServiceAccountUserImpersonation());
    }
    if (plumbing.hasAksUserImpersonation()) {
      return convertAKSUserImpersonationToPorcelain(plumbing.getAksUserImpersonation());
    }
    if (plumbing.hasAmazonEks()) {
      return convertAmazonEKSToPorcelain(plumbing.getAmazonEks());
    }
    if (plumbing.hasAmazonEksInstanceProfile()) {
      return convertAmazonEKSInstanceProfileToPorcelain(plumbing.getAmazonEksInstanceProfile());
    }
    if (plumbing.hasAmazonEksInstanceProfileUserImpersonation()) {
      return convertAmazonEKSInstanceProfileUserImpersonationToPorcelain(
          plumbing.getAmazonEksInstanceProfileUserImpersonation());
    }
    if (plumbing.hasAmazonEksUserImpersonation()) {
      return convertAmazonEKSUserImpersonationToPorcelain(plumbing.getAmazonEksUserImpersonation());
    }
    if (plumbing.hasAmazonEs()) {
      return convertAmazonESToPorcelain(plumbing.getAmazonEs());
    }
    if (plumbing.hasAmazonMqamqp091()) {
      return convertAmazonMQAMQP091ToPorcelain(plumbing.getAmazonMqamqp091());
    }
    if (plumbing.hasAthena()) {
      return convertAthenaToPorcelain(plumbing.getAthena());
    }
    if (plumbing.hasAuroraMysql()) {
      return convertAuroraMysqlToPorcelain(plumbing.getAuroraMysql());
    }
    if (plumbing.hasAuroraPostgres()) {
      return convertAuroraPostgresToPorcelain(plumbing.getAuroraPostgres());
    }
    if (plumbing.hasAws()) {
      return convertAWSToPorcelain(plumbing.getAws());
    }
    if (plumbing.hasAwsConsole()) {
      return convertAWSConsoleToPorcelain(plumbing.getAwsConsole());
    }
    if (plumbing.hasAwsConsoleStaticKeyPair()) {
      return convertAWSConsoleStaticKeyPairToPorcelain(plumbing.getAwsConsoleStaticKeyPair());
    }
    if (plumbing.hasAzure()) {
      return convertAzureToPorcelain(plumbing.getAzure());
    }
    if (plumbing.hasAzureCertificate()) {
      return convertAzureCertificateToPorcelain(plumbing.getAzureCertificate());
    }
    if (plumbing.hasAzureMysql()) {
      return convertAzureMysqlToPorcelain(plumbing.getAzureMysql());
    }
    if (plumbing.hasAzurePostgres()) {
      return convertAzurePostgresToPorcelain(plumbing.getAzurePostgres());
    }
    if (plumbing.hasBigQuery()) {
      return convertBigQueryToPorcelain(plumbing.getBigQuery());
    }
    if (plumbing.hasCassandra()) {
      return convertCassandraToPorcelain(plumbing.getCassandra());
    }
    if (plumbing.hasCitus()) {
      return convertCitusToPorcelain(plumbing.getCitus());
    }
    if (plumbing.hasClustrix()) {
      return convertClustrixToPorcelain(plumbing.getClustrix());
    }
    if (plumbing.hasCockroach()) {
      return convertCockroachToPorcelain(plumbing.getCockroach());
    }
    if (plumbing.hasDb2I()) {
      return convertDB2IToPorcelain(plumbing.getDb2I());
    }
    if (plumbing.hasDb2Luw()) {
      return convertDB2LUWToPorcelain(plumbing.getDb2Luw());
    }
    if (plumbing.hasDocumentDbHost()) {
      return convertDocumentDBHostToPorcelain(plumbing.getDocumentDbHost());
    }
    if (plumbing.hasDocumentDbReplicaSet()) {
      return convertDocumentDBReplicaSetToPorcelain(plumbing.getDocumentDbReplicaSet());
    }
    if (plumbing.hasDruid()) {
      return convertDruidToPorcelain(plumbing.getDruid());
    }
    if (plumbing.hasDynamoDb()) {
      return convertDynamoDBToPorcelain(plumbing.getDynamoDb());
    }
    if (plumbing.hasElastic()) {
      return convertElasticToPorcelain(plumbing.getElastic());
    }
    if (plumbing.hasElasticacheRedis()) {
      return convertElasticacheRedisToPorcelain(plumbing.getElasticacheRedis());
    }
    if (plumbing.hasGcp()) {
      return convertGCPToPorcelain(plumbing.getGcp());
    }
    if (plumbing.hasGoogleGke()) {
      return convertGoogleGKEToPorcelain(plumbing.getGoogleGke());
    }
    if (plumbing.hasGoogleGkeUserImpersonation()) {
      return convertGoogleGKEUserImpersonationToPorcelain(plumbing.getGoogleGkeUserImpersonation());
    }
    if (plumbing.hasGreenplum()) {
      return convertGreenplumToPorcelain(plumbing.getGreenplum());
    }
    if (plumbing.hasHttpAuth()) {
      return convertHTTPAuthToPorcelain(plumbing.getHttpAuth());
    }
    if (plumbing.hasHttpBasicAuth()) {
      return convertHTTPBasicAuthToPorcelain(plumbing.getHttpBasicAuth());
    }
    if (plumbing.hasHttpNoAuth()) {
      return convertHTTPNoAuthToPorcelain(plumbing.getHttpNoAuth());
    }
    if (plumbing.hasKubernetes()) {
      return convertKubernetesToPorcelain(plumbing.getKubernetes());
    }
    if (plumbing.hasKubernetesBasicAuth()) {
      return convertKubernetesBasicAuthToPorcelain(plumbing.getKubernetesBasicAuth());
    }
    if (plumbing.hasKubernetesServiceAccount()) {
      return convertKubernetesServiceAccountToPorcelain(plumbing.getKubernetesServiceAccount());
    }
    if (plumbing.hasKubernetesServiceAccountUserImpersonation()) {
      return convertKubernetesServiceAccountUserImpersonationToPorcelain(
          plumbing.getKubernetesServiceAccountUserImpersonation());
    }
    if (plumbing.hasKubernetesUserImpersonation()) {
      return convertKubernetesUserImpersonationToPorcelain(
          plumbing.getKubernetesUserImpersonation());
    }
    if (plumbing.hasMaria()) {
      return convertMariaToPorcelain(plumbing.getMaria());
    }
    if (plumbing.hasMemcached()) {
      return convertMemcachedToPorcelain(plumbing.getMemcached());
    }
    if (plumbing.hasMemsql()) {
      return convertMemsqlToPorcelain(plumbing.getMemsql());
    }
    if (plumbing.hasMongoHost()) {
      return convertMongoHostToPorcelain(plumbing.getMongoHost());
    }
    if (plumbing.hasMongoLegacyHost()) {
      return convertMongoLegacyHostToPorcelain(plumbing.getMongoLegacyHost());
    }
    if (plumbing.hasMongoLegacyReplicaset()) {
      return convertMongoLegacyReplicasetToPorcelain(plumbing.getMongoLegacyReplicaset());
    }
    if (plumbing.hasMongoReplicaSet()) {
      return convertMongoReplicaSetToPorcelain(plumbing.getMongoReplicaSet());
    }
    if (plumbing.hasMongoShardedCluster()) {
      return convertMongoShardedClusterToPorcelain(plumbing.getMongoShardedCluster());
    }
    if (plumbing.hasMtlsMysql()) {
      return convertMTLSMysqlToPorcelain(plumbing.getMtlsMysql());
    }
    if (plumbing.hasMtlsPostgres()) {
      return convertMTLSPostgresToPorcelain(plumbing.getMtlsPostgres());
    }
    if (plumbing.hasMysql()) {
      return convertMysqlToPorcelain(plumbing.getMysql());
    }
    if (plumbing.hasNeptune()) {
      return convertNeptuneToPorcelain(plumbing.getNeptune());
    }
    if (plumbing.hasNeptuneIam()) {
      return convertNeptuneIAMToPorcelain(plumbing.getNeptuneIam());
    }
    if (plumbing.hasOracle()) {
      return convertOracleToPorcelain(plumbing.getOracle());
    }
    if (plumbing.hasPostgres()) {
      return convertPostgresToPorcelain(plumbing.getPostgres());
    }
    if (plumbing.hasPresto()) {
      return convertPrestoToPorcelain(plumbing.getPresto());
    }
    if (plumbing.hasRabbitMqamqp091()) {
      return convertRabbitMQAMQP091ToPorcelain(plumbing.getRabbitMqamqp091());
    }
    if (plumbing.hasRawTcp()) {
      return convertRawTCPToPorcelain(plumbing.getRawTcp());
    }
    if (plumbing.hasRdp()) {
      return convertRDPToPorcelain(plumbing.getRdp());
    }
    if (plumbing.hasRedis()) {
      return convertRedisToPorcelain(plumbing.getRedis());
    }
    if (plumbing.hasRedshift()) {
      return convertRedshiftToPorcelain(plumbing.getRedshift());
    }
    if (plumbing.hasSingleStore()) {
      return convertSingleStoreToPorcelain(plumbing.getSingleStore());
    }
    if (plumbing.hasSnowflake()) {
      return convertSnowflakeToPorcelain(plumbing.getSnowflake());
    }
    if (plumbing.hasSnowsight()) {
      return convertSnowsightToPorcelain(plumbing.getSnowsight());
    }
    if (plumbing.hasSqlServer()) {
      return convertSQLServerToPorcelain(plumbing.getSqlServer());
    }
    if (plumbing.hasSsh()) {
      return convertSSHToPorcelain(plumbing.getSsh());
    }
    if (plumbing.hasSshCert()) {
      return convertSSHCertToPorcelain(plumbing.getSshCert());
    }
    if (plumbing.hasSshCustomerKey()) {
      return convertSSHCustomerKeyToPorcelain(plumbing.getSshCustomerKey());
    }
    if (plumbing.hasSybase()) {
      return convertSybaseToPorcelain(plumbing.getSybase());
    }
    if (plumbing.hasSybaseIq()) {
      return convertSybaseIQToPorcelain(plumbing.getSybaseIq());
    }
    if (plumbing.hasTeradata()) {
      return convertTeradataToPorcelain(plumbing.getTeradata());
    }
    if (plumbing.hasTrino()) {
      return convertTrinoToPorcelain(plumbing.getTrino());
    }
    throw new UnknownException("unknown polymorphic type, please upgrade your SDK");
  }

  public static Resource convertResourceToPlumbing(com.strongdm.api.Resource porcelain) {
    if (porcelain == null) {
      return null;
    }
    if (porcelain instanceof com.strongdm.api.AKS) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setAks(convertAKSToPlumbing((com.strongdm.api.AKS) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.AKSBasicAuth) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setAksBasicAuth(
          convertAKSBasicAuthToPlumbing((com.strongdm.api.AKSBasicAuth) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.AKSServiceAccount) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setAksServiceAccount(
          convertAKSServiceAccountToPlumbing((com.strongdm.api.AKSServiceAccount) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.AKSServiceAccountUserImpersonation) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setAksServiceAccountUserImpersonation(
          convertAKSServiceAccountUserImpersonationToPlumbing(
              (com.strongdm.api.AKSServiceAccountUserImpersonation) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.AKSUserImpersonation) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setAksUserImpersonation(
          convertAKSUserImpersonationToPlumbing((com.strongdm.api.AKSUserImpersonation) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.AmazonEKS) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setAmazonEks(convertAmazonEKSToPlumbing((com.strongdm.api.AmazonEKS) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.AmazonEKSInstanceProfile) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setAmazonEksInstanceProfile(
          convertAmazonEKSInstanceProfileToPlumbing(
              (com.strongdm.api.AmazonEKSInstanceProfile) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.AmazonEKSInstanceProfileUserImpersonation) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setAmazonEksInstanceProfileUserImpersonation(
          convertAmazonEKSInstanceProfileUserImpersonationToPlumbing(
              (com.strongdm.api.AmazonEKSInstanceProfileUserImpersonation) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.AmazonEKSUserImpersonation) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setAmazonEksUserImpersonation(
          convertAmazonEKSUserImpersonationToPlumbing(
              (com.strongdm.api.AmazonEKSUserImpersonation) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.AmazonES) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setAmazonEs(convertAmazonESToPlumbing((com.strongdm.api.AmazonES) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.AmazonMQAMQP091) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setAmazonMqamqp091(
          convertAmazonMQAMQP091ToPlumbing((com.strongdm.api.AmazonMQAMQP091) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.Athena) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setAthena(convertAthenaToPlumbing((com.strongdm.api.Athena) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.AuroraMysql) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setAuroraMysql(
          convertAuroraMysqlToPlumbing((com.strongdm.api.AuroraMysql) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.AuroraPostgres) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setAuroraPostgres(
          convertAuroraPostgresToPlumbing((com.strongdm.api.AuroraPostgres) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.AWS) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setAws(convertAWSToPlumbing((com.strongdm.api.AWS) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.AWSConsole) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setAwsConsole(convertAWSConsoleToPlumbing((com.strongdm.api.AWSConsole) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.AWSConsoleStaticKeyPair) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setAwsConsoleStaticKeyPair(
          convertAWSConsoleStaticKeyPairToPlumbing(
              (com.strongdm.api.AWSConsoleStaticKeyPair) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.Azure) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setAzure(convertAzureToPlumbing((com.strongdm.api.Azure) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.AzureCertificate) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setAzureCertificate(
          convertAzureCertificateToPlumbing((com.strongdm.api.AzureCertificate) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.AzureMysql) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setAzureMysql(convertAzureMysqlToPlumbing((com.strongdm.api.AzureMysql) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.AzurePostgres) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setAzurePostgres(
          convertAzurePostgresToPlumbing((com.strongdm.api.AzurePostgres) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.BigQuery) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setBigQuery(convertBigQueryToPlumbing((com.strongdm.api.BigQuery) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.Cassandra) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setCassandra(convertCassandraToPlumbing((com.strongdm.api.Cassandra) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.Citus) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setCitus(convertCitusToPlumbing((com.strongdm.api.Citus) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.Clustrix) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setClustrix(convertClustrixToPlumbing((com.strongdm.api.Clustrix) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.Cockroach) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setCockroach(convertCockroachToPlumbing((com.strongdm.api.Cockroach) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.DB2I) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setDb2I(convertDB2IToPlumbing((com.strongdm.api.DB2I) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.DB2LUW) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setDb2Luw(convertDB2LUWToPlumbing((com.strongdm.api.DB2LUW) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.DocumentDBHost) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setDocumentDbHost(
          convertDocumentDBHostToPlumbing((com.strongdm.api.DocumentDBHost) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.DocumentDBReplicaSet) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setDocumentDbReplicaSet(
          convertDocumentDBReplicaSetToPlumbing((com.strongdm.api.DocumentDBReplicaSet) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.Druid) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setDruid(convertDruidToPlumbing((com.strongdm.api.Druid) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.DynamoDB) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setDynamoDb(convertDynamoDBToPlumbing((com.strongdm.api.DynamoDB) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.Elastic) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setElastic(convertElasticToPlumbing((com.strongdm.api.Elastic) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.ElasticacheRedis) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setElasticacheRedis(
          convertElasticacheRedisToPlumbing((com.strongdm.api.ElasticacheRedis) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.GCP) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setGcp(convertGCPToPlumbing((com.strongdm.api.GCP) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.GoogleGKE) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setGoogleGke(convertGoogleGKEToPlumbing((com.strongdm.api.GoogleGKE) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.GoogleGKEUserImpersonation) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setGoogleGkeUserImpersonation(
          convertGoogleGKEUserImpersonationToPlumbing(
              (com.strongdm.api.GoogleGKEUserImpersonation) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.Greenplum) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setGreenplum(convertGreenplumToPlumbing((com.strongdm.api.Greenplum) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.HTTPAuth) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setHttpAuth(convertHTTPAuthToPlumbing((com.strongdm.api.HTTPAuth) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.HTTPBasicAuth) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setHttpBasicAuth(
          convertHTTPBasicAuthToPlumbing((com.strongdm.api.HTTPBasicAuth) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.HTTPNoAuth) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setHttpNoAuth(convertHTTPNoAuthToPlumbing((com.strongdm.api.HTTPNoAuth) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.Kubernetes) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setKubernetes(convertKubernetesToPlumbing((com.strongdm.api.Kubernetes) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.KubernetesBasicAuth) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setKubernetesBasicAuth(
          convertKubernetesBasicAuthToPlumbing((com.strongdm.api.KubernetesBasicAuth) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.KubernetesServiceAccount) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setKubernetesServiceAccount(
          convertKubernetesServiceAccountToPlumbing(
              (com.strongdm.api.KubernetesServiceAccount) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.KubernetesServiceAccountUserImpersonation) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setKubernetesServiceAccountUserImpersonation(
          convertKubernetesServiceAccountUserImpersonationToPlumbing(
              (com.strongdm.api.KubernetesServiceAccountUserImpersonation) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.KubernetesUserImpersonation) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setKubernetesUserImpersonation(
          convertKubernetesUserImpersonationToPlumbing(
              (com.strongdm.api.KubernetesUserImpersonation) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.Maria) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setMaria(convertMariaToPlumbing((com.strongdm.api.Maria) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.Memcached) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setMemcached(convertMemcachedToPlumbing((com.strongdm.api.Memcached) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.Memsql) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setMemsql(convertMemsqlToPlumbing((com.strongdm.api.Memsql) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.MongoHost) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setMongoHost(convertMongoHostToPlumbing((com.strongdm.api.MongoHost) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.MongoLegacyHost) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setMongoLegacyHost(
          convertMongoLegacyHostToPlumbing((com.strongdm.api.MongoLegacyHost) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.MongoLegacyReplicaset) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setMongoLegacyReplicaset(
          convertMongoLegacyReplicasetToPlumbing(
              (com.strongdm.api.MongoLegacyReplicaset) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.MongoReplicaSet) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setMongoReplicaSet(
          convertMongoReplicaSetToPlumbing((com.strongdm.api.MongoReplicaSet) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.MongoShardedCluster) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setMongoShardedCluster(
          convertMongoShardedClusterToPlumbing((com.strongdm.api.MongoShardedCluster) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.MTLSMysql) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setMtlsMysql(convertMTLSMysqlToPlumbing((com.strongdm.api.MTLSMysql) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.MTLSPostgres) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setMtlsPostgres(
          convertMTLSPostgresToPlumbing((com.strongdm.api.MTLSPostgres) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.Mysql) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setMysql(convertMysqlToPlumbing((com.strongdm.api.Mysql) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.Neptune) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setNeptune(convertNeptuneToPlumbing((com.strongdm.api.Neptune) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.NeptuneIAM) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setNeptuneIam(convertNeptuneIAMToPlumbing((com.strongdm.api.NeptuneIAM) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.Oracle) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setOracle(convertOracleToPlumbing((com.strongdm.api.Oracle) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.Postgres) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setPostgres(convertPostgresToPlumbing((com.strongdm.api.Postgres) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.Presto) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setPresto(convertPrestoToPlumbing((com.strongdm.api.Presto) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.RabbitMQAMQP091) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setRabbitMqamqp091(
          convertRabbitMQAMQP091ToPlumbing((com.strongdm.api.RabbitMQAMQP091) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.RawTCP) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setRawTcp(convertRawTCPToPlumbing((com.strongdm.api.RawTCP) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.RDP) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setRdp(convertRDPToPlumbing((com.strongdm.api.RDP) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.Redis) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setRedis(convertRedisToPlumbing((com.strongdm.api.Redis) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.Redshift) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setRedshift(convertRedshiftToPlumbing((com.strongdm.api.Redshift) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.SingleStore) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setSingleStore(
          convertSingleStoreToPlumbing((com.strongdm.api.SingleStore) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.Snowflake) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setSnowflake(convertSnowflakeToPlumbing((com.strongdm.api.Snowflake) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.Snowsight) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setSnowsight(convertSnowsightToPlumbing((com.strongdm.api.Snowsight) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.SQLServer) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setSqlServer(convertSQLServerToPlumbing((com.strongdm.api.SQLServer) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.SSH) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setSsh(convertSSHToPlumbing((com.strongdm.api.SSH) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.SSHCert) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setSshCert(convertSSHCertToPlumbing((com.strongdm.api.SSHCert) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.SSHCustomerKey) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setSshCustomerKey(
          convertSSHCustomerKeyToPlumbing((com.strongdm.api.SSHCustomerKey) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.Sybase) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setSybase(convertSybaseToPlumbing((com.strongdm.api.Sybase) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.SybaseIQ) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setSybaseIq(convertSybaseIQToPlumbing((com.strongdm.api.SybaseIQ) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.Teradata) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setTeradata(convertTeradataToPlumbing((com.strongdm.api.Teradata) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.Trino) {
      Resource.Builder builder = Resource.newBuilder();
      builder.setTrino(convertTrinoToPlumbing((com.strongdm.api.Trino) porcelain));
      return builder.build();
    }
    return null;
  }

  public static List<com.strongdm.api.Resource> convertRepeatedResourceToPorcelain(
      Collection<Resource> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertResourceToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<Resource> convertRepeatedResourceToPlumbing(
      Collection<com.strongdm.api.Resource> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertResourceToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.ResourceCreateResponse convertResourceCreateResponseToPorcelain(
      ResourceCreateResponse plumbing) {
    com.strongdm.api.ResourceCreateResponse porcelain =
        new com.strongdm.api.ResourceCreateResponse();
    porcelain.setMeta(Plumbing.convertCreateResponseMetadataToPorcelain(plumbing.getMeta()));
    porcelain.setRateLimit(Plumbing.convertRateLimitMetadataToPorcelain(plumbing.getRateLimit()));
    porcelain.setResource(Plumbing.convertResourceToPorcelain(plumbing.getResource()));
    return porcelain;
  }

  public static ResourceCreateResponse convertResourceCreateResponseToPlumbing(
      com.strongdm.api.ResourceCreateResponse porcelain) {
    if (porcelain == null) {
      return null;
    }
    ResourceCreateResponse.Builder builder = ResourceCreateResponse.newBuilder();
    if (porcelain.getMeta() != null) {
      builder.setMeta(Plumbing.convertCreateResponseMetadataToPlumbing(porcelain.getMeta()));
    }
    if (porcelain.getRateLimit() != null) {
      builder.setRateLimit(Plumbing.convertRateLimitMetadataToPlumbing(porcelain.getRateLimit()));
    }
    if (porcelain.getResource() != null) {
      builder.setResource(Plumbing.convertResourceToPlumbing(porcelain.getResource()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.ResourceCreateResponse>
      convertRepeatedResourceCreateResponseToPorcelain(
          Collection<ResourceCreateResponse> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertResourceCreateResponseToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<ResourceCreateResponse> convertRepeatedResourceCreateResponseToPlumbing(
      Collection<com.strongdm.api.ResourceCreateResponse> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertResourceCreateResponseToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.ResourceDeleteResponse convertResourceDeleteResponseToPorcelain(
      ResourceDeleteResponse plumbing) {
    com.strongdm.api.ResourceDeleteResponse porcelain =
        new com.strongdm.api.ResourceDeleteResponse();
    porcelain.setMeta(Plumbing.convertDeleteResponseMetadataToPorcelain(plumbing.getMeta()));
    porcelain.setRateLimit(Plumbing.convertRateLimitMetadataToPorcelain(plumbing.getRateLimit()));
    return porcelain;
  }

  public static ResourceDeleteResponse convertResourceDeleteResponseToPlumbing(
      com.strongdm.api.ResourceDeleteResponse porcelain) {
    if (porcelain == null) {
      return null;
    }
    ResourceDeleteResponse.Builder builder = ResourceDeleteResponse.newBuilder();
    if (porcelain.getMeta() != null) {
      builder.setMeta(Plumbing.convertDeleteResponseMetadataToPlumbing(porcelain.getMeta()));
    }
    if (porcelain.getRateLimit() != null) {
      builder.setRateLimit(Plumbing.convertRateLimitMetadataToPlumbing(porcelain.getRateLimit()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.ResourceDeleteResponse>
      convertRepeatedResourceDeleteResponseToPorcelain(
          Collection<ResourceDeleteResponse> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertResourceDeleteResponseToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<ResourceDeleteResponse> convertRepeatedResourceDeleteResponseToPlumbing(
      Collection<com.strongdm.api.ResourceDeleteResponse> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertResourceDeleteResponseToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.ResourceGetResponse convertResourceGetResponseToPorcelain(
      ResourceGetResponse plumbing) {
    com.strongdm.api.ResourceGetResponse porcelain = new com.strongdm.api.ResourceGetResponse();
    porcelain.setMeta(Plumbing.convertGetResponseMetadataToPorcelain(plumbing.getMeta()));
    porcelain.setRateLimit(Plumbing.convertRateLimitMetadataToPorcelain(plumbing.getRateLimit()));
    porcelain.setResource(Plumbing.convertResourceToPorcelain(plumbing.getResource()));
    return porcelain;
  }

  public static ResourceGetResponse convertResourceGetResponseToPlumbing(
      com.strongdm.api.ResourceGetResponse porcelain) {
    if (porcelain == null) {
      return null;
    }
    ResourceGetResponse.Builder builder = ResourceGetResponse.newBuilder();
    if (porcelain.getMeta() != null) {
      builder.setMeta(Plumbing.convertGetResponseMetadataToPlumbing(porcelain.getMeta()));
    }
    if (porcelain.getRateLimit() != null) {
      builder.setRateLimit(Plumbing.convertRateLimitMetadataToPlumbing(porcelain.getRateLimit()));
    }
    if (porcelain.getResource() != null) {
      builder.setResource(Plumbing.convertResourceToPlumbing(porcelain.getResource()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.ResourceGetResponse>
      convertRepeatedResourceGetResponseToPorcelain(Collection<ResourceGetResponse> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertResourceGetResponseToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<ResourceGetResponse> convertRepeatedResourceGetResponseToPlumbing(
      Collection<com.strongdm.api.ResourceGetResponse> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertResourceGetResponseToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.ResourceHistory convertResourceHistoryToPorcelain(
      ResourceHistory plumbing) {
    com.strongdm.api.ResourceHistory porcelain = new com.strongdm.api.ResourceHistory();
    porcelain.setActivityId((plumbing.getActivityId()));
    porcelain.setDeletedAt(Plumbing.convertTimestampToPorcelain(plumbing.getDeletedAt()));
    porcelain.setResource(Plumbing.convertResourceToPorcelain(plumbing.getResource()));
    porcelain.setTimestamp(Plumbing.convertTimestampToPorcelain(plumbing.getTimestamp()));
    return porcelain;
  }

  public static ResourceHistory convertResourceHistoryToPlumbing(
      com.strongdm.api.ResourceHistory porcelain) {
    if (porcelain == null) {
      return null;
    }
    ResourceHistory.Builder builder = ResourceHistory.newBuilder();
    if (porcelain.getActivityId() != null) {
      builder.setActivityId((porcelain.getActivityId()));
    }
    if (porcelain.getDeletedAt() != null) {
      builder.setDeletedAt(Plumbing.convertTimestampToPlumbing(porcelain.getDeletedAt()));
    }
    if (porcelain.getResource() != null) {
      builder.setResource(Plumbing.convertResourceToPlumbing(porcelain.getResource()));
    }
    if (porcelain.getTimestamp() != null) {
      builder.setTimestamp(Plumbing.convertTimestampToPlumbing(porcelain.getTimestamp()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.ResourceHistory> convertRepeatedResourceHistoryToPorcelain(
      Collection<ResourceHistory> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertResourceHistoryToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<ResourceHistory> convertRepeatedResourceHistoryToPlumbing(
      Collection<com.strongdm.api.ResourceHistory> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertResourceHistoryToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.ResourceUpdateResponse convertResourceUpdateResponseToPorcelain(
      ResourceUpdateResponse plumbing) {
    com.strongdm.api.ResourceUpdateResponse porcelain =
        new com.strongdm.api.ResourceUpdateResponse();
    porcelain.setMeta(Plumbing.convertUpdateResponseMetadataToPorcelain(plumbing.getMeta()));
    porcelain.setRateLimit(Plumbing.convertRateLimitMetadataToPorcelain(plumbing.getRateLimit()));
    porcelain.setResource(Plumbing.convertResourceToPorcelain(plumbing.getResource()));
    return porcelain;
  }

  public static ResourceUpdateResponse convertResourceUpdateResponseToPlumbing(
      com.strongdm.api.ResourceUpdateResponse porcelain) {
    if (porcelain == null) {
      return null;
    }
    ResourceUpdateResponse.Builder builder = ResourceUpdateResponse.newBuilder();
    if (porcelain.getMeta() != null) {
      builder.setMeta(Plumbing.convertUpdateResponseMetadataToPlumbing(porcelain.getMeta()));
    }
    if (porcelain.getRateLimit() != null) {
      builder.setRateLimit(Plumbing.convertRateLimitMetadataToPlumbing(porcelain.getRateLimit()));
    }
    if (porcelain.getResource() != null) {
      builder.setResource(Plumbing.convertResourceToPlumbing(porcelain.getResource()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.ResourceUpdateResponse>
      convertRepeatedResourceUpdateResponseToPorcelain(
          Collection<ResourceUpdateResponse> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertResourceUpdateResponseToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<ResourceUpdateResponse> convertRepeatedResourceUpdateResponseToPlumbing(
      Collection<com.strongdm.api.ResourceUpdateResponse> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertResourceUpdateResponseToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.Role convertRoleToPorcelain(Role plumbing) {
    com.strongdm.api.Role porcelain = new com.strongdm.api.Role();
    porcelain.setAccessRules(Plumbing.convertAccessRulesToPorcelain(plumbing.getAccessRules()));
    porcelain.setId((plumbing.getId()));
    porcelain.setManagedBy((plumbing.getManagedBy()));
    porcelain.setName((plumbing.getName()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    return porcelain;
  }

  public static Role convertRoleToPlumbing(com.strongdm.api.Role porcelain) {
    if (porcelain == null) {
      return null;
    }
    Role.Builder builder = Role.newBuilder();
    if (porcelain.getAccessRules() != null) {
      builder.setAccessRules(Plumbing.convertAccessRulesToPlumbing(porcelain.getAccessRules()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getManagedBy() != null) {
      builder.setManagedBy((porcelain.getManagedBy()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.Role> convertRepeatedRoleToPorcelain(
      Collection<Role> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertRoleToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<Role> convertRepeatedRoleToPlumbing(
      Collection<com.strongdm.api.Role> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertRoleToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.RoleCreateResponse convertRoleCreateResponseToPorcelain(
      RoleCreateResponse plumbing) {
    com.strongdm.api.RoleCreateResponse porcelain = new com.strongdm.api.RoleCreateResponse();
    porcelain.setMeta(Plumbing.convertCreateResponseMetadataToPorcelain(plumbing.getMeta()));
    porcelain.setRateLimit(Plumbing.convertRateLimitMetadataToPorcelain(plumbing.getRateLimit()));
    porcelain.setRole(Plumbing.convertRoleToPorcelain(plumbing.getRole()));
    return porcelain;
  }

  public static RoleCreateResponse convertRoleCreateResponseToPlumbing(
      com.strongdm.api.RoleCreateResponse porcelain) {
    if (porcelain == null) {
      return null;
    }
    RoleCreateResponse.Builder builder = RoleCreateResponse.newBuilder();
    if (porcelain.getMeta() != null) {
      builder.setMeta(Plumbing.convertCreateResponseMetadataToPlumbing(porcelain.getMeta()));
    }
    if (porcelain.getRateLimit() != null) {
      builder.setRateLimit(Plumbing.convertRateLimitMetadataToPlumbing(porcelain.getRateLimit()));
    }
    if (porcelain.getRole() != null) {
      builder.setRole(Plumbing.convertRoleToPlumbing(porcelain.getRole()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.RoleCreateResponse>
      convertRepeatedRoleCreateResponseToPorcelain(Collection<RoleCreateResponse> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertRoleCreateResponseToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<RoleCreateResponse> convertRepeatedRoleCreateResponseToPlumbing(
      Collection<com.strongdm.api.RoleCreateResponse> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertRoleCreateResponseToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.RoleDeleteResponse convertRoleDeleteResponseToPorcelain(
      RoleDeleteResponse plumbing) {
    com.strongdm.api.RoleDeleteResponse porcelain = new com.strongdm.api.RoleDeleteResponse();
    porcelain.setMeta(Plumbing.convertDeleteResponseMetadataToPorcelain(plumbing.getMeta()));
    porcelain.setRateLimit(Plumbing.convertRateLimitMetadataToPorcelain(plumbing.getRateLimit()));
    return porcelain;
  }

  public static RoleDeleteResponse convertRoleDeleteResponseToPlumbing(
      com.strongdm.api.RoleDeleteResponse porcelain) {
    if (porcelain == null) {
      return null;
    }
    RoleDeleteResponse.Builder builder = RoleDeleteResponse.newBuilder();
    if (porcelain.getMeta() != null) {
      builder.setMeta(Plumbing.convertDeleteResponseMetadataToPlumbing(porcelain.getMeta()));
    }
    if (porcelain.getRateLimit() != null) {
      builder.setRateLimit(Plumbing.convertRateLimitMetadataToPlumbing(porcelain.getRateLimit()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.RoleDeleteResponse>
      convertRepeatedRoleDeleteResponseToPorcelain(Collection<RoleDeleteResponse> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertRoleDeleteResponseToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<RoleDeleteResponse> convertRepeatedRoleDeleteResponseToPlumbing(
      Collection<com.strongdm.api.RoleDeleteResponse> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertRoleDeleteResponseToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.RoleGetResponse convertRoleGetResponseToPorcelain(
      RoleGetResponse plumbing) {
    com.strongdm.api.RoleGetResponse porcelain = new com.strongdm.api.RoleGetResponse();
    porcelain.setMeta(Plumbing.convertGetResponseMetadataToPorcelain(plumbing.getMeta()));
    porcelain.setRateLimit(Plumbing.convertRateLimitMetadataToPorcelain(plumbing.getRateLimit()));
    porcelain.setRole(Plumbing.convertRoleToPorcelain(plumbing.getRole()));
    return porcelain;
  }

  public static RoleGetResponse convertRoleGetResponseToPlumbing(
      com.strongdm.api.RoleGetResponse porcelain) {
    if (porcelain == null) {
      return null;
    }
    RoleGetResponse.Builder builder = RoleGetResponse.newBuilder();
    if (porcelain.getMeta() != null) {
      builder.setMeta(Plumbing.convertGetResponseMetadataToPlumbing(porcelain.getMeta()));
    }
    if (porcelain.getRateLimit() != null) {
      builder.setRateLimit(Plumbing.convertRateLimitMetadataToPlumbing(porcelain.getRateLimit()));
    }
    if (porcelain.getRole() != null) {
      builder.setRole(Plumbing.convertRoleToPlumbing(porcelain.getRole()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.RoleGetResponse> convertRepeatedRoleGetResponseToPorcelain(
      Collection<RoleGetResponse> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertRoleGetResponseToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<RoleGetResponse> convertRepeatedRoleGetResponseToPlumbing(
      Collection<com.strongdm.api.RoleGetResponse> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertRoleGetResponseToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.RoleHistory convertRoleHistoryToPorcelain(RoleHistory plumbing) {
    com.strongdm.api.RoleHistory porcelain = new com.strongdm.api.RoleHistory();
    porcelain.setActivityId((plumbing.getActivityId()));
    porcelain.setDeletedAt(Plumbing.convertTimestampToPorcelain(plumbing.getDeletedAt()));
    porcelain.setRole(Plumbing.convertRoleToPorcelain(plumbing.getRole()));
    porcelain.setTimestamp(Plumbing.convertTimestampToPorcelain(plumbing.getTimestamp()));
    return porcelain;
  }

  public static RoleHistory convertRoleHistoryToPlumbing(com.strongdm.api.RoleHistory porcelain) {
    if (porcelain == null) {
      return null;
    }
    RoleHistory.Builder builder = RoleHistory.newBuilder();
    if (porcelain.getActivityId() != null) {
      builder.setActivityId((porcelain.getActivityId()));
    }
    if (porcelain.getDeletedAt() != null) {
      builder.setDeletedAt(Plumbing.convertTimestampToPlumbing(porcelain.getDeletedAt()));
    }
    if (porcelain.getRole() != null) {
      builder.setRole(Plumbing.convertRoleToPlumbing(porcelain.getRole()));
    }
    if (porcelain.getTimestamp() != null) {
      builder.setTimestamp(Plumbing.convertTimestampToPlumbing(porcelain.getTimestamp()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.RoleHistory> convertRepeatedRoleHistoryToPorcelain(
      Collection<RoleHistory> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertRoleHistoryToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<RoleHistory> convertRepeatedRoleHistoryToPlumbing(
      Collection<com.strongdm.api.RoleHistory> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertRoleHistoryToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.RoleResource convertRoleResourceToPorcelain(
      RoleResource plumbing) {
    com.strongdm.api.RoleResource porcelain = new com.strongdm.api.RoleResource();
    porcelain.setGrantedAt(Plumbing.convertTimestampToPorcelain(plumbing.getGrantedAt()));
    porcelain.setResourceId((plumbing.getResourceId()));
    porcelain.setRoleId((plumbing.getRoleId()));
    return porcelain;
  }

  public static RoleResource convertRoleResourceToPlumbing(
      com.strongdm.api.RoleResource porcelain) {
    if (porcelain == null) {
      return null;
    }
    RoleResource.Builder builder = RoleResource.newBuilder();
    if (porcelain.getGrantedAt() != null) {
      builder.setGrantedAt(Plumbing.convertTimestampToPlumbing(porcelain.getGrantedAt()));
    }
    if (porcelain.getResourceId() != null) {
      builder.setResourceId((porcelain.getResourceId()));
    }
    if (porcelain.getRoleId() != null) {
      builder.setRoleId((porcelain.getRoleId()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.RoleResource> convertRepeatedRoleResourceToPorcelain(
      Collection<RoleResource> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertRoleResourceToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<RoleResource> convertRepeatedRoleResourceToPlumbing(
      Collection<com.strongdm.api.RoleResource> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertRoleResourceToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.RoleResourceHistory convertRoleResourceHistoryToPorcelain(
      RoleResourceHistory plumbing) {
    com.strongdm.api.RoleResourceHistory porcelain = new com.strongdm.api.RoleResourceHistory();
    porcelain.setActivityId((plumbing.getActivityId()));
    porcelain.setDeletedAt(Plumbing.convertTimestampToPorcelain(plumbing.getDeletedAt()));
    porcelain.setRoleResource(Plumbing.convertRoleResourceToPorcelain(plumbing.getRoleResource()));
    porcelain.setTimestamp(Plumbing.convertTimestampToPorcelain(plumbing.getTimestamp()));
    return porcelain;
  }

  public static RoleResourceHistory convertRoleResourceHistoryToPlumbing(
      com.strongdm.api.RoleResourceHistory porcelain) {
    if (porcelain == null) {
      return null;
    }
    RoleResourceHistory.Builder builder = RoleResourceHistory.newBuilder();
    if (porcelain.getActivityId() != null) {
      builder.setActivityId((porcelain.getActivityId()));
    }
    if (porcelain.getDeletedAt() != null) {
      builder.setDeletedAt(Plumbing.convertTimestampToPlumbing(porcelain.getDeletedAt()));
    }
    if (porcelain.getRoleResource() != null) {
      builder.setRoleResource(Plumbing.convertRoleResourceToPlumbing(porcelain.getRoleResource()));
    }
    if (porcelain.getTimestamp() != null) {
      builder.setTimestamp(Plumbing.convertTimestampToPlumbing(porcelain.getTimestamp()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.RoleResourceHistory>
      convertRepeatedRoleResourceHistoryToPorcelain(Collection<RoleResourceHistory> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertRoleResourceHistoryToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<RoleResourceHistory> convertRepeatedRoleResourceHistoryToPlumbing(
      Collection<com.strongdm.api.RoleResourceHistory> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertRoleResourceHistoryToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.RoleUpdateResponse convertRoleUpdateResponseToPorcelain(
      RoleUpdateResponse plumbing) {
    com.strongdm.api.RoleUpdateResponse porcelain = new com.strongdm.api.RoleUpdateResponse();
    porcelain.setMeta(Plumbing.convertUpdateResponseMetadataToPorcelain(plumbing.getMeta()));
    porcelain.setRateLimit(Plumbing.convertRateLimitMetadataToPorcelain(plumbing.getRateLimit()));
    porcelain.setRole(Plumbing.convertRoleToPorcelain(plumbing.getRole()));
    return porcelain;
  }

  public static RoleUpdateResponse convertRoleUpdateResponseToPlumbing(
      com.strongdm.api.RoleUpdateResponse porcelain) {
    if (porcelain == null) {
      return null;
    }
    RoleUpdateResponse.Builder builder = RoleUpdateResponse.newBuilder();
    if (porcelain.getMeta() != null) {
      builder.setMeta(Plumbing.convertUpdateResponseMetadataToPlumbing(porcelain.getMeta()));
    }
    if (porcelain.getRateLimit() != null) {
      builder.setRateLimit(Plumbing.convertRateLimitMetadataToPlumbing(porcelain.getRateLimit()));
    }
    if (porcelain.getRole() != null) {
      builder.setRole(Plumbing.convertRoleToPlumbing(porcelain.getRole()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.RoleUpdateResponse>
      convertRepeatedRoleUpdateResponseToPorcelain(Collection<RoleUpdateResponse> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertRoleUpdateResponseToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<RoleUpdateResponse> convertRepeatedRoleUpdateResponseToPlumbing(
      Collection<com.strongdm.api.RoleUpdateResponse> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertRoleUpdateResponseToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.SQLServer convertSQLServerToPorcelain(SQLServer plumbing) {
    com.strongdm.api.SQLServer porcelain = new com.strongdm.api.SQLServer();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setDatabase((plumbing.getDatabase()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setOverrideDatabase((plumbing.getOverrideDatabase()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSchema((plumbing.getSchema()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static SQLServer convertSQLServerToPlumbing(com.strongdm.api.SQLServer porcelain) {
    if (porcelain == null) {
      return null;
    }
    SQLServer.Builder builder = SQLServer.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getDatabase() != null) {
      builder.setDatabase((porcelain.getDatabase()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    builder.setOverrideDatabase(porcelain.getOverrideDatabase());
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSchema() != null) {
      builder.setSchema((porcelain.getSchema()));
    }
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.SQLServer> convertRepeatedSQLServerToPorcelain(
      Collection<SQLServer> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertSQLServerToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<SQLServer> convertRepeatedSQLServerToPlumbing(
      Collection<com.strongdm.api.SQLServer> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertSQLServerToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.SSH convertSSHToPorcelain(SSH plumbing) {
    com.strongdm.api.SSH porcelain = new com.strongdm.api.SSH();
    porcelain.setAllowDeprecatedKeyExchanges((plumbing.getAllowDeprecatedKeyExchanges()));
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setKeyType((plumbing.getKeyType()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortForwarding((plumbing.getPortForwarding()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setPublicKey((plumbing.getPublicKey()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static SSH convertSSHToPlumbing(com.strongdm.api.SSH porcelain) {
    if (porcelain == null) {
      return null;
    }
    SSH.Builder builder = SSH.newBuilder();
    builder.setAllowDeprecatedKeyExchanges(porcelain.getAllowDeprecatedKeyExchanges());
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getKeyType() != null) {
      builder.setKeyType((porcelain.getKeyType()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortForwarding(porcelain.getPortForwarding());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getPublicKey() != null) {
      builder.setPublicKey((porcelain.getPublicKey()));
    }
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.SSH> convertRepeatedSSHToPorcelain(
      Collection<SSH> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertSSHToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<SSH> convertRepeatedSSHToPlumbing(
      Collection<com.strongdm.api.SSH> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertSSHToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.SSHCert convertSSHCertToPorcelain(SSHCert plumbing) {
    com.strongdm.api.SSHCert porcelain = new com.strongdm.api.SSHCert();
    porcelain.setAllowDeprecatedKeyExchanges((plumbing.getAllowDeprecatedKeyExchanges()));
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setKeyType((plumbing.getKeyType()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortForwarding((plumbing.getPortForwarding()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setRemoteIdentityGroupId((plumbing.getRemoteIdentityGroupId()));
    porcelain.setRemoteIdentityHealthcheckUsername(
        (plumbing.getRemoteIdentityHealthcheckUsername()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static SSHCert convertSSHCertToPlumbing(com.strongdm.api.SSHCert porcelain) {
    if (porcelain == null) {
      return null;
    }
    SSHCert.Builder builder = SSHCert.newBuilder();
    builder.setAllowDeprecatedKeyExchanges(porcelain.getAllowDeprecatedKeyExchanges());
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getKeyType() != null) {
      builder.setKeyType((porcelain.getKeyType()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortForwarding(porcelain.getPortForwarding());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getRemoteIdentityGroupId() != null) {
      builder.setRemoteIdentityGroupId((porcelain.getRemoteIdentityGroupId()));
    }
    if (porcelain.getRemoteIdentityHealthcheckUsername() != null) {
      builder.setRemoteIdentityHealthcheckUsername(
          (porcelain.getRemoteIdentityHealthcheckUsername()));
    }
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.SSHCert> convertRepeatedSSHCertToPorcelain(
      Collection<SSHCert> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertSSHCertToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<SSHCert> convertRepeatedSSHCertToPlumbing(
      Collection<com.strongdm.api.SSHCert> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertSSHCertToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.SSHCustomerKey convertSSHCustomerKeyToPorcelain(
      SSHCustomerKey plumbing) {
    com.strongdm.api.SSHCustomerKey porcelain = new com.strongdm.api.SSHCustomerKey();
    porcelain.setAllowDeprecatedKeyExchanges((plumbing.getAllowDeprecatedKeyExchanges()));
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortForwarding((plumbing.getPortForwarding()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setPrivateKey((plumbing.getPrivateKey()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static SSHCustomerKey convertSSHCustomerKeyToPlumbing(
      com.strongdm.api.SSHCustomerKey porcelain) {
    if (porcelain == null) {
      return null;
    }
    SSHCustomerKey.Builder builder = SSHCustomerKey.newBuilder();
    builder.setAllowDeprecatedKeyExchanges(porcelain.getAllowDeprecatedKeyExchanges());
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortForwarding(porcelain.getPortForwarding());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getPrivateKey() != null) {
      builder.setPrivateKey((porcelain.getPrivateKey()));
    }
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.SSHCustomerKey> convertRepeatedSSHCustomerKeyToPorcelain(
      Collection<SSHCustomerKey> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertSSHCustomerKeyToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<SSHCustomerKey> convertRepeatedSSHCustomerKeyToPlumbing(
      Collection<com.strongdm.api.SSHCustomerKey> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertSSHCustomerKeyToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.SecretStore convertSecretStoreToPorcelain(SecretStore plumbing) {
    if (plumbing == null) {
      return null;
    }
    if (plumbing.hasAws()) {
      return convertAWSStoreToPorcelain(plumbing.getAws());
    }
    if (plumbing.hasAzure()) {
      return convertAzureStoreToPorcelain(plumbing.getAzure());
    }
    if (plumbing.hasCyberarkConjur()) {
      return convertCyberarkConjurStoreToPorcelain(plumbing.getCyberarkConjur());
    }
    if (plumbing.hasCyberarkPam()) {
      return convertCyberarkPAMStoreToPorcelain(plumbing.getCyberarkPam());
    }
    if (plumbing.hasCyberarkPamExperimental()) {
      return convertCyberarkPAMExperimentalStoreToPorcelain(plumbing.getCyberarkPamExperimental());
    }
    if (plumbing.hasDelinea()) {
      return convertDelineaStoreToPorcelain(plumbing.getDelinea());
    }
    if (plumbing.hasGcp()) {
      return convertGCPStoreToPorcelain(plumbing.getGcp());
    }
    if (plumbing.hasVaultAppRole()) {
      return convertVaultAppRoleStoreToPorcelain(plumbing.getVaultAppRole());
    }
    if (plumbing.hasVaultTls()) {
      return convertVaultTLSStoreToPorcelain(plumbing.getVaultTls());
    }
    if (plumbing.hasVaultToken()) {
      return convertVaultTokenStoreToPorcelain(plumbing.getVaultToken());
    }
    throw new UnknownException("unknown polymorphic type, please upgrade your SDK");
  }

  public static SecretStore convertSecretStoreToPlumbing(com.strongdm.api.SecretStore porcelain) {
    if (porcelain == null) {
      return null;
    }
    if (porcelain instanceof com.strongdm.api.AWSStore) {
      SecretStore.Builder builder = SecretStore.newBuilder();
      builder.setAws(convertAWSStoreToPlumbing((com.strongdm.api.AWSStore) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.AzureStore) {
      SecretStore.Builder builder = SecretStore.newBuilder();
      builder.setAzure(convertAzureStoreToPlumbing((com.strongdm.api.AzureStore) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.CyberarkConjurStore) {
      SecretStore.Builder builder = SecretStore.newBuilder();
      builder.setCyberarkConjur(
          convertCyberarkConjurStoreToPlumbing((com.strongdm.api.CyberarkConjurStore) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.CyberarkPAMStore) {
      SecretStore.Builder builder = SecretStore.newBuilder();
      builder.setCyberarkPam(
          convertCyberarkPAMStoreToPlumbing((com.strongdm.api.CyberarkPAMStore) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.CyberarkPAMExperimentalStore) {
      SecretStore.Builder builder = SecretStore.newBuilder();
      builder.setCyberarkPamExperimental(
          convertCyberarkPAMExperimentalStoreToPlumbing(
              (com.strongdm.api.CyberarkPAMExperimentalStore) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.DelineaStore) {
      SecretStore.Builder builder = SecretStore.newBuilder();
      builder.setDelinea(convertDelineaStoreToPlumbing((com.strongdm.api.DelineaStore) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.GCPStore) {
      SecretStore.Builder builder = SecretStore.newBuilder();
      builder.setGcp(convertGCPStoreToPlumbing((com.strongdm.api.GCPStore) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.VaultAppRoleStore) {
      SecretStore.Builder builder = SecretStore.newBuilder();
      builder.setVaultAppRole(
          convertVaultAppRoleStoreToPlumbing((com.strongdm.api.VaultAppRoleStore) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.VaultTLSStore) {
      SecretStore.Builder builder = SecretStore.newBuilder();
      builder.setVaultTls(
          convertVaultTLSStoreToPlumbing((com.strongdm.api.VaultTLSStore) porcelain));
      return builder.build();
    }
    if (porcelain instanceof com.strongdm.api.VaultTokenStore) {
      SecretStore.Builder builder = SecretStore.newBuilder();
      builder.setVaultToken(
          convertVaultTokenStoreToPlumbing((com.strongdm.api.VaultTokenStore) porcelain));
      return builder.build();
    }
    return null;
  }

  public static List<com.strongdm.api.SecretStore> convertRepeatedSecretStoreToPorcelain(
      Collection<SecretStore> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertSecretStoreToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<SecretStore> convertRepeatedSecretStoreToPlumbing(
      Collection<com.strongdm.api.SecretStore> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertSecretStoreToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.SecretStoreCreateResponse
      convertSecretStoreCreateResponseToPorcelain(SecretStoreCreateResponse plumbing) {
    com.strongdm.api.SecretStoreCreateResponse porcelain =
        new com.strongdm.api.SecretStoreCreateResponse();
    porcelain.setMeta(Plumbing.convertCreateResponseMetadataToPorcelain(plumbing.getMeta()));
    porcelain.setRateLimit(Plumbing.convertRateLimitMetadataToPorcelain(plumbing.getRateLimit()));
    porcelain.setSecretStore(Plumbing.convertSecretStoreToPorcelain(plumbing.getSecretStore()));
    return porcelain;
  }

  public static SecretStoreCreateResponse convertSecretStoreCreateResponseToPlumbing(
      com.strongdm.api.SecretStoreCreateResponse porcelain) {
    if (porcelain == null) {
      return null;
    }
    SecretStoreCreateResponse.Builder builder = SecretStoreCreateResponse.newBuilder();
    if (porcelain.getMeta() != null) {
      builder.setMeta(Plumbing.convertCreateResponseMetadataToPlumbing(porcelain.getMeta()));
    }
    if (porcelain.getRateLimit() != null) {
      builder.setRateLimit(Plumbing.convertRateLimitMetadataToPlumbing(porcelain.getRateLimit()));
    }
    if (porcelain.getSecretStore() != null) {
      builder.setSecretStore(Plumbing.convertSecretStoreToPlumbing(porcelain.getSecretStore()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.SecretStoreCreateResponse>
      convertRepeatedSecretStoreCreateResponseToPorcelain(
          Collection<SecretStoreCreateResponse> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertSecretStoreCreateResponseToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<SecretStoreCreateResponse> convertRepeatedSecretStoreCreateResponseToPlumbing(
      Collection<com.strongdm.api.SecretStoreCreateResponse> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertSecretStoreCreateResponseToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.SecretStoreDeleteResponse
      convertSecretStoreDeleteResponseToPorcelain(SecretStoreDeleteResponse plumbing) {
    com.strongdm.api.SecretStoreDeleteResponse porcelain =
        new com.strongdm.api.SecretStoreDeleteResponse();
    porcelain.setMeta(Plumbing.convertDeleteResponseMetadataToPorcelain(plumbing.getMeta()));
    porcelain.setRateLimit(Plumbing.convertRateLimitMetadataToPorcelain(plumbing.getRateLimit()));
    return porcelain;
  }

  public static SecretStoreDeleteResponse convertSecretStoreDeleteResponseToPlumbing(
      com.strongdm.api.SecretStoreDeleteResponse porcelain) {
    if (porcelain == null) {
      return null;
    }
    SecretStoreDeleteResponse.Builder builder = SecretStoreDeleteResponse.newBuilder();
    if (porcelain.getMeta() != null) {
      builder.setMeta(Plumbing.convertDeleteResponseMetadataToPlumbing(porcelain.getMeta()));
    }
    if (porcelain.getRateLimit() != null) {
      builder.setRateLimit(Plumbing.convertRateLimitMetadataToPlumbing(porcelain.getRateLimit()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.SecretStoreDeleteResponse>
      convertRepeatedSecretStoreDeleteResponseToPorcelain(
          Collection<SecretStoreDeleteResponse> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertSecretStoreDeleteResponseToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<SecretStoreDeleteResponse> convertRepeatedSecretStoreDeleteResponseToPlumbing(
      Collection<com.strongdm.api.SecretStoreDeleteResponse> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertSecretStoreDeleteResponseToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.SecretStoreGetResponse convertSecretStoreGetResponseToPorcelain(
      SecretStoreGetResponse plumbing) {
    com.strongdm.api.SecretStoreGetResponse porcelain =
        new com.strongdm.api.SecretStoreGetResponse();
    porcelain.setMeta(Plumbing.convertGetResponseMetadataToPorcelain(plumbing.getMeta()));
    porcelain.setRateLimit(Plumbing.convertRateLimitMetadataToPorcelain(plumbing.getRateLimit()));
    porcelain.setSecretStore(Plumbing.convertSecretStoreToPorcelain(plumbing.getSecretStore()));
    return porcelain;
  }

  public static SecretStoreGetResponse convertSecretStoreGetResponseToPlumbing(
      com.strongdm.api.SecretStoreGetResponse porcelain) {
    if (porcelain == null) {
      return null;
    }
    SecretStoreGetResponse.Builder builder = SecretStoreGetResponse.newBuilder();
    if (porcelain.getMeta() != null) {
      builder.setMeta(Plumbing.convertGetResponseMetadataToPlumbing(porcelain.getMeta()));
    }
    if (porcelain.getRateLimit() != null) {
      builder.setRateLimit(Plumbing.convertRateLimitMetadataToPlumbing(porcelain.getRateLimit()));
    }
    if (porcelain.getSecretStore() != null) {
      builder.setSecretStore(Plumbing.convertSecretStoreToPlumbing(porcelain.getSecretStore()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.SecretStoreGetResponse>
      convertRepeatedSecretStoreGetResponseToPorcelain(
          Collection<SecretStoreGetResponse> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertSecretStoreGetResponseToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<SecretStoreGetResponse> convertRepeatedSecretStoreGetResponseToPlumbing(
      Collection<com.strongdm.api.SecretStoreGetResponse> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertSecretStoreGetResponseToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.SecretStoreHistory convertSecretStoreHistoryToPorcelain(
      SecretStoreHistory plumbing) {
    com.strongdm.api.SecretStoreHistory porcelain = new com.strongdm.api.SecretStoreHistory();
    porcelain.setActivityId((plumbing.getActivityId()));
    porcelain.setDeletedAt(Plumbing.convertTimestampToPorcelain(plumbing.getDeletedAt()));
    porcelain.setSecretStore(Plumbing.convertSecretStoreToPorcelain(plumbing.getSecretStore()));
    porcelain.setTimestamp(Plumbing.convertTimestampToPorcelain(plumbing.getTimestamp()));
    return porcelain;
  }

  public static SecretStoreHistory convertSecretStoreHistoryToPlumbing(
      com.strongdm.api.SecretStoreHistory porcelain) {
    if (porcelain == null) {
      return null;
    }
    SecretStoreHistory.Builder builder = SecretStoreHistory.newBuilder();
    if (porcelain.getActivityId() != null) {
      builder.setActivityId((porcelain.getActivityId()));
    }
    if (porcelain.getDeletedAt() != null) {
      builder.setDeletedAt(Plumbing.convertTimestampToPlumbing(porcelain.getDeletedAt()));
    }
    if (porcelain.getSecretStore() != null) {
      builder.setSecretStore(Plumbing.convertSecretStoreToPlumbing(porcelain.getSecretStore()));
    }
    if (porcelain.getTimestamp() != null) {
      builder.setTimestamp(Plumbing.convertTimestampToPlumbing(porcelain.getTimestamp()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.SecretStoreHistory>
      convertRepeatedSecretStoreHistoryToPorcelain(Collection<SecretStoreHistory> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertSecretStoreHistoryToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<SecretStoreHistory> convertRepeatedSecretStoreHistoryToPlumbing(
      Collection<com.strongdm.api.SecretStoreHistory> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertSecretStoreHistoryToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.SecretStoreUpdateResponse
      convertSecretStoreUpdateResponseToPorcelain(SecretStoreUpdateResponse plumbing) {
    com.strongdm.api.SecretStoreUpdateResponse porcelain =
        new com.strongdm.api.SecretStoreUpdateResponse();
    porcelain.setMeta(Plumbing.convertUpdateResponseMetadataToPorcelain(plumbing.getMeta()));
    porcelain.setRateLimit(Plumbing.convertRateLimitMetadataToPorcelain(plumbing.getRateLimit()));
    porcelain.setSecretStore(Plumbing.convertSecretStoreToPorcelain(plumbing.getSecretStore()));
    return porcelain;
  }

  public static SecretStoreUpdateResponse convertSecretStoreUpdateResponseToPlumbing(
      com.strongdm.api.SecretStoreUpdateResponse porcelain) {
    if (porcelain == null) {
      return null;
    }
    SecretStoreUpdateResponse.Builder builder = SecretStoreUpdateResponse.newBuilder();
    if (porcelain.getMeta() != null) {
      builder.setMeta(Plumbing.convertUpdateResponseMetadataToPlumbing(porcelain.getMeta()));
    }
    if (porcelain.getRateLimit() != null) {
      builder.setRateLimit(Plumbing.convertRateLimitMetadataToPlumbing(porcelain.getRateLimit()));
    }
    if (porcelain.getSecretStore() != null) {
      builder.setSecretStore(Plumbing.convertSecretStoreToPlumbing(porcelain.getSecretStore()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.SecretStoreUpdateResponse>
      convertRepeatedSecretStoreUpdateResponseToPorcelain(
          Collection<SecretStoreUpdateResponse> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertSecretStoreUpdateResponseToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<SecretStoreUpdateResponse> convertRepeatedSecretStoreUpdateResponseToPlumbing(
      Collection<com.strongdm.api.SecretStoreUpdateResponse> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertSecretStoreUpdateResponseToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.Service convertServiceToPorcelain(Service plumbing) {
    com.strongdm.api.Service porcelain = new com.strongdm.api.Service();
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setSuspended((plumbing.getSuspended()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    return porcelain;
  }

  public static Service convertServiceToPlumbing(com.strongdm.api.Service porcelain) {
    if (porcelain == null) {
      return null;
    }
    Service.Builder builder = Service.newBuilder();
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    builder.setSuspended(porcelain.getSuspended());
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.Service> convertRepeatedServiceToPorcelain(
      Collection<Service> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertServiceToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<Service> convertRepeatedServiceToPlumbing(
      Collection<com.strongdm.api.Service> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertServiceToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.SingleStore convertSingleStoreToPorcelain(SingleStore plumbing) {
    com.strongdm.api.SingleStore porcelain = new com.strongdm.api.SingleStore();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setDatabase((plumbing.getDatabase()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static SingleStore convertSingleStoreToPlumbing(com.strongdm.api.SingleStore porcelain) {
    if (porcelain == null) {
      return null;
    }
    SingleStore.Builder builder = SingleStore.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getDatabase() != null) {
      builder.setDatabase((porcelain.getDatabase()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.SingleStore> convertRepeatedSingleStoreToPorcelain(
      Collection<SingleStore> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertSingleStoreToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<SingleStore> convertRepeatedSingleStoreToPlumbing(
      Collection<com.strongdm.api.SingleStore> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertSingleStoreToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.Snowflake convertSnowflakeToPorcelain(Snowflake plumbing) {
    com.strongdm.api.Snowflake porcelain = new com.strongdm.api.Snowflake();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setDatabase((plumbing.getDatabase()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSchema((plumbing.getSchema()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static Snowflake convertSnowflakeToPlumbing(com.strongdm.api.Snowflake porcelain) {
    if (porcelain == null) {
      return null;
    }
    Snowflake.Builder builder = Snowflake.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getDatabase() != null) {
      builder.setDatabase((porcelain.getDatabase()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSchema() != null) {
      builder.setSchema((porcelain.getSchema()));
    }
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.Snowflake> convertRepeatedSnowflakeToPorcelain(
      Collection<Snowflake> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertSnowflakeToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<Snowflake> convertRepeatedSnowflakeToPlumbing(
      Collection<com.strongdm.api.Snowflake> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertSnowflakeToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.Snowsight convertSnowsightToPorcelain(Snowsight plumbing) {
    com.strongdm.api.Snowsight porcelain = new com.strongdm.api.Snowsight();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthcheckUsername((plumbing.getHealthcheckUsername()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSamlMetadata((plumbing.getSamlMetadata()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    return porcelain;
  }

  public static Snowsight convertSnowsightToPlumbing(com.strongdm.api.Snowsight porcelain) {
    if (porcelain == null) {
      return null;
    }
    Snowsight.Builder builder = Snowsight.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    if (porcelain.getHealthcheckUsername() != null) {
      builder.setHealthcheckUsername((porcelain.getHealthcheckUsername()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSamlMetadata() != null) {
      builder.setSamlMetadata((porcelain.getSamlMetadata()));
    }
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.Snowsight> convertRepeatedSnowsightToPorcelain(
      Collection<Snowsight> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertSnowsightToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<Snowsight> convertRepeatedSnowsightToPlumbing(
      Collection<com.strongdm.api.Snowsight> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertSnowsightToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.Sybase convertSybaseToPorcelain(Sybase plumbing) {
    com.strongdm.api.Sybase porcelain = new com.strongdm.api.Sybase();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static Sybase convertSybaseToPlumbing(com.strongdm.api.Sybase porcelain) {
    if (porcelain == null) {
      return null;
    }
    Sybase.Builder builder = Sybase.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.Sybase> convertRepeatedSybaseToPorcelain(
      Collection<Sybase> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertSybaseToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<Sybase> convertRepeatedSybaseToPlumbing(
      Collection<com.strongdm.api.Sybase> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertSybaseToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.SybaseIQ convertSybaseIQToPorcelain(SybaseIQ plumbing) {
    com.strongdm.api.SybaseIQ porcelain = new com.strongdm.api.SybaseIQ();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static SybaseIQ convertSybaseIQToPlumbing(com.strongdm.api.SybaseIQ porcelain) {
    if (porcelain == null) {
      return null;
    }
    SybaseIQ.Builder builder = SybaseIQ.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.SybaseIQ> convertRepeatedSybaseIQToPorcelain(
      Collection<SybaseIQ> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertSybaseIQToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<SybaseIQ> convertRepeatedSybaseIQToPlumbing(
      Collection<com.strongdm.api.SybaseIQ> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertSybaseIQToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.Tag convertTagToPorcelain(Tag plumbing) {
    com.strongdm.api.Tag porcelain = new com.strongdm.api.Tag();
    porcelain.setName((plumbing.getName()));
    porcelain.setValue((plumbing.getValue()));
    return porcelain;
  }

  public static Tag convertTagToPlumbing(com.strongdm.api.Tag porcelain) {
    if (porcelain == null) {
      return null;
    }
    Tag.Builder builder = Tag.newBuilder();
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getValue() != null) {
      builder.setValue((porcelain.getValue()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.Tag> convertRepeatedTagToPorcelain(
      Collection<Tag> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertTagToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<Tag> convertRepeatedTagToPlumbing(
      Collection<com.strongdm.api.Tag> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertTagToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.Teradata convertTeradataToPorcelain(Teradata plumbing) {
    com.strongdm.api.Teradata porcelain = new com.strongdm.api.Teradata();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static Teradata convertTeradataToPlumbing(com.strongdm.api.Teradata porcelain) {
    if (porcelain == null) {
      return null;
    }
    Teradata.Builder builder = Teradata.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.Teradata> convertRepeatedTeradataToPorcelain(
      Collection<Teradata> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertTeradataToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<Teradata> convertRepeatedTeradataToPlumbing(
      Collection<com.strongdm.api.Teradata> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertTeradataToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.Trino convertTrinoToPorcelain(Trino plumbing) {
    com.strongdm.api.Trino porcelain = new com.strongdm.api.Trino();
    porcelain.setBindInterface((plumbing.getBindInterface()));
    porcelain.setDatabase((plumbing.getDatabase()));
    porcelain.setEgressFilter((plumbing.getEgressFilter()));
    porcelain.setHealthy((plumbing.getHealthy()));
    porcelain.setHostname((plumbing.getHostname()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setPassword((plumbing.getPassword()));
    porcelain.setPort((plumbing.getPort()));
    porcelain.setPortOverride((plumbing.getPortOverride()));
    porcelain.setSecretStoreId((plumbing.getSecretStoreId()));
    porcelain.setSubdomain((plumbing.getSubdomain()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    porcelain.setUsername((plumbing.getUsername()));
    return porcelain;
  }

  public static Trino convertTrinoToPlumbing(com.strongdm.api.Trino porcelain) {
    if (porcelain == null) {
      return null;
    }
    Trino.Builder builder = Trino.newBuilder();
    if (porcelain.getBindInterface() != null) {
      builder.setBindInterface((porcelain.getBindInterface()));
    }
    if (porcelain.getDatabase() != null) {
      builder.setDatabase((porcelain.getDatabase()));
    }
    if (porcelain.getEgressFilter() != null) {
      builder.setEgressFilter((porcelain.getEgressFilter()));
    }
    builder.setHealthy(porcelain.getHealthy());
    if (porcelain.getHostname() != null) {
      builder.setHostname((porcelain.getHostname()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getPassword() != null) {
      builder.setPassword((porcelain.getPassword()));
    }
    builder.setPort(porcelain.getPort());
    builder.setPortOverride(porcelain.getPortOverride());
    if (porcelain.getSecretStoreId() != null) {
      builder.setSecretStoreId((porcelain.getSecretStoreId()));
    }
    if (porcelain.getSubdomain() != null) {
      builder.setSubdomain((porcelain.getSubdomain()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    if (porcelain.getUsername() != null) {
      builder.setUsername((porcelain.getUsername()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.Trino> convertRepeatedTrinoToPorcelain(
      Collection<Trino> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertTrinoToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<Trino> convertRepeatedTrinoToPlumbing(
      Collection<com.strongdm.api.Trino> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertTrinoToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.UpdateResponseMetadata convertUpdateResponseMetadataToPorcelain(
      UpdateResponseMetadata plumbing) {
    com.strongdm.api.UpdateResponseMetadata porcelain =
        new com.strongdm.api.UpdateResponseMetadata();
    return porcelain;
  }

  public static UpdateResponseMetadata convertUpdateResponseMetadataToPlumbing(
      com.strongdm.api.UpdateResponseMetadata porcelain) {
    if (porcelain == null) {
      return null;
    }
    UpdateResponseMetadata.Builder builder = UpdateResponseMetadata.newBuilder();
    return builder.build();
  }

  public static List<com.strongdm.api.UpdateResponseMetadata>
      convertRepeatedUpdateResponseMetadataToPorcelain(
          Collection<UpdateResponseMetadata> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertUpdateResponseMetadataToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<UpdateResponseMetadata> convertRepeatedUpdateResponseMetadataToPlumbing(
      Collection<com.strongdm.api.UpdateResponseMetadata> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertUpdateResponseMetadataToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.User convertUserToPorcelain(User plumbing) {
    com.strongdm.api.User porcelain = new com.strongdm.api.User();
    porcelain.setEmail((plumbing.getEmail()));
    porcelain.setExternalId((plumbing.getExternalId()));
    porcelain.setFirstName((plumbing.getFirstName()));
    porcelain.setId((plumbing.getId()));
    porcelain.setLastName((plumbing.getLastName()));
    porcelain.setManagedBy((plumbing.getManagedBy()));
    porcelain.setPermissionLevel((plumbing.getPermissionLevel()));
    porcelain.setSuspended((plumbing.getSuspended()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    return porcelain;
  }

  public static User convertUserToPlumbing(com.strongdm.api.User porcelain) {
    if (porcelain == null) {
      return null;
    }
    User.Builder builder = User.newBuilder();
    if (porcelain.getEmail() != null) {
      builder.setEmail((porcelain.getEmail()));
    }
    if (porcelain.getExternalId() != null) {
      builder.setExternalId((porcelain.getExternalId()));
    }
    if (porcelain.getFirstName() != null) {
      builder.setFirstName((porcelain.getFirstName()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getLastName() != null) {
      builder.setLastName((porcelain.getLastName()));
    }
    if (porcelain.getManagedBy() != null) {
      builder.setManagedBy((porcelain.getManagedBy()));
    }
    if (porcelain.getPermissionLevel() != null) {
      builder.setPermissionLevel((porcelain.getPermissionLevel()));
    }
    builder.setSuspended(porcelain.getSuspended());
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.User> convertRepeatedUserToPorcelain(
      Collection<User> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertUserToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<User> convertRepeatedUserToPlumbing(
      Collection<com.strongdm.api.User> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertUserToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.VaultAppRoleStore convertVaultAppRoleStoreToPorcelain(
      VaultAppRoleStore plumbing) {
    com.strongdm.api.VaultAppRoleStore porcelain = new com.strongdm.api.VaultAppRoleStore();
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setNamespace((plumbing.getNamespace()));
    porcelain.setServerAddress((plumbing.getServerAddress()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    return porcelain;
  }

  public static VaultAppRoleStore convertVaultAppRoleStoreToPlumbing(
      com.strongdm.api.VaultAppRoleStore porcelain) {
    if (porcelain == null) {
      return null;
    }
    VaultAppRoleStore.Builder builder = VaultAppRoleStore.newBuilder();
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getNamespace() != null) {
      builder.setNamespace((porcelain.getNamespace()));
    }
    if (porcelain.getServerAddress() != null) {
      builder.setServerAddress((porcelain.getServerAddress()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.VaultAppRoleStore>
      convertRepeatedVaultAppRoleStoreToPorcelain(Collection<VaultAppRoleStore> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertVaultAppRoleStoreToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<VaultAppRoleStore> convertRepeatedVaultAppRoleStoreToPlumbing(
      Collection<com.strongdm.api.VaultAppRoleStore> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertVaultAppRoleStoreToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.VaultTLSStore convertVaultTLSStoreToPorcelain(
      VaultTLSStore plumbing) {
    com.strongdm.api.VaultTLSStore porcelain = new com.strongdm.api.VaultTLSStore();
    porcelain.setCACertPath((plumbing.getCACertPath()));
    porcelain.setClientCertPath((plumbing.getClientCertPath()));
    porcelain.setClientKeyPath((plumbing.getClientKeyPath()));
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setNamespace((plumbing.getNamespace()));
    porcelain.setServerAddress((plumbing.getServerAddress()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    return porcelain;
  }

  public static VaultTLSStore convertVaultTLSStoreToPlumbing(
      com.strongdm.api.VaultTLSStore porcelain) {
    if (porcelain == null) {
      return null;
    }
    VaultTLSStore.Builder builder = VaultTLSStore.newBuilder();
    if (porcelain.getCACertPath() != null) {
      builder.setCACertPath((porcelain.getCACertPath()));
    }
    if (porcelain.getClientCertPath() != null) {
      builder.setClientCertPath((porcelain.getClientCertPath()));
    }
    if (porcelain.getClientKeyPath() != null) {
      builder.setClientKeyPath((porcelain.getClientKeyPath()));
    }
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getNamespace() != null) {
      builder.setNamespace((porcelain.getNamespace()));
    }
    if (porcelain.getServerAddress() != null) {
      builder.setServerAddress((porcelain.getServerAddress()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.VaultTLSStore> convertRepeatedVaultTLSStoreToPorcelain(
      Collection<VaultTLSStore> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertVaultTLSStoreToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<VaultTLSStore> convertRepeatedVaultTLSStoreToPlumbing(
      Collection<com.strongdm.api.VaultTLSStore> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertVaultTLSStoreToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static com.strongdm.api.VaultTokenStore convertVaultTokenStoreToPorcelain(
      VaultTokenStore plumbing) {
    com.strongdm.api.VaultTokenStore porcelain = new com.strongdm.api.VaultTokenStore();
    porcelain.setId((plumbing.getId()));
    porcelain.setName((plumbing.getName()));
    porcelain.setNamespace((plumbing.getNamespace()));
    porcelain.setServerAddress((plumbing.getServerAddress()));
    porcelain.setTags(Plumbing.convertTagsToPorcelain(plumbing.getTags()));
    return porcelain;
  }

  public static VaultTokenStore convertVaultTokenStoreToPlumbing(
      com.strongdm.api.VaultTokenStore porcelain) {
    if (porcelain == null) {
      return null;
    }
    VaultTokenStore.Builder builder = VaultTokenStore.newBuilder();
    if (porcelain.getId() != null) {
      builder.setId((porcelain.getId()));
    }
    if (porcelain.getName() != null) {
      builder.setName((porcelain.getName()));
    }
    if (porcelain.getNamespace() != null) {
      builder.setNamespace((porcelain.getNamespace()));
    }
    if (porcelain.getServerAddress() != null) {
      builder.setServerAddress((porcelain.getServerAddress()));
    }
    if (porcelain.getTags() != null) {
      builder.setTags(Plumbing.convertTagsToPlumbing(porcelain.getTags()));
    }
    return builder.build();
  }

  public static List<com.strongdm.api.VaultTokenStore> convertRepeatedVaultTokenStoreToPorcelain(
      Collection<VaultTokenStore> plumbings) {
    return plumbings.stream()
        .map(plumbing -> convertVaultTokenStoreToPorcelain(plumbing))
        .collect(Collectors.toList());
  }

  public static List<VaultTokenStore> convertRepeatedVaultTokenStoreToPlumbing(
      Collection<com.strongdm.api.VaultTokenStore> porcelains) {
    return porcelains.stream()
        .map(porcelain -> convertVaultTokenStoreToPlumbing(porcelain))
        .collect(Collectors.toList());
  }

  public static RpcException convertExceptionToPorcelain(Exception e) {
    if (!(e instanceof io.grpc.StatusRuntimeException)) {
      return new UnknownException(e.getMessage());
    }

    com.google.rpc.Status status = io.grpc.protobuf.StatusProto.fromThrowable(e);

    switch (status.getCode()) {
      case Code.DEADLINE_EXCEEDED_VALUE:
        return new TimeoutException(e.getMessage());
      case Code.ALREADY_EXISTS_VALUE:
        return new AlreadyExistsException(e.getMessage());
      case Code.INVALID_ARGUMENT_VALUE:
        return new BadRequestException(e.getMessage());
      case Code.INTERNAL_VALUE:
        return new InternalException(e.getMessage());
      case Code.PERMISSION_DENIED_VALUE:
        return new PermissionException(e.getMessage());
      case Code.UNAUTHENTICATED_VALUE:
        return new AuthenticationException(e.getMessage());
      case Code.RESOURCE_EXHAUSTED_VALUE:
        try {
          for (com.google.protobuf.Any any : status.getDetailsList()) {
            if (any.is(RateLimitMetadata.class)) {
              RateLimitMetadata plumbing = any.unpack(RateLimitMetadata.class);
              com.strongdm.api.RateLimitMetadata porcelain =
                  Plumbing.convertRateLimitMetadataToPorcelain(plumbing);
              return new RateLimitException(e.getMessage(), porcelain);
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException ex) {
        }
        // this should never happen, but in case it does, fallback to an RpcException to avoid
        // returning a RateLimitException with a null metadata.
        break;
      case Code.NOT_FOUND_VALUE:
        return new NotFoundException(e.getMessage());
      case Code.UNKNOWN_VALUE:
        return new UnknownException(e.getMessage());
    }

    return new RpcException(e.getMessage(), status.getCode());
  }
}
