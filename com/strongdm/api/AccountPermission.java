// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protogen. DO NOT EDIT.

package com.strongdm.api;

import java.util.Date;

/** AccountPermission represents an individual API action available to an account. */
public class AccountPermission {
  private String accountId;
  /** The unique identifier of the Account this permission belongs to. */
  public String getAccountId() {
    return this.accountId;
  }
  /** The unique identifier of the Account this permission belongs to. */
  public void setAccountId(String in) {
    this.accountId = in;
  }

  private Date grantedAt;
  /**
   * The most recent time at which the permission was granted. If a permission was granted, revoked,
   * and granted again, this will reflect the later time.
   */
  public Date getGrantedAt() {
    return this.grantedAt;
  }
  /**
   * The most recent time at which the permission was granted. If a permission was granted, revoked,
   * and granted again, this will reflect the later time.
   */
  public void setGrantedAt(Date in) {
    this.grantedAt = in;
  }

  private String permission;
  /**
   * The value of this permission, split into vertical and action e.g. 'secretstore:List',
   * 'role:update'
   */
  public String getPermission() {
    return this.permission;
  }
  /**
   * The value of this permission, split into vertical and action e.g. 'secretstore:List',
   * 'role:update'
   */
  public void setPermission(String in) {
    this.permission = in;
  }

  private String scope;
  /**
   * The scope of this permission. A global scope means this action can be taken on any entity;
   * otherwise the action can only be taken on or in the scope of the scoped id.
   */
  public String getScope() {
    return this.scope;
  }
  /**
   * The scope of this permission. A global scope means this action can be taken on any entity;
   * otherwise the action can only be taken on or in the scope of the scoped id.
   */
  public void setScope(String in) {
    this.scope = in;
  }

  private String scopedId;
  /**
   * The ID to which or in whose context this operation is permitted. e.g. The ID of a role that a
   * team leader has the abillity to remove and add accounts to, or the ID of a resource that a user
   * has the permission to connect to. If Scope is global, scoped id is not populated.
   */
  public String getScopedId() {
    return this.scopedId;
  }
  /**
   * The ID to which or in whose context this operation is permitted. e.g. The ID of a role that a
   * team leader has the abillity to remove and add accounts to, or the ID of a resource that a user
   * has the permission to connect to. If Scope is global, scoped id is not populated.
   */
  public void setScopedId(String in) {
    this.scopedId = in;
  }
}
