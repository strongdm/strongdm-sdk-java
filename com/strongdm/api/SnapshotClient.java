// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protogen. DO NOT EDIT.

package com.strongdm.api;

/** SnapshotClient exposes methods to query historical records at a provided timestamp. */
public class SnapshotClient {
  private Client parent;

  protected SnapshotClient(Client parent) {
    this.parent = parent;
  }
  /** AccessRequests are requests for access to a resource that may match a Workflow. */
  public SnapshotAccessRequests accessRequests() {
    return this.parent.accessRequests;
  }
  /** AccountAttachments assign an account to a role. */
  public SnapshotAccountAttachments accountAttachments() {
    return this.parent.accountAttachments;
  }
  /**
   * AccountGrants assign a resource directly to an account, giving the account the permission to
   * connect to that resource.
   */
  public SnapshotAccountGrants accountGrants() {
    return this.parent.accountGrants;
  }
  /**
   * AccountPermissions records the granular permissions accounts have, allowing them to execute
   * relevant commands via StrongDM's APIs.
   */
  public SnapshotAccountPermissions accountPermissions() {
    return this.parent.accountPermissions;
  }
  /**
   * AccountResources enumerates the resources to which accounts have access. The AccountResources
   * service is read-only.
   */
  public SnapshotAccountResources accountResources() {
    return this.parent.accountResources;
  }
  /**
   * Accounts are users that have access to strongDM. There are two types of accounts: 1. **Users:**
   * humans who are authenticated through username and password or SSO. 2. **Service Accounts:**
   * machines that are authenticated using a service token.
   */
  public SnapshotAccounts accounts() {
    return this.parent.accounts;
  }
  /**
   * Nodes make up the strongDM network, and allow your users to connect securely to your resources.
   * There are two types of nodes: - **Gateways** are the entry points into network. They listen for
   * connection from the strongDM client, and provide access to databases and servers. - **Relays**
   * are used to extend the strongDM network into segmented subnets. They provide access to
   * databases and servers but do not listen for incoming connections.
   */
  public SnapshotNodes nodes() {
    return this.parent.nodes;
  }
  /**
   * PeeringGroupNodes provides the building blocks necessary to obtain attach a node to a peering
   * group.
   */
  public SnapshotPeeringGroupNodes peeringGroupNodes() {
    return this.parent.peeringGroupNodes;
  }
  /** PeeringGroupPeers provides the building blocks necessary to link two peering groups. */
  public SnapshotPeeringGroupPeers peeringGroupPeers() {
    return this.parent.peeringGroupPeers;
  }
  /**
   * PeeringGroupResources provides the building blocks necessary to obtain attach a resource to a
   * peering group.
   */
  public SnapshotPeeringGroupResources peeringGroupResources() {
    return this.parent.peeringGroupResources;
  }
  /**
   * PeeringGroups provides the building blocks necessary to obtain explicit network topology and
   * routing.
   */
  public SnapshotPeeringGroups peeringGroups() {
    return this.parent.peeringGroups;
  }
  /**
   * RemoteIdentities assign a resource directly to an account, giving the account the permission to
   * connect to that resource.
   */
  public SnapshotRemoteIdentities remoteIdentities() {
    return this.parent.remoteIdentities;
  }
  /**
   * A RemoteIdentityGroup is a named grouping of Remote Identities for Accounts. An Account's
   * relationship to a RemoteIdentityGroup is defined via RemoteIdentity objects.
   */
  public SnapshotRemoteIdentityGroups remoteIdentityGroups() {
    return this.parent.remoteIdentityGroups;
  }
  /**
   * Resources are databases, servers, clusters, websites, or clouds that strongDM delegates access
   * to.
   */
  public SnapshotResources resources() {
    return this.parent.resources;
  }
  /**
   * RoleResources enumerates the resources to which roles have access. The RoleResources service is
   * read-only.
   */
  public SnapshotRoleResources roleResources() {
    return this.parent.roleResources;
  }
  /**
   * A Role has a list of access rules which determine which Resources the members of the Role have
   * access to. An Account can be a member of multiple Roles via AccountAttachments.
   */
  public SnapshotRoles roles() {
    return this.parent.roles;
  }
  /** SecretStores are servers where resource secrets (passwords, keys) are stored. */
  public SnapshotSecretStores secretStores() {
    return this.parent.secretStores;
  }
  /** WorkflowApprovers is an account with the ability to approve requests bound to a workflow. */
  public SnapshotWorkflowApprovers workflowApprovers() {
    return this.parent.workflowApprovers;
  }
  /**
   * WorkflowAssignments links a Resource to a Workflow. The assigned resources are those that a
   * user can request access to via the workflow.
   */
  public SnapshotWorkflowAssignments workflowAssignments() {
    return this.parent.workflowAssignments;
  }
  /**
   * WorkflowRole links a role to a workflow. The linked roles indicate which roles a user must be a
   * part of to request access to a resource via the workflow.
   */
  public SnapshotWorkflowRoles workflowRoles() {
    return this.parent.workflowRoles;
  }
  /**
   * Workflows are the collection of rules that define the resources to which access can be
   * requested, the users that can request that access, and the mechanism for approving those
   * requests which can either be automatic approval or a set of users authorized to approve the
   * requests.
   */
  public SnapshotWorkflows workflows() {
    return this.parent.workflows;
  }
}
