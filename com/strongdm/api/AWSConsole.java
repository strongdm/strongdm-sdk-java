// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protogen. DO NOT EDIT.

package com.strongdm.api;

public class AWSConsole implements Resource {
  private String bindInterface;
  /**
   * The bind interface is the IP address to which the port override of a resource is bound (for
   * example, 127.0.0.1). It is automatically generated if not provided.
   */
  public String getBindInterface() {
    return this.bindInterface;
  }
  /**
   * The bind interface is the IP address to which the port override of a resource is bound (for
   * example, 127.0.0.1). It is automatically generated if not provided.
   */
  public void setBindInterface(String in) {
    this.bindInterface = in;
  }

  private String egressFilter;
  /** A filter applied to the routing logic to pin datasource to nodes. */
  public String getEgressFilter() {
    return this.egressFilter;
  }
  /** A filter applied to the routing logic to pin datasource to nodes. */
  public void setEgressFilter(String in) {
    this.egressFilter = in;
  }

  private boolean enableEnvVariables;
  /**
   * If true, prefer environment variables to authenticate connection even if EC2 roles are
   * configured.
   */
  public boolean getEnableEnvVariables() {
    return this.enableEnvVariables;
  }
  /**
   * If true, prefer environment variables to authenticate connection even if EC2 roles are
   * configured.
   */
  public void setEnableEnvVariables(boolean in) {
    this.enableEnvVariables = in;
  }

  private boolean healthy;
  /** True if the datasource is reachable and the credentials are valid. */
  public boolean getHealthy() {
    return this.healthy;
  }
  /** True if the datasource is reachable and the credentials are valid. */
  public void setHealthy(boolean in) {
    this.healthy = in;
  }

  private String id;
  /** Unique identifier of the Resource. */
  public String getId() {
    return this.id;
  }
  /** Unique identifier of the Resource. */
  public void setId(String in) {
    this.id = in;
  }

  private String identityAliasHealthcheckUsername;
  /**
   * The username to use for healthchecks, when clients otherwise connect with their own identity
   * alias username.
   */
  public String getIdentityAliasHealthcheckUsername() {
    return this.identityAliasHealthcheckUsername;
  }
  /**
   * The username to use for healthchecks, when clients otherwise connect with their own identity
   * alias username.
   */
  public void setIdentityAliasHealthcheckUsername(String in) {
    this.identityAliasHealthcheckUsername = in;
  }

  private String identitySetId;
  /** The ID of the identity set to use for identity connections. */
  public String getIdentitySetId() {
    return this.identitySetId;
  }
  /** The ID of the identity set to use for identity connections. */
  public void setIdentitySetId(String in) {
    this.identitySetId = in;
  }

  private String name;
  /** Unique human-readable name of the Resource. */
  public String getName() {
    return this.name;
  }
  /** Unique human-readable name of the Resource. */
  public void setName(String in) {
    this.name = in;
  }

  private int portOverride;
  /** The local port used by clients to connect to this resource. */
  public int getPortOverride() {
    return this.portOverride;
  }
  /** The local port used by clients to connect to this resource. */
  public void setPortOverride(int in) {
    this.portOverride = in;
  }

  private String region;
  /** The AWS region to connect to. */
  public String getRegion() {
    return this.region;
  }
  /** The AWS region to connect to. */
  public void setRegion(String in) {
    this.region = in;
  }

  private String roleArn;
  /** The role to assume after logging in. */
  public String getRoleArn() {
    return this.roleArn;
  }
  /** The role to assume after logging in. */
  public void setRoleArn(String in) {
    this.roleArn = in;
  }

  private String roleExternalId;
  /**
   * The external ID to associate with assume role requests. Does nothing if a role ARN is not
   * provided.
   */
  public String getRoleExternalId() {
    return this.roleExternalId;
  }
  /**
   * The external ID to associate with assume role requests. Does nothing if a role ARN is not
   * provided.
   */
  public void setRoleExternalId(String in) {
    this.roleExternalId = in;
  }

  private String secretStoreId;
  /** ID of the secret store containing credentials for this resource, if any. */
  public String getSecretStoreId() {
    return this.secretStoreId;
  }
  /** ID of the secret store containing credentials for this resource, if any. */
  public void setSecretStoreId(String in) {
    this.secretStoreId = in;
  }

  private int sessionExpiry;
  /**
   * The length of time in seconds AWS console sessions will live before needing to reauthenticate.
   */
  public int getSessionExpiry() {
    return this.sessionExpiry;
  }
  /**
   * The length of time in seconds AWS console sessions will live before needing to reauthenticate.
   */
  public void setSessionExpiry(int in) {
    this.sessionExpiry = in;
  }

  private String subdomain;
  /**
   * Subdomain is the local DNS address. (e.g. app-prod1 turns into
   * app-prod1.your-org-name.sdm.network)
   */
  public String getSubdomain() {
    return this.subdomain;
  }
  /**
   * Subdomain is the local DNS address. (e.g. app-prod1 turns into
   * app-prod1.your-org-name.sdm.network)
   */
  public void setSubdomain(String in) {
    this.subdomain = in;
  }

  private java.util.Map<String, String> tags;
  /** Tags is a map of key, value pairs. */
  public java.util.Map<String, String> getTags() {
    java.util.Map<String, String> m = new java.util.HashMap<String, String>();
    if (this.tags != null) {
      m.putAll(this.tags);
    }
    return m;
  }
  /** Tags is a map of key, value pairs. */
  public void setTags(java.util.Map<String, String> in) {
    if (in == null) {
      this.tags = null;
      return;
    }
    this.tags = new java.util.HashMap<String, String>();
    this.tags.putAll(in);
  }
}
