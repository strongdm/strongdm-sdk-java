// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// This file was generated by protogen. DO NOT EDIT.

package com.strongdm.api.v1.plumbing;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.function.Supplier;

public class PageIterator<T> implements Iterator<T> {
  private List<T> page;
  private int index;
  private boolean hasNextPage;

  private final Supplier<PageResult<T>> pageFetcher;

  public PageIterator(Supplier<PageResult<T>> pageFetcher) {
    // initialize cursor
    this.page = new ArrayList<T>();
    this.pageFetcher = pageFetcher;
    this.hasNextPage = true;
  }

  // Checks if the next element exists
  public boolean hasNext() {
    this.fetchNextPageIfNecessary();
    return this.index < this.page.size();
  }

  // moves the cursor/iterator to next element
  public T next() {
    this.fetchNextPageIfNecessary();

    if (this.index < this.page.size()) {
      T gotten = this.page.get(this.index);
      this.index++;
      return gotten;
    }

    throw new NoSuchElementException();
  }

  private void fetchNextPageIfNecessary() {
    if (this.index < this.page.size()) {
      return;
    }

    if (!this.hasNextPage) {
      return;
    }

    PageResult<T> pageResult = this.pageFetcher.get();
    this.index = 0;
    this.hasNextPage = pageResult.hasNextPage();
    this.page = pageResult.getPage();
  }
}
