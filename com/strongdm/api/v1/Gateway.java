// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// This file was generated by protogen. DO NOT EDIT.

package com.strongdm.api.v1;

// Gateway represents a StrongDM CLI installation running in gateway mode.
public class Gateway implements Node {
  private String id;
  // Unique identifier of the Gateway.
  public String getId() {
    return this.id;
  }
  // Unique identifier of the Gateway.
  public void setId(String in) {
    this.id = in;
  }

  private String name;
  // Unique human-readable name of the Gateway. Generated if not provided on create.
  public String getName() {
    return this.name;
  }
  // Unique human-readable name of the Gateway. Generated if not provided on create.
  public void setName(String in) {
    this.name = in;
  }

  private String state;
  // The current state of the gateway. One of: "new", "verifying_restart",
  // "restarting", "started", "stopped", "dead", "unknown"
  public String getState() {
    return this.state;
  }
  // The current state of the gateway. One of: "new", "verifying_restart",
  // "restarting", "started", "stopped", "dead", "unknown"
  public void setState(String in) {
    this.state = in;
  }

  private String listenAddress;
  // The public hostname/port tuple at which the gateway will be accessible to clients.
  public String getListenAddress() {
    return this.listenAddress;
  }
  // The public hostname/port tuple at which the gateway will be accessible to clients.
  public void setListenAddress(String in) {
    this.listenAddress = in;
  }

  private String bindAddress;
  // The hostname/port tuple which the gateway daemon will bind to.
  // If not provided on create, set to "0.0.0.0:<listen_address_port>".
  public String getBindAddress() {
    return this.bindAddress;
  }
  // The hostname/port tuple which the gateway daemon will bind to.
  // If not provided on create, set to "0.0.0.0:<listen_address_port>".
  public void setBindAddress(String in) {
    this.bindAddress = in;
  }

  private java.util.Map<String, String> tags;
  // Tags is a map of key, value pairs.
  public java.util.Map<String, String> getTags() {
    java.util.Map<String, String> m = new java.util.HashMap<String, String>();
    if (this.tags != null) {
      m.putAll(this.tags);
    }
    return m;
  }
  // Tags is a map of key, value pairs.
  public void setTags(java.util.Map<String, String> in) {
    if (in == null) {
      this.tags = null;
      return;
    }
    this.tags = new java.util.HashMap<String, String>();
    this.tags.putAll(in);
  }
}
