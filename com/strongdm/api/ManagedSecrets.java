// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protogen. DO NOT EDIT.

package com.strongdm.api;

import com.strongdm.api.plumbing.ManagedSecretsGrpc;
import com.strongdm.api.plumbing.ManagedSecretsPlumbing;
import com.strongdm.api.plumbing.PageIterator;
import com.strongdm.api.plumbing.PageResult;
import com.strongdm.api.plumbing.Plumbing;
import com.strongdm.api.plumbing.Spec.GetRequestMetadata;
import com.strongdm.api.plumbing.Spec.ListRequestMetadata;
import io.grpc.Deadline;
import io.grpc.ManagedChannel;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;

/**
 * ManagedSecret is a private vertical for creating, reading, updating, deleting, listing and
 * rotating the managed secrets in the secrets engines as an authenticated user.
 */
public class ManagedSecrets {
  private final ManagedSecretsGrpc.ManagedSecretsBlockingStub stub;
  private final Client parent;
  private final Deadline deadline;

  public ManagedSecrets(ManagedChannel channel, Client client) {
    this.stub = ManagedSecretsGrpc.newBlockingStub(channel);
    this.parent = client;
    this.deadline = null;
  }

  private ManagedSecrets(
      ManagedSecretsGrpc.ManagedSecretsBlockingStub stub, Client client, Deadline deadline) {
    this.stub = stub;
    this.parent = client;
    this.deadline = deadline;
  }

  /**
   * This function returns a copy of the ManagedSecrets service which has the given deadline set for
   * all method calls.
   */
  public ManagedSecrets withDeadlineAfter(long duration, TimeUnit units) {
    Deadline deadline = Deadline.after(duration, units);
    return new ManagedSecrets(this.stub.withDeadline(deadline), this.parent, deadline);
  }
  /** List returns Managed Secrets from a Secret Engine. */
  public Iterable<ManagedSecret> list(String filter, Object... args) throws RpcException {
    ManagedSecretsPlumbing.ManagedSecretListRequest.Builder builder =
        ManagedSecretsPlumbing.ManagedSecretListRequest.newBuilder();
    builder.setFilter(Plumbing.quoteFilterArgs(filter, args));
    ListRequestMetadata.Builder metaBuilder = ListRequestMetadata.newBuilder();
    if (this.parent.pageLimit > 0) {
      metaBuilder.setLimit(this.parent.pageLimit);
    }
    if (this.parent.snapshotDate != null) {
      metaBuilder.setSnapshotAt(Plumbing.convertTimestampToPlumbing(this.parent.snapshotDate));
    }
    builder.setMeta(metaBuilder);

    Supplier<PageResult<ManagedSecret>> pageFetcher =
        () -> {
          // Note: this closure captures and reuses the builder to set the next page
          ManagedSecretsPlumbing.ManagedSecretListRequest req = builder.build();
          ManagedSecretsPlumbing.ManagedSecretListResponse plumbingResponse;
          int tries = 0;
          while (true) {
            try {
              plumbingResponse =
                  this.stub
                      .withCallCredentials(
                          this.parent.getCallCredentials("ManagedSecrets.List", req))
                      .list(req);
            } catch (Exception e) {
              if (this.parent.shouldRetry(tries, e, this.deadline)) {
                tries++;
                try {
                  Thread.sleep(this.parent.exponentialBackoff(tries, this.deadline));
                } catch (Exception ignored) {
                }
                continue;
              }
              throw Plumbing.convertExceptionToPorcelain(e);
            }
            break;
          }

          List<ManagedSecret> page =
              Plumbing.convertRepeatedManagedSecretToPorcelain(
                  plumbingResponse.getManagedSecretsList());

          boolean hasNextCursor = plumbingResponse.getMeta().getNextCursor() != "";
          builder.setMeta(
              ListRequestMetadata.newBuilder()
                  .setCursor(plumbingResponse.getMeta().getNextCursor()));

          return new PageResult<ManagedSecret>(page, hasNextCursor);
        };

    Iterator<ManagedSecret> iterator = new PageIterator<>(pageFetcher);

    return () -> iterator;
  }
  /** List returns Managed Secrets for an Actor from a Secret Engine. */
  public Iterable<ManagedSecret> listByActor(String filter, Object... args) throws RpcException {
    ManagedSecretsPlumbing.ManagedSecretListRequest.Builder builder =
        ManagedSecretsPlumbing.ManagedSecretListRequest.newBuilder();
    builder.setFilter(Plumbing.quoteFilterArgs(filter, args));
    ListRequestMetadata.Builder metaBuilder = ListRequestMetadata.newBuilder();
    if (this.parent.pageLimit > 0) {
      metaBuilder.setLimit(this.parent.pageLimit);
    }
    if (this.parent.snapshotDate != null) {
      metaBuilder.setSnapshotAt(Plumbing.convertTimestampToPlumbing(this.parent.snapshotDate));
    }
    builder.setMeta(metaBuilder);

    Supplier<PageResult<ManagedSecret>> pageFetcher =
        () -> {
          // Note: this closure captures and reuses the builder to set the next page
          ManagedSecretsPlumbing.ManagedSecretListRequest req = builder.build();
          ManagedSecretsPlumbing.ManagedSecretListResponse plumbingResponse;
          int tries = 0;
          while (true) {
            try {
              plumbingResponse =
                  this.stub
                      .withCallCredentials(
                          this.parent.getCallCredentials("ManagedSecrets.ListByActor", req))
                      .listByActor(req);
            } catch (Exception e) {
              if (this.parent.shouldRetry(tries, e, this.deadline)) {
                tries++;
                try {
                  Thread.sleep(this.parent.exponentialBackoff(tries, this.deadline));
                } catch (Exception ignored) {
                }
                continue;
              }
              throw Plumbing.convertExceptionToPorcelain(e);
            }
            break;
          }

          List<ManagedSecret> page =
              Plumbing.convertRepeatedManagedSecretToPorcelain(
                  plumbingResponse.getManagedSecretsList());

          boolean hasNextCursor = plumbingResponse.getMeta().getNextCursor() != "";
          builder.setMeta(
              ListRequestMetadata.newBuilder()
                  .setCursor(plumbingResponse.getMeta().getNextCursor()));

          return new PageResult<ManagedSecret>(page, hasNextCursor);
        };

    Iterator<ManagedSecret> iterator = new PageIterator<>(pageFetcher);

    return () -> iterator;
  }
  /** Create creates a Managed Secret */
  public ManagedSecretCreateResponse create(ManagedSecret managedSecret) throws RpcException {
    ManagedSecretsPlumbing.ManagedSecretCreateRequest.Builder builder =
        ManagedSecretsPlumbing.ManagedSecretCreateRequest.newBuilder();
    builder.setManagedSecret(Plumbing.convertManagedSecretToPlumbing(managedSecret));
    ManagedSecretsPlumbing.ManagedSecretCreateRequest req = builder.build();
    ManagedSecretsPlumbing.ManagedSecretCreateResponse plumbingResponse;
    int tries = 0;
    while (true) {
      try {
        plumbingResponse =
            this.stub
                .withCallCredentials(this.parent.getCallCredentials("ManagedSecrets.Create", req))
                .create(req);
      } catch (Exception e) {
        if (this.parent.shouldRetry(tries, e, this.deadline)) {
          tries++;
          try {
            Thread.sleep(this.parent.exponentialBackoff(tries, this.deadline));
          } catch (Exception ignored) {
          }
          continue;
        }
        throw Plumbing.convertExceptionToPorcelain(e);
      }
      break;
    }
    return Plumbing.convertManagedSecretCreateResponseToPorcelain(plumbingResponse);
  }
  /** Update updates a Managed Secret */
  public ManagedSecretUpdateResponse update(ManagedSecret managedSecret) throws RpcException {
    ManagedSecretsPlumbing.ManagedSecretUpdateRequest.Builder builder =
        ManagedSecretsPlumbing.ManagedSecretUpdateRequest.newBuilder();
    builder.setManagedSecret(Plumbing.convertManagedSecretToPlumbing(managedSecret));
    ManagedSecretsPlumbing.ManagedSecretUpdateRequest req = builder.build();
    ManagedSecretsPlumbing.ManagedSecretUpdateResponse plumbingResponse;
    int tries = 0;
    while (true) {
      try {
        plumbingResponse =
            this.stub
                .withCallCredentials(this.parent.getCallCredentials("ManagedSecrets.Update", req))
                .update(req);
      } catch (Exception e) {
        if (this.parent.shouldRetry(tries, e, this.deadline)) {
          tries++;
          try {
            Thread.sleep(this.parent.exponentialBackoff(tries, this.deadline));
          } catch (Exception ignored) {
          }
          continue;
        }
        throw Plumbing.convertExceptionToPorcelain(e);
      }
      break;
    }
    return Plumbing.convertManagedSecretUpdateResponseToPorcelain(plumbingResponse);
  }
  /** Rotate forces rotation of Managed Secret */
  public ManagedSecretRotateResponse rotate(String id) throws RpcException {
    ManagedSecretsPlumbing.ManagedSecretRotateRequest.Builder builder =
        ManagedSecretsPlumbing.ManagedSecretRotateRequest.newBuilder();
    builder.setId((id));
    ManagedSecretsPlumbing.ManagedSecretRotateRequest req = builder.build();
    ManagedSecretsPlumbing.ManagedSecretRotateResponse plumbingResponse;
    int tries = 0;
    while (true) {
      try {
        plumbingResponse =
            this.stub
                .withCallCredentials(this.parent.getCallCredentials("ManagedSecrets.Rotate", req))
                .rotate(req);
      } catch (Exception e) {
        if (this.parent.shouldRetry(tries, e, this.deadline)) {
          tries++;
          try {
            Thread.sleep(this.parent.exponentialBackoff(tries, this.deadline));
          } catch (Exception ignored) {
          }
          continue;
        }
        throw Plumbing.convertExceptionToPorcelain(e);
      }
      break;
    }
    return Plumbing.convertManagedSecretRotateResponseToPorcelain(plumbingResponse);
  }
  /** Delete deletes a Managed Secret */
  public ManagedSecretDeleteResponse delete(String id) throws RpcException {
    ManagedSecretsPlumbing.ManagedSecretDeleteRequest.Builder builder =
        ManagedSecretsPlumbing.ManagedSecretDeleteRequest.newBuilder();
    builder.setId((id));
    ManagedSecretsPlumbing.ManagedSecretDeleteRequest req = builder.build();
    ManagedSecretsPlumbing.ManagedSecretDeleteResponse plumbingResponse;
    int tries = 0;
    while (true) {
      try {
        plumbingResponse =
            this.stub
                .withCallCredentials(this.parent.getCallCredentials("ManagedSecrets.Delete", req))
                .delete(req);
      } catch (Exception e) {
        if (this.parent.shouldRetry(tries, e, this.deadline)) {
          tries++;
          try {
            Thread.sleep(this.parent.exponentialBackoff(tries, this.deadline));
          } catch (Exception ignored) {
          }
          continue;
        }
        throw Plumbing.convertExceptionToPorcelain(e);
      }
      break;
    }
    return Plumbing.convertManagedSecretDeleteResponseToPorcelain(plumbingResponse);
  }
  /** Get gets details of a Managed Secret without sensitive data */
  public ManagedSecretGetResponse get(String id) throws RpcException {
    ManagedSecretsPlumbing.ManagedSecretGetRequest.Builder builder =
        ManagedSecretsPlumbing.ManagedSecretGetRequest.newBuilder();
    if (this.parent.snapshotDate != null) {
      GetRequestMetadata.Builder metaBuilder = GetRequestMetadata.newBuilder();
      metaBuilder.setSnapshotAt(Plumbing.convertTimestampToPlumbing(this.parent.snapshotDate));
      builder.setMeta(metaBuilder);
    }
    builder.setId((id));
    ManagedSecretsPlumbing.ManagedSecretGetRequest req = builder.build();
    ManagedSecretsPlumbing.ManagedSecretGetResponse plumbingResponse;
    int tries = 0;
    while (true) {
      try {
        plumbingResponse =
            this.stub
                .withCallCredentials(this.parent.getCallCredentials("ManagedSecrets.Get", req))
                .get(req);
      } catch (Exception e) {
        if (this.parent.shouldRetry(tries, e, this.deadline)) {
          tries++;
          try {
            Thread.sleep(this.parent.exponentialBackoff(tries, this.deadline));
          } catch (Exception ignored) {
          }
          continue;
        }
        throw Plumbing.convertExceptionToPorcelain(e);
      }
      break;
    }
    return Plumbing.convertManagedSecretGetResponseToPorcelain(plumbingResponse);
  }
  /** Retrieve returns Managed Secret with sensitive data */
  public ManagedSecretRetrieveResponse retrieve(String id, byte[] publicKey) throws RpcException {
    ManagedSecretsPlumbing.ManagedSecretRetrieveRequest.Builder builder =
        ManagedSecretsPlumbing.ManagedSecretRetrieveRequest.newBuilder();
    builder.setId((id));
    builder.setPublicKey(Plumbing.convertBytesToPlumbing(publicKey));
    ManagedSecretsPlumbing.ManagedSecretRetrieveRequest req = builder.build();
    ManagedSecretsPlumbing.ManagedSecretRetrieveResponse plumbingResponse;
    int tries = 0;
    while (true) {
      try {
        plumbingResponse =
            this.stub
                .withCallCredentials(this.parent.getCallCredentials("ManagedSecrets.Retrieve", req))
                .retrieve(req);
      } catch (Exception e) {
        if (this.parent.shouldRetry(tries, e, this.deadline)) {
          tries++;
          try {
            Thread.sleep(this.parent.exponentialBackoff(tries, this.deadline));
          } catch (Exception ignored) {
          }
          continue;
        }
        throw Plumbing.convertExceptionToPorcelain(e);
      }
      break;
    }
    return Plumbing.convertManagedSecretRetrieveResponseToPorcelain(plumbingResponse);
  }
  /** Validate returns the result of testing the stored credential against the secret engine. */
  public ManagedSecretValidateResponse validate(String id) throws RpcException {
    ManagedSecretsPlumbing.ManagedSecretValidateRequest.Builder builder =
        ManagedSecretsPlumbing.ManagedSecretValidateRequest.newBuilder();
    builder.setId((id));
    ManagedSecretsPlumbing.ManagedSecretValidateRequest req = builder.build();
    ManagedSecretsPlumbing.ManagedSecretValidateResponse plumbingResponse;
    int tries = 0;
    while (true) {
      try {
        plumbingResponse =
            this.stub
                .withCallCredentials(this.parent.getCallCredentials("ManagedSecrets.Validate", req))
                .validate(req);
      } catch (Exception e) {
        if (this.parent.shouldRetry(tries, e, this.deadline)) {
          tries++;
          try {
            Thread.sleep(this.parent.exponentialBackoff(tries, this.deadline));
          } catch (Exception ignored) {
          }
          continue;
        }
        throw Plumbing.convertExceptionToPorcelain(e);
      }
      break;
    }
    return Plumbing.convertManagedSecretValidateResponseToPorcelain(plumbingResponse);
  }
  /** Logs returns the audit records for the managed secret. This may be replaced in the future. */
  public Iterable<ManagedSecretLog> logs(String filter, Object... args) throws RpcException {
    ManagedSecretsPlumbing.ManagedSecretLogsRequest.Builder builder =
        ManagedSecretsPlumbing.ManagedSecretLogsRequest.newBuilder();
    builder.setFilter(Plumbing.quoteFilterArgs(filter, args));
    ListRequestMetadata.Builder metaBuilder = ListRequestMetadata.newBuilder();
    if (this.parent.pageLimit > 0) {
      metaBuilder.setLimit(this.parent.pageLimit);
    }
    if (this.parent.snapshotDate != null) {
      metaBuilder.setSnapshotAt(Plumbing.convertTimestampToPlumbing(this.parent.snapshotDate));
    }
    builder.setMeta(metaBuilder);

    Supplier<PageResult<ManagedSecretLog>> pageFetcher =
        () -> {
          // Note: this closure captures and reuses the builder to set the next page
          ManagedSecretsPlumbing.ManagedSecretLogsRequest req = builder.build();
          ManagedSecretsPlumbing.ManagedSecretLogsResponse plumbingResponse;
          int tries = 0;
          while (true) {
            try {
              plumbingResponse =
                  this.stub
                      .withCallCredentials(
                          this.parent.getCallCredentials("ManagedSecrets.Logs", req))
                      .logs(req);
            } catch (Exception e) {
              if (this.parent.shouldRetry(tries, e, this.deadline)) {
                tries++;
                try {
                  Thread.sleep(this.parent.exponentialBackoff(tries, this.deadline));
                } catch (Exception ignored) {
                }
                continue;
              }
              throw Plumbing.convertExceptionToPorcelain(e);
            }
            break;
          }

          List<ManagedSecretLog> page =
              Plumbing.convertRepeatedManagedSecretLogToPorcelain(
                  plumbingResponse.getManagedSecretLogsList());

          boolean hasNextCursor = plumbingResponse.getMeta().getNextCursor() != "";
          builder.setMeta(
              ListRequestMetadata.newBuilder()
                  .setCursor(plumbingResponse.getMeta().getNextCursor()));

          return new PageResult<ManagedSecretLog>(page, hasNextCursor);
        };

    Iterator<ManagedSecretLog> iterator = new PageIterator<>(pageFetcher);

    return () -> iterator;
  }
}
