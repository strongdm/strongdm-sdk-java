// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protogen. DO NOT EDIT.

package com.strongdm.api;

import java.time.Duration;

/**
 * PostgresEngine is currently unstable, and its API may change, or it may be removed, without a
 * major version bump.
 */
public class PostgresEngine implements SecretEngine {
  private Duration afterReadTtl;
  /**
   * The default time-to-live duration of the password after it's read. Once the ttl has passed, a
   * password will be rotated.
   */
  public Duration getAfterReadTtl() {
    return this.afterReadTtl;
  }
  /**
   * The default time-to-live duration of the password after it's read. Once the ttl has passed, a
   * password will be rotated.
   */
  public void setAfterReadTtl(Duration in) {
    this.afterReadTtl = in;
  }

  private String database;
  /** Database is the database to verify credential against. */
  public String getDatabase() {
    return this.database;
  }
  /** Database is the database to verify credential against. */
  public void setDatabase(String in) {
    this.database = in;
  }

  private String hostname;
  /** Hostname is the hostname or IP address of the Postgres server. */
  public String getHostname() {
    return this.hostname;
  }
  /** Hostname is the hostname or IP address of the Postgres server. */
  public void setHostname(String in) {
    this.hostname = in;
  }

  private String id;
  /** Unique identifier of the Secret Engine. */
  public String getId() {
    return this.id;
  }
  /** Unique identifier of the Secret Engine. */
  public void setId(String in) {
    this.id = in;
  }

  private int keyRotationIntervalDays;
  /** An interval of public/private key rotation for secret engine in days */
  public int getKeyRotationIntervalDays() {
    return this.keyRotationIntervalDays;
  }
  /** An interval of public/private key rotation for secret engine in days */
  public void setKeyRotationIntervalDays(int in) {
    this.keyRotationIntervalDays = in;
  }

  private String name;
  /** Unique human-readable name of the Secret Engine. */
  public String getName() {
    return this.name;
  }
  /** Unique human-readable name of the Secret Engine. */
  public void setName(String in) {
    this.name = in;
  }

  private String password;
  /** Password is the password to connect to the Postgres server. */
  public String getPassword() {
    return this.password;
  }
  /** Password is the password to connect to the Postgres server. */
  public void setPassword(String in) {
    this.password = in;
  }

  private SecretEnginePolicy policy;
  /** Policy for password creation */
  public SecretEnginePolicy getPolicy() {
    return this.policy;
  }
  /** Policy for password creation */
  public void setPolicy(SecretEnginePolicy in) {
    this.policy = in;
  }

  private int port;
  /** Port is the port number of the Postgres server. */
  public int getPort() {
    return this.port;
  }
  /** Port is the port number of the Postgres server. */
  public void setPort(int in) {
    this.port = in;
  }

  private byte[] publicKey;
  /** Public key linked with a secret engine */
  public byte[] getPublicKey() {
    return this.publicKey;
  }
  /** Public key linked with a secret engine */
  public void setPublicKey(byte[] in) {
    this.publicKey = in;
  }

  private String secretStoreId;
  /** Backing secret store identifier */
  public String getSecretStoreId() {
    return this.secretStoreId;
  }
  /** Backing secret store identifier */
  public void setSecretStoreId(String in) {
    this.secretStoreId = in;
  }

  private String secretStoreRootPath;
  /** Backing Secret Store root path where managed secrets are going to be stored */
  public String getSecretStoreRootPath() {
    return this.secretStoreRootPath;
  }
  /** Backing Secret Store root path where managed secrets are going to be stored */
  public void setSecretStoreRootPath(String in) {
    this.secretStoreRootPath = in;
  }

  private java.util.Map<String, String> tags;
  /** Tags is a map of key, value pairs. */
  public java.util.Map<String, String> getTags() {
    java.util.Map<String, String> m = new java.util.HashMap<String, String>();
    if (this.tags != null) {
      m.putAll(this.tags);
    }
    return m;
  }
  /** Tags is a map of key, value pairs. */
  public void setTags(java.util.Map<String, String> in) {
    if (in == null) {
      this.tags = null;
      return;
    }
    this.tags = new java.util.HashMap<String, String>();
    this.tags.putAll(in);
  }

  private boolean tls;
  /** TLS enables TLS/SSL when connecting to the Postgres server. */
  public boolean getTls() {
    return this.tls;
  }
  /** TLS enables TLS/SSL when connecting to the Postgres server. */
  public void setTls(boolean in) {
    this.tls = in;
  }

  private Duration ttl;
  /**
   * The default password time-to-live duration. Once the ttl has passed, a password will be rotated
   * the next time it's requested.
   */
  public Duration getTtl() {
    return this.ttl;
  }
  /**
   * The default password time-to-live duration. Once the ttl has passed, a password will be rotated
   * the next time it's requested.
   */
  public void setTtl(Duration in) {
    this.ttl = in;
  }

  private String username;
  /** Username is the username to connect to the Postgres server. */
  public String getUsername() {
    return this.username;
  }
  /** Username is the username to connect to the Postgres server. */
  public void setUsername(String in) {
    this.username = in;
  }
}
