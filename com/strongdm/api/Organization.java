// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// This file was generated by protogen. DO NOT EDIT.

package com.strongdm.api;

import java.time.Duration;
import java.util.Date;

public class Organization {
  private String authProvider;
  /** The Organization's authentication provider. */
  public String getAuthProvider() {
    return this.authProvider;
  }
  /** The Organization's authentication provider. */
  public void setAuthProvider(String in) {
    this.authProvider = in;
  }

  private Date createdAt;
  /** The time at which the Organization was created. */
  public Date getCreatedAt() {
    return this.createdAt;
  }
  /** The time at which the Organization was created. */
  public void setCreatedAt(Date in) {
    this.createdAt = in;
  }

  private Duration idleTimeout;
  /** The Organization's idle timeout, if enabled. */
  public Duration getIdleTimeout() {
    return this.idleTimeout;
  }
  /** The Organization's idle timeout, if enabled. */
  public void setIdleTimeout(Duration in) {
    this.idleTimeout = in;
  }

  private boolean idleTimeoutEnabled;
  /** Indicates if the Organization has idle timeouts enabled. */
  public boolean getIdleTimeoutEnabled() {
    return this.idleTimeoutEnabled;
  }
  /** Indicates if the Organization has idle timeouts enabled. */
  public void setIdleTimeoutEnabled(boolean in) {
    this.idleTimeoutEnabled = in;
  }

  private String kind;
  /** The Organization's type. */
  public String getKind() {
    return this.kind;
  }
  /** The Organization's type. */
  public void setKind(String in) {
    this.kind = in;
  }

  private String logLocalEncoder;
  /** The Organization's local log encryption encoder. */
  public String getLogLocalEncoder() {
    return this.logLocalEncoder;
  }
  /** The Organization's local log encryption encoder. */
  public void setLogLocalEncoder(String in) {
    this.logLocalEncoder = in;
  }

  private String logLocalFormat;
  /** The Organization's local log format. */
  public String getLogLocalFormat() {
    return this.logLocalFormat;
  }
  /** The Organization's local log format. */
  public void setLogLocalFormat(String in) {
    this.logLocalFormat = in;
  }

  private String logLocalStorage;
  /** The Organization's local log storage. */
  public String getLogLocalStorage() {
    return this.logLocalStorage;
  }
  /** The Organization's local log storage. */
  public void setLogLocalStorage(String in) {
    this.logLocalStorage = in;
  }

  private String logRemoteEncoder;
  /** The Organization's remote log encryption encoder. */
  public String getLogRemoteEncoder() {
    return this.logRemoteEncoder;
  }
  /** The Organization's remote log encryption encoder. */
  public void setLogRemoteEncoder(String in) {
    this.logRemoteEncoder = in;
  }

  private String logSocketPath;
  /** The Organization's socket path for Socket local log storage. */
  public String getLogSocketPath() {
    return this.logSocketPath;
  }
  /** The Organization's socket path for Socket local log storage. */
  public void setLogSocketPath(String in) {
    this.logSocketPath = in;
  }

  private String logTcpAddress;
  /** The Organization's TCP address for TCP or Syslog local log storage. */
  public String getLogTcpAddress() {
    return this.logTcpAddress;
  }
  /** The Organization's TCP address for TCP or Syslog local log storage. */
  public void setLogTcpAddress(String in) {
    this.logTcpAddress = in;
  }

  private boolean mfaEnabled;
  /** Indicates if the Organization has multi-factor authentication enabled. */
  public boolean getMfaEnabled() {
    return this.mfaEnabled;
  }
  /** Indicates if the Organization has multi-factor authentication enabled. */
  public void setMfaEnabled(boolean in) {
    this.mfaEnabled = in;
  }

  private String mfaProvider;
  /** The Organization's multi-factor authentication provider, if enabled. */
  public String getMfaProvider() {
    return this.mfaProvider;
  }
  /** The Organization's multi-factor authentication provider, if enabled. */
  public void setMfaProvider(String in) {
    this.mfaProvider = in;
  }

  private String name;
  /** The Organization's name. */
  public String getName() {
    return this.name;
  }
  /** The Organization's name. */
  public void setName(String in) {
    this.name = in;
  }

  private boolean requireSecretStore;
  /** Indicates if the Organization requires secret stores. */
  public boolean getRequireSecretStore() {
    return this.requireSecretStore;
  }
  /** Indicates if the Organization requires secret stores. */
  public void setRequireSecretStore(boolean in) {
    this.requireSecretStore = in;
  }

  private String samlMetadataUrl;
  /** The Organization's URL for SAML metadata. */
  public String getSamlMetadataUrl() {
    return this.samlMetadataUrl;
  }
  /** The Organization's URL for SAML metadata. */
  public void setSamlMetadataUrl(String in) {
    this.samlMetadataUrl = in;
  }

  private String scimProvider;
  /** The Organization's SCIM provider. */
  public String getScimProvider() {
    return this.scimProvider;
  }
  /** The Organization's SCIM provider. */
  public void setScimProvider(String in) {
    this.scimProvider = in;
  }

  private String sensitiveLabel;
  /** The Organization's label for sensitive resources. */
  public String getSensitiveLabel() {
    return this.sensitiveLabel;
  }
  /** The Organization's label for sensitive resources. */
  public void setSensitiveLabel(String in) {
    this.sensitiveLabel = in;
  }

  private Duration sessionTimeout;
  /** The Organization's session timeout, if enabled. */
  public Duration getSessionTimeout() {
    return this.sessionTimeout;
  }
  /** The Organization's session timeout, if enabled. */
  public void setSessionTimeout(Duration in) {
    this.sessionTimeout = in;
  }

  private boolean sessionTimeoutEnabled;
  /** Indicates if the Organization has session timeouts enabled. */
  public boolean getSessionTimeoutEnabled() {
    return this.sessionTimeoutEnabled;
  }
  /** Indicates if the Organization has session timeouts enabled. */
  public void setSessionTimeoutEnabled(boolean in) {
    this.sessionTimeoutEnabled = in;
  }

  private String sshCertificateAuthorityPublicKey;
  /** The Organization's SSH certificate authority public key. */
  public String getSshCertificateAuthorityPublicKey() {
    return this.sshCertificateAuthorityPublicKey;
  }
  /** The Organization's SSH certificate authority public key. */
  public void setSshCertificateAuthorityPublicKey(String in) {
    this.sshCertificateAuthorityPublicKey = in;
  }

  private Date sshCertificateAuthorityUpdatedAt;
  /** The time at which the Organization's SSH certificate authority was last updated. */
  public Date getSshCertificateAuthorityUpdatedAt() {
    return this.sshCertificateAuthorityUpdatedAt;
  }
  /** The time at which the Organization's SSH certificate authority was last updated. */
  public void setSshCertificateAuthorityUpdatedAt(Date in) {
    this.sshCertificateAuthorityUpdatedAt = in;
  }

  private Date updatedAt;
  /** The time at which the Organization was last updated. */
  public Date getUpdatedAt() {
    return this.updatedAt;
  }
  /** The time at which the Organization was last updated. */
  public void setUpdatedAt(Date in) {
    this.updatedAt = in;
  }

  private String websitesSubdomain;
  /** The Organization's web site domain. */
  public String getWebsitesSubdomain() {
    return this.websitesSubdomain;
  }
  /** The Organization's web site domain. */
  public void setWebsitesSubdomain(String in) {
    this.websitesSubdomain = in;
  }
}
