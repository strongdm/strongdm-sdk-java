// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protogen. DO NOT EDIT.

package com.strongdm.api;

import com.strongdm.api.plumbing.PageIterator;
import com.strongdm.api.plumbing.PageResult;
import com.strongdm.api.plumbing.Plumbing;
import com.strongdm.api.plumbing.SecretEnginesGrpc;
import com.strongdm.api.plumbing.SecretEnginesPlumbing;
import com.strongdm.api.plumbing.SecretStoresPlumbing;
import com.strongdm.api.plumbing.Spec.GetRequestMetadata;
import com.strongdm.api.plumbing.Spec.ListRequestMetadata;
import io.grpc.Deadline;
import io.grpc.ManagedChannel;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;

/** */
public class SecretEngines {
  private final SecretEnginesGrpc.SecretEnginesBlockingStub stub;
  private final Client parent;
  private final Deadline deadline;

  public SecretEngines(ManagedChannel channel, Client client) {
    this.stub = SecretEnginesGrpc.newBlockingStub(channel);
    this.parent = client;
    this.deadline = null;
  }

  private SecretEngines(
      SecretEnginesGrpc.SecretEnginesBlockingStub stub, Client client, Deadline deadline) {
    this.stub = stub;
    this.parent = client;
    this.deadline = deadline;
  }

  /**
   * This function returns a copy of the SecretEngines service which has the given deadline set for
   * all method calls.
   */
  public SecretEngines withDeadlineAfter(long duration, TimeUnit units) {
    Deadline deadline = Deadline.after(duration, units);
    return new SecretEngines(this.stub.withDeadline(deadline), this.parent, deadline);
  }
  /** List returns a list of Secret Engines */
  public Iterable<SecretEngine> list(String filter, Object... args) throws RpcException {
    SecretEnginesPlumbing.SecretEngineListRequest.Builder builder =
        SecretEnginesPlumbing.SecretEngineListRequest.newBuilder();
    builder.setFilter(Plumbing.quoteFilterArgs(filter, args));
    ListRequestMetadata.Builder metaBuilder = ListRequestMetadata.newBuilder();
    if (this.parent.pageLimit > 0) {
      metaBuilder.setLimit(this.parent.pageLimit);
    }
    if (this.parent.snapshotDate != null) {
      metaBuilder.setSnapshotAt(Plumbing.convertTimestampToPlumbing(this.parent.snapshotDate));
    }
    builder.setMeta(metaBuilder);

    Supplier<PageResult<SecretEngine>> pageFetcher =
        () -> {
          // Note: this closure captures and reuses the builder to set the next page
          SecretEnginesPlumbing.SecretEngineListRequest req = builder.build();
          SecretEnginesPlumbing.SecretEngineListResponse plumbingResponse;
          int tries = 0;
          while (true) {
            try {
              plumbingResponse =
                  this.stub
                      .withCallCredentials(
                          this.parent.getCallCredentials("SecretEngines.List", req))
                      .list(req);
            } catch (Exception e) {
              if (this.parent.shouldRetry(tries, e, this.deadline)) {
                tries++;
                try {
                  Thread.sleep(this.parent.exponentialBackoff(tries, this.deadline));
                } catch (Exception ignored) {
                }
                continue;
              }
              throw Plumbing.convertExceptionToPorcelain(e);
            }
            break;
          }

          List<SecretEngine> page =
              Plumbing.convertRepeatedSecretEngineToPorcelain(
                  plumbingResponse.getSecretEnginesList());

          boolean hasNextCursor = plumbingResponse.getMeta().getNextCursor() != "";
          builder.setMeta(
              ListRequestMetadata.newBuilder()
                  .setCursor(plumbingResponse.getMeta().getNextCursor()));

          return new PageResult<SecretEngine>(page, hasNextCursor);
        };

    Iterator<SecretEngine> iterator = new PageIterator<>(pageFetcher);

    return () -> iterator;
  }
  /** Get returns a secret engine details */
  public SecretEngineGetResponse get(String id) throws RpcException {
    SecretEnginesPlumbing.SecretEngineGetRequest.Builder builder =
        SecretEnginesPlumbing.SecretEngineGetRequest.newBuilder();
    if (this.parent.snapshotDate != null) {
      GetRequestMetadata.Builder metaBuilder = GetRequestMetadata.newBuilder();
      metaBuilder.setSnapshotAt(Plumbing.convertTimestampToPlumbing(this.parent.snapshotDate));
      builder.setMeta(metaBuilder);
    }
    builder.setId((id));
    SecretEnginesPlumbing.SecretEngineGetRequest req = builder.build();
    SecretEnginesPlumbing.SecretEngineGetResponse plumbingResponse;
    int tries = 0;
    while (true) {
      try {
        plumbingResponse =
            this.stub
                .withCallCredentials(this.parent.getCallCredentials("SecretEngines.Get", req))
                .get(req);
      } catch (Exception e) {
        if (this.parent.shouldRetry(tries, e, this.deadline)) {
          tries++;
          try {
            Thread.sleep(this.parent.exponentialBackoff(tries, this.deadline));
          } catch (Exception ignored) {
          }
          continue;
        }
        throw Plumbing.convertExceptionToPorcelain(e);
      }
      break;
    }
    return Plumbing.convertSecretEngineGetResponseToPorcelain(plumbingResponse);
  }
  /** Create creates a secret engine */
  public SecretEngineCreateResponse create(SecretEngine secretEngine) throws RpcException {
    SecretEnginesPlumbing.SecretEngineCreateRequest.Builder builder =
        SecretEnginesPlumbing.SecretEngineCreateRequest.newBuilder();
    builder.setSecretEngine(Plumbing.convertSecretEngineToPlumbing(secretEngine));
    SecretEnginesPlumbing.SecretEngineCreateRequest req = builder.build();
    SecretEnginesPlumbing.SecretEngineCreateResponse plumbingResponse;
    int tries = 0;
    while (true) {
      try {
        plumbingResponse =
            this.stub
                .withCallCredentials(this.parent.getCallCredentials("SecretEngines.Create", req))
                .create(req);
      } catch (Exception e) {
        if (this.parent.shouldRetry(tries, e, this.deadline)) {
          tries++;
          try {
            Thread.sleep(this.parent.exponentialBackoff(tries, this.deadline));
          } catch (Exception ignored) {
          }
          continue;
        }
        throw Plumbing.convertExceptionToPorcelain(e);
      }
      break;
    }
    return Plumbing.convertSecretEngineCreateResponseToPorcelain(plumbingResponse);
  }
  /** Update updates a secret engine */
  public SecretEngineUpdateResponse update(SecretEngine secretEngine) throws RpcException {
    SecretEnginesPlumbing.SecretEngineUpdateRequest.Builder builder =
        SecretEnginesPlumbing.SecretEngineUpdateRequest.newBuilder();
    builder.setSecretEngine(Plumbing.convertSecretEngineToPlumbing(secretEngine));
    SecretEnginesPlumbing.SecretEngineUpdateRequest req = builder.build();
    SecretEnginesPlumbing.SecretEngineUpdateResponse plumbingResponse;
    int tries = 0;
    while (true) {
      try {
        plumbingResponse =
            this.stub
                .withCallCredentials(this.parent.getCallCredentials("SecretEngines.Update", req))
                .update(req);
      } catch (Exception e) {
        if (this.parent.shouldRetry(tries, e, this.deadline)) {
          tries++;
          try {
            Thread.sleep(this.parent.exponentialBackoff(tries, this.deadline));
          } catch (Exception ignored) {
          }
          continue;
        }
        throw Plumbing.convertExceptionToPorcelain(e);
      }
      break;
    }
    return Plumbing.convertSecretEngineUpdateResponseToPorcelain(plumbingResponse);
  }
  /** Delete deletes a secret engine */
  public SecretEngineDeleteResponse delete(String id) throws RpcException {
    SecretEnginesPlumbing.SecretEngineDeleteRequest.Builder builder =
        SecretEnginesPlumbing.SecretEngineDeleteRequest.newBuilder();
    builder.setId((id));
    SecretEnginesPlumbing.SecretEngineDeleteRequest req = builder.build();
    SecretEnginesPlumbing.SecretEngineDeleteResponse plumbingResponse;
    int tries = 0;
    while (true) {
      try {
        plumbingResponse =
            this.stub
                .withCallCredentials(this.parent.getCallCredentials("SecretEngines.Delete", req))
                .delete(req);
      } catch (Exception e) {
        if (this.parent.shouldRetry(tries, e, this.deadline)) {
          tries++;
          try {
            Thread.sleep(this.parent.exponentialBackoff(tries, this.deadline));
          } catch (Exception ignored) {
          }
          continue;
        }
        throw Plumbing.convertExceptionToPorcelain(e);
      }
      break;
    }
    return Plumbing.convertSecretEngineDeleteResponseToPorcelain(plumbingResponse);
  }
  /**
   * ListSecretStores returns a list of Secret Stores that can be used as a backing store for Secret
   * Engine
   */
  public Iterable<SecretStore> listSecretStores(String filter, Object... args) throws RpcException {
    SecretStoresPlumbing.SecretStoreListRequest.Builder builder =
        SecretStoresPlumbing.SecretStoreListRequest.newBuilder();
    builder.setFilter(Plumbing.quoteFilterArgs(filter, args));
    ListRequestMetadata.Builder metaBuilder = ListRequestMetadata.newBuilder();
    if (this.parent.pageLimit > 0) {
      metaBuilder.setLimit(this.parent.pageLimit);
    }
    if (this.parent.snapshotDate != null) {
      metaBuilder.setSnapshotAt(Plumbing.convertTimestampToPlumbing(this.parent.snapshotDate));
    }
    builder.setMeta(metaBuilder);

    Supplier<PageResult<SecretStore>> pageFetcher =
        () -> {
          // Note: this closure captures and reuses the builder to set the next page
          SecretStoresPlumbing.SecretStoreListRequest req = builder.build();
          SecretStoresPlumbing.SecretStoreListResponse plumbingResponse;
          int tries = 0;
          while (true) {
            try {
              plumbingResponse =
                  this.stub
                      .withCallCredentials(
                          this.parent.getCallCredentials("SecretEngines.ListSecretStores", req))
                      .listSecretStores(req);
            } catch (Exception e) {
              if (this.parent.shouldRetry(tries, e, this.deadline)) {
                tries++;
                try {
                  Thread.sleep(this.parent.exponentialBackoff(tries, this.deadline));
                } catch (Exception ignored) {
                }
                continue;
              }
              throw Plumbing.convertExceptionToPorcelain(e);
            }
            break;
          }

          List<SecretStore> page =
              Plumbing.convertRepeatedSecretStoreToPorcelain(
                  plumbingResponse.getSecretStoresList());

          boolean hasNextCursor = plumbingResponse.getMeta().getNextCursor() != "";
          builder.setMeta(
              ListRequestMetadata.newBuilder()
                  .setCursor(plumbingResponse.getMeta().getNextCursor()));

          return new PageResult<SecretStore>(page, hasNextCursor);
        };

    Iterator<SecretStore> iterator = new PageIterator<>(pageFetcher);

    return () -> iterator;
  }
  /**
   * GenerateKeys generates a private key, stores it in a secret store and stores a public key in a
   * secret engine
   */
  public GenerateKeysResponse generateKeys(String secretEngineId) throws RpcException {
    SecretEnginesPlumbing.GenerateKeysRequest.Builder builder =
        SecretEnginesPlumbing.GenerateKeysRequest.newBuilder();
    builder.setSecretEngineId((secretEngineId));
    SecretEnginesPlumbing.GenerateKeysRequest req = builder.build();
    SecretEnginesPlumbing.GenerateKeysResponse plumbingResponse;
    int tries = 0;
    while (true) {
      try {
        plumbingResponse =
            this.stub
                .withCallCredentials(
                    this.parent.getCallCredentials("SecretEngines.GenerateKeys", req))
                .generateKeys(req);
      } catch (Exception e) {
        if (this.parent.shouldRetry(tries, e, this.deadline)) {
          tries++;
          try {
            Thread.sleep(this.parent.exponentialBackoff(tries, this.deadline));
          } catch (Exception ignored) {
          }
          continue;
        }
        throw Plumbing.convertExceptionToPorcelain(e);
      }
      break;
    }
    return Plumbing.convertGenerateKeysResponseToPorcelain(plumbingResponse);
  }
  /** Healthcheck triggers a healthcheck for all nodes serving a secret engine */
  public HealthcheckResponse healthcheck(String secretEngineId) throws RpcException {
    SecretEnginesPlumbing.HealthcheckRequest.Builder builder =
        SecretEnginesPlumbing.HealthcheckRequest.newBuilder();
    builder.setSecretEngineId((secretEngineId));
    SecretEnginesPlumbing.HealthcheckRequest req = builder.build();
    SecretEnginesPlumbing.HealthcheckResponse plumbingResponse;
    int tries = 0;
    while (true) {
      try {
        plumbingResponse =
            this.stub
                .withCallCredentials(
                    this.parent.getCallCredentials("SecretEngines.Healthcheck", req))
                .healthcheck(req);
      } catch (Exception e) {
        if (this.parent.shouldRetry(tries, e, this.deadline)) {
          tries++;
          try {
            Thread.sleep(this.parent.exponentialBackoff(tries, this.deadline));
          } catch (Exception ignored) {
          }
          continue;
        }
        throw Plumbing.convertExceptionToPorcelain(e);
      }
      break;
    }
    return Plumbing.convertHealthcheckResponseToPorcelain(plumbingResponse);
  }
  /** Rotate rotates secret engine's credentials */
  public SecretEngineRotateResponse rotate(String id, SecretEnginePasswordPolicy passwordPolicy)
      throws RpcException {
    SecretEnginesPlumbing.SecretEngineRotateRequest.Builder builder =
        SecretEnginesPlumbing.SecretEngineRotateRequest.newBuilder();
    builder.setId((id));
    builder.setPasswordPolicy(Plumbing.convertSecretEnginePasswordPolicyToPlumbing(passwordPolicy));
    SecretEnginesPlumbing.SecretEngineRotateRequest req = builder.build();
    SecretEnginesPlumbing.SecretEngineRotateResponse plumbingResponse;
    int tries = 0;
    while (true) {
      try {
        plumbingResponse =
            this.stub
                .withCallCredentials(this.parent.getCallCredentials("SecretEngines.Rotate", req))
                .rotate(req);
      } catch (Exception e) {
        if (this.parent.shouldRetry(tries, e, this.deadline)) {
          tries++;
          try {
            Thread.sleep(this.parent.exponentialBackoff(tries, this.deadline));
          } catch (Exception ignored) {
          }
          continue;
        }
        throw Plumbing.convertExceptionToPorcelain(e);
      }
      break;
    }
    return Plumbing.convertSecretEngineRotateResponseToPorcelain(plumbingResponse);
  }
}
