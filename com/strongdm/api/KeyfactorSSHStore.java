// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protogen. DO NOT EDIT.

package com.strongdm.api;

public class KeyfactorSSHStore implements SecretStore {
  private String caFilePath;
  /**
   * Path to the root CA that signed the certificate passed to the client for HTTPS connection. This
   * is not required if the CA is trusted by the host operating system. This should be a PEM
   * formatted certificate, and doesn't necessarily have to be the CA that signed CertificateFile.
   */
  public String getCaFilePath() {
    return this.caFilePath;
  }
  /**
   * Path to the root CA that signed the certificate passed to the client for HTTPS connection. This
   * is not required if the CA is trusted by the host operating system. This should be a PEM
   * formatted certificate, and doesn't necessarily have to be the CA that signed CertificateFile.
   */
  public void setCaFilePath(String in) {
    this.caFilePath = in;
  }

  private String certificateFilePath;
  /**
   * Path to client certificate in PEM format. This certificate must contain a client certificate
   * that is recognized by the EJBCA instance represented by Hostname. This PEM file may also
   * contain the private key associated with the certificate, but KeyFile can also be set to
   * configure the private key.
   */
  public String getCertificateFilePath() {
    return this.certificateFilePath;
  }
  /**
   * Path to client certificate in PEM format. This certificate must contain a client certificate
   * that is recognized by the EJBCA instance represented by Hostname. This PEM file may also
   * contain the private key associated with the certificate, but KeyFile can also be set to
   * configure the private key.
   */
  public void setCertificateFilePath(String in) {
    this.certificateFilePath = in;
  }

  private String defaultCertificateAuthorityName;
  /** Name of EJBCA certificate authority that will enroll CSR. */
  public String getDefaultCertificateAuthorityName() {
    return this.defaultCertificateAuthorityName;
  }
  /** Name of EJBCA certificate authority that will enroll CSR. */
  public void setDefaultCertificateAuthorityName(String in) {
    this.defaultCertificateAuthorityName = in;
  }

  private String defaultCertificateProfileName;
  /** Certificate profile name that EJBCA will enroll the CSR with. */
  public String getDefaultCertificateProfileName() {
    return this.defaultCertificateProfileName;
  }
  /** Certificate profile name that EJBCA will enroll the CSR with. */
  public void setDefaultCertificateProfileName(String in) {
    this.defaultCertificateProfileName = in;
  }

  private String defaultEndEntityProfileName;
  /** End entity profile that EJBCA will enroll the CSR with. */
  public String getDefaultEndEntityProfileName() {
    return this.defaultEndEntityProfileName;
  }
  /** End entity profile that EJBCA will enroll the CSR with. */
  public void setDefaultEndEntityProfileName(String in) {
    this.defaultEndEntityProfileName = in;
  }

  private String enrollmentCodeEnvVar;
  /** code used by EJBCA during enrollment. May be left blank if no code is required. */
  public String getEnrollmentCodeEnvVar() {
    return this.enrollmentCodeEnvVar;
  }
  /** code used by EJBCA during enrollment. May be left blank if no code is required. */
  public void setEnrollmentCodeEnvVar(String in) {
    this.enrollmentCodeEnvVar = in;
  }

  private String enrollmentUsernameEnvVar;
  /**
   * username that used by the EJBCA during enrollment. This can be left out. If so, the username
   * must be auto-generated on the Keyfactor side.
   */
  public String getEnrollmentUsernameEnvVar() {
    return this.enrollmentUsernameEnvVar;
  }
  /**
   * username that used by the EJBCA during enrollment. This can be left out. If so, the username
   * must be auto-generated on the Keyfactor side.
   */
  public void setEnrollmentUsernameEnvVar(String in) {
    this.enrollmentUsernameEnvVar = in;
  }

  private String id;
  /** Unique identifier of the SecretStore. */
  public String getId() {
    return this.id;
  }
  /** Unique identifier of the SecretStore. */
  public void setId(String in) {
    this.id = in;
  }

  private String keyFilePath;
  /**
   * Path to private key in PEM format. This file should contain the private key associated with the
   * client certificate configured in CertificateFile.
   */
  public String getKeyFilePath() {
    return this.keyFilePath;
  }
  /**
   * Path to private key in PEM format. This file should contain the private key associated with the
   * client certificate configured in CertificateFile.
   */
  public void setKeyFilePath(String in) {
    this.keyFilePath = in;
  }

  private String name;
  /** Unique human-readable name of the SecretStore. */
  public String getName() {
    return this.name;
  }
  /** Unique human-readable name of the SecretStore. */
  public void setName(String in) {
    this.name = in;
  }

  private String serverAddress;
  /** the host of the Key Factor CA */
  public String getServerAddress() {
    return this.serverAddress;
  }
  /** the host of the Key Factor CA */
  public void setServerAddress(String in) {
    this.serverAddress = in;
  }

  private java.util.Map<String, String> tags;
  /** Tags is a map of key, value pairs. */
  public java.util.Map<String, String> getTags() {
    java.util.Map<String, String> m = new java.util.HashMap<String, String>();
    if (this.tags != null) {
      m.putAll(this.tags);
    }
    return m;
  }
  /** Tags is a map of key, value pairs. */
  public void setTags(java.util.Map<String, String> in) {
    if (in == null) {
      this.tags = null;
      return;
    }
    this.tags = new java.util.HashMap<String, String>();
    this.tags.putAll(in);
  }
}
