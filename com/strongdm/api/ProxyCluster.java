// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protogen. DO NOT EDIT.

package com.strongdm.api;

import java.util.List;

/** ProxyCluster represents a cluster of StrongDM proxies. */
public class ProxyCluster implements Node {
  private String address;
  /** The public hostname/port tuple at which the proxy cluster will be accessible to clients. */
  public String getAddress() {
    return this.address;
  }
  /** The public hostname/port tuple at which the proxy cluster will be accessible to clients. */
  public void setAddress(String in) {
    this.address = in;
  }

  private String id;
  /** Unique identifier of the Proxy Cluster. */
  public String getId() {
    return this.id;
  }
  /** Unique identifier of the Proxy Cluster. */
  public void setId(String in) {
    this.id = in;
  }

  private List<NodeMaintenanceWindow> maintenanceWindows;
  /**
   * Maintenance Windows define when this node is allowed to restart. If a node is requested to
   * restart, it will check each window to determine if any of them permit it to restart, and if any
   * do, it will. This check is repeated per window until the restart is successfully completed.
   *
   * <p>If not set here, may be set on the command line or via an environment variable on the
   * process itself; any server setting will take precedence over local settings. This setting is
   * ineffective for nodes below version 38.44.0.
   *
   * <p>If this setting is not applied via this remote configuration or via local configuration, the
   * default setting is used: always allow restarts if serving no connections, and allow a restart
   * even if serving connections between 7-8 UTC, any day.
   */
  public List<NodeMaintenanceWindow> getMaintenanceWindows() {
    return this.maintenanceWindows;
  }
  /**
   * Maintenance Windows define when this node is allowed to restart. If a node is requested to
   * restart, it will check each window to determine if any of them permit it to restart, and if any
   * do, it will. This check is repeated per window until the restart is successfully completed.
   *
   * <p>If not set here, may be set on the command line or via an environment variable on the
   * process itself; any server setting will take precedence over local settings. This setting is
   * ineffective for nodes below version 38.44.0.
   *
   * <p>If this setting is not applied via this remote configuration or via local configuration, the
   * default setting is used: always allow restarts if serving no connections, and allow a restart
   * even if serving connections between 7-8 UTC, any day.
   */
  public void setMaintenanceWindows(List<NodeMaintenanceWindow> in) {
    this.maintenanceWindows = in;
  }

  private String name;
  /**
   * Unique human-readable name of the proxy cluster. Names must include only letters, numbers, and
   * hyphens (no spaces, underscores, or other special characters). Generated if not provided on
   * create.
   */
  public String getName() {
    return this.name;
  }
  /**
   * Unique human-readable name of the proxy cluster. Names must include only letters, numbers, and
   * hyphens (no spaces, underscores, or other special characters). Generated if not provided on
   * create.
   */
  public void setName(String in) {
    this.name = in;
  }

  private java.util.Map<String, String> tags;
  /** Tags is a map of key, value pairs. */
  public java.util.Map<String, String> getTags() {
    java.util.Map<String, String> m = new java.util.HashMap<String, String>();
    if (this.tags != null) {
      m.putAll(this.tags);
    }
    return m;
  }
  /** Tags is a map of key, value pairs. */
  public void setTags(java.util.Map<String, String> in) {
    if (in == null) {
      this.tags = null;
      return;
    }
    this.tags = new java.util.HashMap<String, String>();
    this.tags.putAll(in);
  }
}
