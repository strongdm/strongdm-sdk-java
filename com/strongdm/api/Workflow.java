// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protogen. DO NOT EDIT.

package com.strongdm.api;

import java.time.Duration;
import java.util.List;

/**
 * Workflows are the collection of rules that define the resources to which access can be requested,
 * the users that can request that access, and the mechanism for approving those requests which can
 * either but automatic approval or a set of users authorized to approve the requests.
 */
public class Workflow {
  private Duration accessRequestFixedDuration;
  /**
   * Fixed Duration of access requests bound to this workflow. If fixed duration is provided, max
   * duration must be empty. If neither max nor fixed duration are provided, requests that bind to
   * this workflow will use the organization-level settings.
   */
  public Duration getAccessRequestFixedDuration() {
    return this.accessRequestFixedDuration;
  }
  /**
   * Fixed Duration of access requests bound to this workflow. If fixed duration is provided, max
   * duration must be empty. If neither max nor fixed duration are provided, requests that bind to
   * this workflow will use the organization-level settings.
   */
  public void setAccessRequestFixedDuration(Duration in) {
    this.accessRequestFixedDuration = in;
  }

  private Duration accessRequestMaxDuration;
  /**
   * Maximum Duration of access requests bound to this workflow. If max duration is provided, fixed
   * duration must be empty. If neither max nor fixed duration are provided, requests that bind to
   * this workflow will use the organization-level settings.
   */
  public Duration getAccessRequestMaxDuration() {
    return this.accessRequestMaxDuration;
  }
  /**
   * Maximum Duration of access requests bound to this workflow. If max duration is provided, fixed
   * duration must be empty. If neither max nor fixed duration are provided, requests that bind to
   * this workflow will use the organization-level settings.
   */
  public void setAccessRequestMaxDuration(Duration in) {
    this.accessRequestMaxDuration = in;
  }

  private List<AccessRule> accessRules;
  /**
   * AccessRules is a list of access rules defining the resources this Workflow provides access to.
   */
  public List<AccessRule> getAccessRules() {
    return this.accessRules;
  }
  /**
   * AccessRules is a list of access rules defining the resources this Workflow provides access to.
   */
  public void setAccessRules(List<AccessRule> in) {
    this.accessRules = in;
  }

  private String approvalFlowId;
  /** Optional approval flow ID identifies an approval flow that linked to the workflow */
  public String getApprovalFlowId() {
    return this.approvalFlowId;
  }
  /** Optional approval flow ID identifies an approval flow that linked to the workflow */
  public void setApprovalFlowId(String in) {
    this.approvalFlowId = in;
  }

  private boolean autoGrant;
  /** Optional auto grant setting to automatically approve requests or not, defaults to false. */
  public boolean getAutoGrant() {
    return this.autoGrant;
  }
  /** Optional auto grant setting to automatically approve requests or not, defaults to false. */
  public void setAutoGrant(boolean in) {
    this.autoGrant = in;
  }

  private String description;
  /** Optional description of the Workflow. */
  public String getDescription() {
    return this.description;
  }
  /** Optional description of the Workflow. */
  public void setDescription(String in) {
    this.description = in;
  }

  private boolean enabled;
  /**
   * Optional enabled state for workflow. This setting may be overridden by the system if the
   * workflow doesn't meet the requirements to be enabled or if other conditions prevent enabling
   * the workflow. The requirements to enable a workflow are that the workflow must be either set up
   * for with auto grant enabled or have one or more WorkflowApprovers created for the workflow.
   */
  public boolean getEnabled() {
    return this.enabled;
  }
  /**
   * Optional enabled state for workflow. This setting may be overridden by the system if the
   * workflow doesn't meet the requirements to be enabled or if other conditions prevent enabling
   * the workflow. The requirements to enable a workflow are that the workflow must be either set up
   * for with auto grant enabled or have one or more WorkflowApprovers created for the workflow.
   */
  public void setEnabled(boolean in) {
    this.enabled = in;
  }

  private String id;
  /** Unique identifier of the Workflow. */
  public String getId() {
    return this.id;
  }
  /** Unique identifier of the Workflow. */
  public void setId(String in) {
    this.id = in;
  }

  private String name;
  /** Unique human-readable name of the Workflow. */
  public String getName() {
    return this.name;
  }
  /** Unique human-readable name of the Workflow. */
  public void setName(String in) {
    this.name = in;
  }

  private long weight;
  /** Optional weight for workflow to specify it's priority in matching a request. */
  public long getWeight() {
    return this.weight;
  }
  /** Optional weight for workflow to specify it's priority in matching a request. */
  public void setWeight(long in) {
    this.weight = in;
  }
}
