// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protogen. DO NOT EDIT.

package com.strongdm.api;

public class NodeMaintenanceWindow {
  private String cronSchedule;
  /**
   * Cron job syntax for when this maintenance window is active. On this schedule, associated nodes
   * will restart if requested, provided other checks allow the restart to proceed. Times are
   * represented in UTC. e.g. * 7 * * 0,6 to check for a restart at every minute from 7:00 to 8:00
   * UTC on Sunday and Saturday. Not all possible inputs are supported: the month and day of month
   * selections must be '*'.
   */
  public String getCronSchedule() {
    return this.cronSchedule;
  }
  /**
   * Cron job syntax for when this maintenance window is active. On this schedule, associated nodes
   * will restart if requested, provided other checks allow the restart to proceed. Times are
   * represented in UTC. e.g. * 7 * * 0,6 to check for a restart at every minute from 7:00 to 8:00
   * UTC on Sunday and Saturday. Not all possible inputs are supported: the month and day of month
   * selections must be '*'.
   */
  public void setCronSchedule(String in) {
    this.cronSchedule = in;
  }

  private boolean requireIdleness;
  /**
   * Require Idleness defines whether this window can sever live connections. If true, this window
   * will not allow a node to be restarted unless it is serving no connections. If false, given a
   * restart of the node has been requested (for an update, usually), the node will restart as soon
   * as it enters an allowed day / hour combination. At least one maintenance window, out of all
   * configured windows for a node, must have this as false.
   */
  public boolean getRequireIdleness() {
    return this.requireIdleness;
  }
  /**
   * Require Idleness defines whether this window can sever live connections. If true, this window
   * will not allow a node to be restarted unless it is serving no connections. If false, given a
   * restart of the node has been requested (for an update, usually), the node will restart as soon
   * as it enters an allowed day / hour combination. At least one maintenance window, out of all
   * configured windows for a node, must have this as false.
   */
  public void setRequireIdleness(boolean in) {
    this.requireIdleness = in;
  }
}
