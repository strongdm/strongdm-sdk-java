// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protogen. DO NOT EDIT.

package com.strongdm.api;

import com.strongdm.api.plumbing.PageIterator;
import com.strongdm.api.plumbing.PageResult;
import com.strongdm.api.plumbing.Plumbing;
import com.strongdm.api.plumbing.RolesGrpc;
import com.strongdm.api.plumbing.RolesPlumbing;
import com.strongdm.api.plumbing.Spec.GetRequestMetadata;
import com.strongdm.api.plumbing.Spec.ListRequestMetadata;
import io.grpc.ManagedChannel;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;

/**
 * A Role has a list of access rules which determine which Resources the members of the Role have
 * access to. An Account can be a member of multiple Roles via AccountAttachments.
 */
public class Roles implements SnapshotRoles {
  private final RolesGrpc.RolesBlockingStub stub;
  private final Client parent;

  public Roles(ManagedChannel channel, Client client) {

    this.stub = RolesGrpc.newBlockingStub(channel);
    this.parent = client;
  }

  private Roles(RolesGrpc.RolesBlockingStub stub, Client client) {
    this.stub = stub;
    this.parent = client;
  }

  /**
   * This function returns a copy of the Roles service which has the given deadline set for all
   * method calls.
   */
  public Roles withDeadlineAfter(long duration, TimeUnit units) {
    return new Roles(this.stub.withDeadlineAfter(duration, units), this.parent);
  }
  /** Create registers a new Role. */
  public RoleCreateResponse create(Role role) throws RpcException {
    RolesPlumbing.RoleCreateRequest.Builder builder = RolesPlumbing.RoleCreateRequest.newBuilder();
    builder.setRole(Plumbing.convertRoleToPlumbing(role));
    RolesPlumbing.RoleCreateRequest req = builder.build();
    RolesPlumbing.RoleCreateResponse plumbingResponse;
    int tries = 0;
    while (true) {
      try {
        plumbingResponse =
            this.stub
                .withCallCredentials(this.parent.getCallCredentials("Roles.Create", req))
                .create(req);
      } catch (Exception e) {
        if (this.parent.shouldRetry(tries, e)) {
          tries++;
          this.parent.jitterSleep(tries);
          continue;
        }
        throw Plumbing.convertExceptionToPorcelain(e);
      }
      break;
    }
    return Plumbing.convertRoleCreateResponseToPorcelain(plumbingResponse);
  }
  /** Get reads one Role by ID. */
  public RoleGetResponse get(String id) throws RpcException {
    RolesPlumbing.RoleGetRequest.Builder builder = RolesPlumbing.RoleGetRequest.newBuilder();
    if (this.parent.snapshotDate != null) {
      GetRequestMetadata.Builder metaBuilder = GetRequestMetadata.newBuilder();
      metaBuilder.setSnapshotAt(Plumbing.convertTimestampToPlumbing(this.parent.snapshotDate));
      builder.setMeta(metaBuilder);
    }
    builder.setId((id));
    RolesPlumbing.RoleGetRequest req = builder.build();
    RolesPlumbing.RoleGetResponse plumbingResponse;
    int tries = 0;
    while (true) {
      try {
        plumbingResponse =
            this.stub
                .withCallCredentials(this.parent.getCallCredentials("Roles.Get", req))
                .get(req);
      } catch (Exception e) {
        if (this.parent.shouldRetry(tries, e)) {
          tries++;
          this.parent.jitterSleep(tries);
          continue;
        }
        throw Plumbing.convertExceptionToPorcelain(e);
      }
      break;
    }
    return Plumbing.convertRoleGetResponseToPorcelain(plumbingResponse);
  }
  /** Update replaces all the fields of a Role by ID. */
  public RoleUpdateResponse update(Role role) throws RpcException {
    RolesPlumbing.RoleUpdateRequest.Builder builder = RolesPlumbing.RoleUpdateRequest.newBuilder();
    builder.setRole(Plumbing.convertRoleToPlumbing(role));
    RolesPlumbing.RoleUpdateRequest req = builder.build();
    RolesPlumbing.RoleUpdateResponse plumbingResponse;
    int tries = 0;
    while (true) {
      try {
        plumbingResponse =
            this.stub
                .withCallCredentials(this.parent.getCallCredentials("Roles.Update", req))
                .update(req);
      } catch (Exception e) {
        if (this.parent.shouldRetry(tries, e)) {
          tries++;
          this.parent.jitterSleep(tries);
          continue;
        }
        throw Plumbing.convertExceptionToPorcelain(e);
      }
      break;
    }
    return Plumbing.convertRoleUpdateResponseToPorcelain(plumbingResponse);
  }
  /** Delete removes a Role by ID. */
  public RoleDeleteResponse delete(String id) throws RpcException {
    RolesPlumbing.RoleDeleteRequest.Builder builder = RolesPlumbing.RoleDeleteRequest.newBuilder();
    builder.setId((id));
    RolesPlumbing.RoleDeleteRequest req = builder.build();
    RolesPlumbing.RoleDeleteResponse plumbingResponse;
    int tries = 0;
    while (true) {
      try {
        plumbingResponse =
            this.stub
                .withCallCredentials(this.parent.getCallCredentials("Roles.Delete", req))
                .delete(req);
      } catch (Exception e) {
        if (this.parent.shouldRetry(tries, e)) {
          tries++;
          this.parent.jitterSleep(tries);
          continue;
        }
        throw Plumbing.convertExceptionToPorcelain(e);
      }
      break;
    }
    return Plumbing.convertRoleDeleteResponseToPorcelain(plumbingResponse);
  }
  /** List gets a list of Roles matching a given set of criteria. */
  public Iterable<Role> list(String filter, Object... args) throws RpcException {
    RolesPlumbing.RoleListRequest.Builder builder = RolesPlumbing.RoleListRequest.newBuilder();
    builder.setFilter(Plumbing.quoteFilterArgs(filter, args));
    ListRequestMetadata.Builder metaBuilder = ListRequestMetadata.newBuilder();
    Object pageSizeOption = this.parent.testOptions.get("PageSize");
    if (pageSizeOption instanceof Integer) {
      metaBuilder.setLimit((int) pageSizeOption);
    }
    if (this.parent.snapshotDate != null) {
      metaBuilder.setSnapshotAt(Plumbing.convertTimestampToPlumbing(this.parent.snapshotDate));
    }
    builder.setMeta(metaBuilder);

    Supplier<PageResult<Role>> pageFetcher =
        () -> {
          // Note: this closure captures and reuses the builder to set the next page
          RolesPlumbing.RoleListRequest req = builder.build();
          RolesPlumbing.RoleListResponse plumbingResponse;
          int tries = 0;
          while (true) {
            try {
              plumbingResponse =
                  this.stub
                      .withCallCredentials(this.parent.getCallCredentials("Roles.List", req))
                      .list(req);
            } catch (Exception e) {
              if (this.parent.shouldRetry(tries, e)) {
                tries++;
                this.parent.jitterSleep(tries);
                continue;
              }
              throw Plumbing.convertExceptionToPorcelain(e);
            }
            break;
          }

          List<Role> page =
              Plumbing.convertRepeatedRoleToPorcelain(plumbingResponse.getRolesList());

          boolean hasNextCursor = plumbingResponse.getMeta().getNextCursor() != "";
          builder.setMeta(
              ListRequestMetadata.newBuilder()
                  .setCursor(plumbingResponse.getMeta().getNextCursor()));

          return new PageResult<Role>(page, hasNextCursor);
        };

    Iterator<Role> iterator = new PageIterator<>(pageFetcher);

    return () -> iterator;
  }
}
