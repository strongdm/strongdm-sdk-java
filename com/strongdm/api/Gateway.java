// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protogen. DO NOT EDIT.

package com.strongdm.api;

import java.util.List;

/** Gateway represents a StrongDM CLI installation running in gateway mode. */
public class Gateway implements Node {
  private String bindAddress;
  /**
   * The hostname/port tuple which the gateway daemon will bind to. If not provided on create, set
   * to "0.0.0.0:listen_address_port".
   */
  public String getBindAddress() {
    return this.bindAddress;
  }
  /**
   * The hostname/port tuple which the gateway daemon will bind to. If not provided on create, set
   * to "0.0.0.0:listen_address_port".
   */
  public void setBindAddress(String in) {
    this.bindAddress = in;
  }

  private String connectsTo;
  /** ConnectsTo can be used to restrict the peering between relays and gateways. */
  public String getConnectsTo() {
    return this.connectsTo;
  }
  /** ConnectsTo can be used to restrict the peering between relays and gateways. */
  public void setConnectsTo(String in) {
    this.connectsTo = in;
  }

  private String device;
  /** Device is a read only device name uploaded by the gateway process when it comes online. */
  public String getDevice() {
    return this.device;
  }
  /** Device is a read only device name uploaded by the gateway process when it comes online. */
  public void setDevice(String in) {
    this.device = in;
  }

  private String gatewayFilter;
  /** GatewayFilter can be used to restrict the peering between relays and gateways. Deprecated. */
  public String getGatewayFilter() {
    return this.gatewayFilter;
  }
  /** GatewayFilter can be used to restrict the peering between relays and gateways. Deprecated. */
  public void setGatewayFilter(String in) {
    this.gatewayFilter = in;
  }

  private String id;
  /** Unique identifier of the Gateway. */
  public String getId() {
    return this.id;
  }
  /** Unique identifier of the Gateway. */
  public void setId(String in) {
    this.id = in;
  }

  private String listenAddress;
  /** The public hostname/port tuple at which the gateway will be accessible to clients. */
  public String getListenAddress() {
    return this.listenAddress;
  }
  /** The public hostname/port tuple at which the gateway will be accessible to clients. */
  public void setListenAddress(String in) {
    this.listenAddress = in;
  }

  private String location;
  /**
   * Location is a read only network location uploaded by the gateway process when it comes online.
   */
  public String getLocation() {
    return this.location;
  }
  /**
   * Location is a read only network location uploaded by the gateway process when it comes online.
   */
  public void setLocation(String in) {
    this.location = in;
  }

  private List<NodeMaintenanceWindow> maintenanceWindows;
  /**
   * Maintenance Windows define when this node is allowed to restart. If a node is requested to
   * restart, it will check each window to determine if any of them permit it to restart, and if any
   * do, it will. This check is repeated per window until the restart is successfully completed.
   *
   * <p>If not set here, may be set on the command line or via an environment variable on the
   * process itself; any server setting will take precedence over local settings. This setting is
   * ineffective for nodes below version 38.44.0.
   *
   * <p>If this setting is not applied via this remote configuration or via local configuration, the
   * default setting is used: always allow restarts if serving no connections, and allow a restart
   * even if serving connections between 7-8 UTC, any day.
   */
  public List<NodeMaintenanceWindow> getMaintenanceWindows() {
    return this.maintenanceWindows;
  }
  /**
   * Maintenance Windows define when this node is allowed to restart. If a node is requested to
   * restart, it will check each window to determine if any of them permit it to restart, and if any
   * do, it will. This check is repeated per window until the restart is successfully completed.
   *
   * <p>If not set here, may be set on the command line or via an environment variable on the
   * process itself; any server setting will take precedence over local settings. This setting is
   * ineffective for nodes below version 38.44.0.
   *
   * <p>If this setting is not applied via this remote configuration or via local configuration, the
   * default setting is used: always allow restarts if serving no connections, and allow a restart
   * even if serving connections between 7-8 UTC, any day.
   */
  public void setMaintenanceWindows(List<NodeMaintenanceWindow> in) {
    this.maintenanceWindows = in;
  }

  private String name;
  /**
   * Unique human-readable name of the Gateway. Node names must include only letters, numbers, and
   * hyphens (no spaces, underscores, or other special characters). Generated if not provided on
   * create.
   */
  public String getName() {
    return this.name;
  }
  /**
   * Unique human-readable name of the Gateway. Node names must include only letters, numbers, and
   * hyphens (no spaces, underscores, or other special characters). Generated if not provided on
   * create.
   */
  public void setName(String in) {
    this.name = in;
  }

  private String state;
  /**
   * The current state of the gateway. One of: "new", "verifying_restart", "restarting", "started",
   * "stopped", "dead", "unknown"
   */
  public String getState() {
    return this.state;
  }
  /**
   * The current state of the gateway. One of: "new", "verifying_restart", "restarting", "started",
   * "stopped", "dead", "unknown"
   */
  public void setState(String in) {
    this.state = in;
  }

  private java.util.Map<String, String> tags;
  /** Tags is a map of key, value pairs. */
  public java.util.Map<String, String> getTags() {
    java.util.Map<String, String> m = new java.util.HashMap<String, String>();
    if (this.tags != null) {
      m.putAll(this.tags);
    }
    return m;
  }
  /** Tags is a map of key, value pairs. */
  public void setTags(java.util.Map<String, String> in) {
    if (in == null) {
      this.tags = null;
      return;
    }
    this.tags = new java.util.HashMap<String, String>();
    this.tags.putAll(in);
  }

  private String version;
  /**
   * Version is a read only sdm binary version uploaded by the gateway process when it comes online.
   */
  public String getVersion() {
    return this.version;
  }
  /**
   * Version is a read only sdm binary version uploaded by the gateway process when it comes online.
   */
  public void setVersion(String in) {
    this.version = in;
  }
}
