// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protogen. DO NOT EDIT.

package com.strongdm.api;

import java.time.Duration;
import java.util.Date;

/**
 * A Query is a record of a single client request to a resource, such as a SQL query. Longer-running
 * queries including long-running SSH commands and SSH, RDP, or Kubernetes interactive sessions will
 * return two Query records with the same identifier, one record at the start of the query and a
 * second record upon the completion of the query with additional detail.
 */
public class Query {
  private String accountEmail;
  /**
   * The email of the account performing this query, at the time the query was executed. If the
   * account email is later changed, that change will not be reflected via this field.
   */
  public String getAccountEmail() {
    return this.accountEmail;
  }
  /**
   * The email of the account performing this query, at the time the query was executed. If the
   * account email is later changed, that change will not be reflected via this field.
   */
  public void setAccountEmail(String in) {
    this.accountEmail = in;
  }

  private String accountFirstName;
  /**
   * The given name of the account performing this query, at the time the query was executed. If the
   * account is later renamed, that change will not be reflected via this field.
   */
  public String getAccountFirstName() {
    return this.accountFirstName;
  }
  /**
   * The given name of the account performing this query, at the time the query was executed. If the
   * account is later renamed, that change will not be reflected via this field.
   */
  public void setAccountFirstName(String in) {
    this.accountFirstName = in;
  }

  private String accountId;
  /** Unique identifier of the Account that performed the Query. */
  public String getAccountId() {
    return this.accountId;
  }
  /** Unique identifier of the Account that performed the Query. */
  public void setAccountId(String in) {
    this.accountId = in;
  }

  private String accountLastName;
  /**
   * The family name of the account performing this query, at the time the query was executed. If
   * the account is later renamed, that change will not be reflected via this field.
   */
  public String getAccountLastName() {
    return this.accountLastName;
  }
  /**
   * The family name of the account performing this query, at the time the query was executed. If
   * the account is later renamed, that change will not be reflected via this field.
   */
  public void setAccountLastName(String in) {
    this.accountLastName = in;
  }

  private java.util.Map<String, String> accountTags;
  /**
   * The tags of the account accessed, at the time the query was executed. If the account tags are
   * later changed, that change will not be reflected via this field.
   */
  public java.util.Map<String, String> getAccountTags() {
    java.util.Map<String, String> m = new java.util.HashMap<String, String>();
    if (this.accountTags != null) {
      m.putAll(this.accountTags);
    }
    return m;
  }
  /**
   * The tags of the account accessed, at the time the query was executed. If the account tags are
   * later changed, that change will not be reflected via this field.
   */
  public void setAccountTags(java.util.Map<String, String> in) {
    if (in == null) {
      this.accountTags = null;
      return;
    }
    this.accountTags = new java.util.HashMap<String, String>();
    this.accountTags.putAll(in);
  }

  private String authzJson;
  /** Authorization metadata associated with this query. */
  public String getAuthzJson() {
    return this.authzJson;
  }
  /** Authorization metadata associated with this query. */
  public void setAuthzJson(String in) {
    this.authzJson = in;
  }

  private QueryCapture capture;
  /**
   * For queries against SSH, Kubernetes, and RDP resources, this contains additional information
   * about the captured query.
   */
  public QueryCapture getCapture() {
    return this.capture;
  }
  /**
   * For queries against SSH, Kubernetes, and RDP resources, this contains additional information
   * about the captured query.
   */
  public void setCapture(QueryCapture in) {
    this.capture = in;
  }

  private String clientIp;
  /** The IP address the Query was performed from, as detected at the StrongDM control plane. */
  public String getClientIp() {
    return this.clientIp;
  }
  /** The IP address the Query was performed from, as detected at the StrongDM control plane. */
  public void setClientIp(String in) {
    this.clientIp = in;
  }

  private Date completedAt;
  /**
   * The time at which the Query was completed. Empty if this record indicates the start of a
   * long-running query.
   */
  public Date getCompletedAt() {
    return this.completedAt;
  }
  /**
   * The time at which the Query was completed. Empty if this record indicates the start of a
   * long-running query.
   */
  public void setCompletedAt(Date in) {
    this.completedAt = in;
  }

  private Duration duration;
  /** The duration of the Query. */
  public Duration getDuration() {
    return this.duration;
  }
  /** The duration of the Query. */
  public void setDuration(Duration in) {
    this.duration = in;
  }

  private String egressNodeId;
  /** The unique ID of the node through which the Resource was accessed. */
  public String getEgressNodeId() {
    return this.egressNodeId;
  }
  /** The unique ID of the node through which the Resource was accessed. */
  public void setEgressNodeId(String in) {
    this.egressNodeId = in;
  }

  private boolean encrypted;
  /** Indicates that the body of the Query is encrypted. */
  public boolean getEncrypted() {
    return this.encrypted;
  }
  /** Indicates that the body of the Query is encrypted. */
  public void setEncrypted(boolean in) {
    this.encrypted = in;
  }

  private String id;
  /** Unique identifier of the Query. */
  public String getId() {
    return this.id;
  }
  /** Unique identifier of the Query. */
  public void setId(String in) {
    this.id = in;
  }

  private String identityAliasUsername;
  /** The username of the IdentityAlias used to access the Resource. */
  public String getIdentityAliasUsername() {
    return this.identityAliasUsername;
  }
  /** The username of the IdentityAlias used to access the Resource. */
  public void setIdentityAliasUsername(String in) {
    this.identityAliasUsername = in;
  }

  private String queryBody;
  /**
   * The captured content of the Query. For queries against SSH, Kubernetes, and RDP resources, this
   * contains a JSON representation of the QueryCapture.
   */
  public String getQueryBody() {
    return this.queryBody;
  }
  /**
   * The captured content of the Query. For queries against SSH, Kubernetes, and RDP resources, this
   * contains a JSON representation of the QueryCapture.
   */
  public void setQueryBody(String in) {
    this.queryBody = in;
  }

  private String queryCategory;
  /** The general category of Resource against which Query was performed, e.g. "web" or "cloud". */
  public String getQueryCategory() {
    return this.queryCategory;
  }
  /** The general category of Resource against which Query was performed, e.g. "web" or "cloud". */
  public void setQueryCategory(String in) {
    this.queryCategory = in;
  }

  private String queryHash;
  /** The hash of the body of the Query. */
  public String getQueryHash() {
    return this.queryHash;
  }
  /** The hash of the body of the Query. */
  public void setQueryHash(String in) {
    this.queryHash = in;
  }

  private String queryKey;
  /**
   * The symmetric key used to encrypt the body of this Query and its replay if replayable. If the
   * Query is encrypted, this field contains an encrypted symmetric key in base64 encoding. This key
   * must be decrypted with the organization's private key to obtain the symmetric key needed to
   * decrypt the body. If the Query is not encrypted, this field is empty.
   */
  public String getQueryKey() {
    return this.queryKey;
  }
  /**
   * The symmetric key used to encrypt the body of this Query and its replay if replayable. If the
   * Query is encrypted, this field contains an encrypted symmetric key in base64 encoding. This key
   * must be decrypted with the organization's private key to obtain the symmetric key needed to
   * decrypt the body. If the Query is not encrypted, this field is empty.
   */
  public void setQueryKey(String in) {
    this.queryKey = in;
  }

  private long recordCount;
  /** The number of records returned by the Query, for a database Resource. */
  public long getRecordCount() {
    return this.recordCount;
  }
  /** The number of records returned by the Query, for a database Resource. */
  public void setRecordCount(long in) {
    this.recordCount = in;
  }

  private String remoteIdentityUsername;
  /** The username of the RemoteIdentity used to access the Resource. */
  @Deprecated
  public String getRemoteIdentityUsername() {
    return this.remoteIdentityUsername;
  }
  /** The username of the RemoteIdentity used to access the Resource. */
  @Deprecated
  public void setRemoteIdentityUsername(String in) {
    this.remoteIdentityUsername = in;
  }

  private boolean replayable;
  /** Indicates that the Query is replayable, e.g. for some SSH or K8s sessions. */
  public boolean getReplayable() {
    return this.replayable;
  }
  /** Indicates that the Query is replayable, e.g. for some SSH or K8s sessions. */
  public void setReplayable(boolean in) {
    this.replayable = in;
  }

  private String resourceId;
  /** Unique identifier of the Resource against which the Query was performed. */
  public String getResourceId() {
    return this.resourceId;
  }
  /** Unique identifier of the Resource against which the Query was performed. */
  public void setResourceId(String in) {
    this.resourceId = in;
  }

  private String resourceName;
  /**
   * The name of the resource accessed, at the time the query was executed. If the resource is later
   * renamed, that change will not be reflected via this field.
   */
  public String getResourceName() {
    return this.resourceName;
  }
  /**
   * The name of the resource accessed, at the time the query was executed. If the resource is later
   * renamed, that change will not be reflected via this field.
   */
  public void setResourceName(String in) {
    this.resourceName = in;
  }

  private java.util.Map<String, String> resourceTags;
  /**
   * The tags of the resource accessed, at the time the query was executed. If the resource tags are
   * later changed, that change will not be reflected via this field.
   */
  public java.util.Map<String, String> getResourceTags() {
    java.util.Map<String, String> m = new java.util.HashMap<String, String>();
    if (this.resourceTags != null) {
      m.putAll(this.resourceTags);
    }
    return m;
  }
  /**
   * The tags of the resource accessed, at the time the query was executed. If the resource tags are
   * later changed, that change will not be reflected via this field.
   */
  public void setResourceTags(java.util.Map<String, String> in) {
    if (in == null) {
      this.resourceTags = null;
      return;
    }
    this.resourceTags = new java.util.HashMap<String, String>();
    this.resourceTags.putAll(in);
  }

  private String resourceType;
  /**
   * The specific type of Resource against which the Query was performed, e.g. "ssh" or "postgres".
   */
  public String getResourceType() {
    return this.resourceType;
  }
  /**
   * The specific type of Resource against which the Query was performed, e.g. "ssh" or "postgres".
   */
  public void setResourceType(String in) {
    this.resourceType = in;
  }

  private String sourceIp;
  /** The IP address the Query was performed from, as detected at the ingress gateway. */
  public String getSourceIp() {
    return this.sourceIp;
  }
  /** The IP address the Query was performed from, as detected at the ingress gateway. */
  public void setSourceIp(String in) {
    this.sourceIp = in;
  }

  private String target;
  /** The target destination of the query, in host:port format. */
  public String getTarget() {
    return this.target;
  }
  /** The target destination of the query, in host:port format. */
  public void setTarget(String in) {
    this.target = in;
  }

  private Date timestamp;
  /** The time at which the Query was started. */
  public Date getTimestamp() {
    return this.timestamp;
  }
  /** The time at which the Query was started. */
  public void setTimestamp(Date in) {
    this.timestamp = in;
  }
}
