// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protogen. DO NOT EDIT.

package com.strongdm.api;

import java.time.Duration;

/** ApprovalWorkflowStep links an approval workflow step to an ApprovalWorkflow */
public class ApprovalWorkflowStep {
  private String approvalFlowId;
  /** The approval flow id specified the approval workflow that this step belongs to */
  public String getApprovalFlowId() {
    return this.approvalFlowId;
  }
  /** The approval flow id specified the approval workflow that this step belongs to */
  public void setApprovalFlowId(String in) {
    this.approvalFlowId = in;
  }

  private String id;
  /** Unique identifier of the ApprovalWorkflowStep. */
  public String getId() {
    return this.id;
  }
  /** Unique identifier of the ApprovalWorkflowStep. */
  public void setId(String in) {
    this.id = in;
  }

  private String quantifier;
  /**
   * Whether "any" or "all" approvers must approve for this approval step to pass. Read only field
   * for history commands.
   */
  public String getQuantifier() {
    return this.quantifier;
  }
  /**
   * Whether "any" or "all" approvers must approve for this approval step to pass. Read only field
   * for history commands.
   */
  public void setQuantifier(String in) {
    this.quantifier = in;
  }

  private Duration skipAfter;
  /**
   * Duration after which this approval step will be skipped if no approval is given. Read only
   * field for history commands.
   */
  public Duration getSkipAfter() {
    return this.skipAfter;
  }
  /**
   * Duration after which this approval step will be skipped if no approval is given. Read only
   * field for history commands.
   */
  public void setSkipAfter(Duration in) {
    this.skipAfter = in;
  }

  private int stepOrder;
  /**
   * The position of the approval step in a sequence of approval steps for an approval workflow.
   * Read only field for history commands.
   */
  public int getStepOrder() {
    return this.stepOrder;
  }
  /**
   * The position of the approval step in a sequence of approval steps for an approval workflow.
   * Read only field for history commands.
   */
  public void setStepOrder(int in) {
    this.stepOrder = in;
  }
}
