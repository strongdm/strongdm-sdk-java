// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// This file was generated by protogen. DO NOT EDIT.

package com.strongdm.api;

import com.strongdm.api.plumbing.PageIterator;
import com.strongdm.api.plumbing.PageResult;
import com.strongdm.api.plumbing.Plumbing;
import com.strongdm.api.plumbing.ResourcesGrpc;
import com.strongdm.api.plumbing.ResourcesPlumbing;
import com.strongdm.api.plumbing.Spec.ListRequestMetadata;
import io.grpc.ManagedChannel;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;

/**
 * Resources are databases, servers, clusters, websites, or clouds that strongDM delegates access
 * to.
 */
public class Resources {
  private final ResourcesGrpc.ResourcesBlockingStub stub;
  private final Client parent;

  public Resources(ManagedChannel channel, Client client) {

    this.stub = ResourcesGrpc.newBlockingStub(channel);
    this.parent = client;
  }

  private Resources(ResourcesGrpc.ResourcesBlockingStub stub, Client client) {
    this.stub = stub;
    this.parent = client;
  }

  /**
   * This function returns a copy of the Resources service which has the given deadline set for all
   * method calls.
   */
  public Resources withDeadlineAfter(long duration, TimeUnit units) {
    return new Resources(this.stub.withDeadlineAfter(duration, units), this.parent);
  }
  /** EnumerateTags gets a list of the filter matching tags. */
  public Iterable<Tag> enumerateTags(String filter, Object... args) throws RpcException {
    ResourcesPlumbing.EnumerateTagsRequest.Builder builder =
        ResourcesPlumbing.EnumerateTagsRequest.newBuilder();
    builder.setFilter(Plumbing.quoteFilterArgs(filter, args));
    ListRequestMetadata.Builder metaBuilder = ListRequestMetadata.newBuilder();
    Object pageSizeOption = this.parent.testOptions.get("PageSize");
    if (pageSizeOption instanceof Integer) {
      metaBuilder.setLimit((int) pageSizeOption);
    }
    builder.setMeta(metaBuilder);

    Supplier<PageResult<Tag>> pageFetcher =
        () -> {
          // Note: this closure captures and reuses the builder to set the next page
          ResourcesPlumbing.EnumerateTagsRequest req = builder.build();
          ResourcesPlumbing.EnumerateTagsResponse plumbingResponse;
          int tries = 0;
          while (true) {
            try {
              plumbingResponse =
                  this.stub
                      .withCallCredentials(
                          this.parent.getCallCredentials("Resources.EnumerateTags", req))
                      .enumerateTags(req);
            } catch (Exception e) {
              if (this.parent.shouldRetry(tries, e)) {
                tries++;
                this.parent.jitterSleep(tries);
                continue;
              }
              throw Plumbing.convertExceptionToPorcelain(e);
            }
            break;
          }

          List<Tag> page =
              Plumbing.convertRepeatedTagToPorcelain(plumbingResponse.getMatchesList());

          boolean hasNextCursor = plumbingResponse.getMeta().getNextCursor() != "";
          builder.setMeta(
              ListRequestMetadata.newBuilder()
                  .setCursor(plumbingResponse.getMeta().getNextCursor()));

          return new PageResult<Tag>(page, hasNextCursor);
        };

    Iterator<Tag> iterator = new PageIterator<>(pageFetcher);

    return () -> iterator;
  }
  /** Create registers a new Resource. */
  public ResourceCreateResponse create(Resource resource) throws RpcException {
    ResourcesPlumbing.ResourceCreateRequest.Builder builder =
        ResourcesPlumbing.ResourceCreateRequest.newBuilder();
    builder.setResource(Plumbing.convertResourceToPlumbing(resource));
    ResourcesPlumbing.ResourceCreateRequest req = builder.build();
    ResourcesPlumbing.ResourceCreateResponse plumbingResponse;
    int tries = 0;
    while (true) {
      try {
        plumbingResponse =
            this.stub
                .withCallCredentials(this.parent.getCallCredentials("Resources.Create", req))
                .create(req);
      } catch (Exception e) {
        if (this.parent.shouldRetry(tries, e)) {
          tries++;
          this.parent.jitterSleep(tries);
          continue;
        }
        throw Plumbing.convertExceptionToPorcelain(e);
      }
      break;
    }
    return Plumbing.convertResourceCreateResponseToPorcelain(plumbingResponse);
  }
  /** Get reads one Resource by ID. */
  public ResourceGetResponse get(String id) throws RpcException {
    ResourcesPlumbing.ResourceGetRequest.Builder builder =
        ResourcesPlumbing.ResourceGetRequest.newBuilder();
    builder.setId((id));
    ResourcesPlumbing.ResourceGetRequest req = builder.build();
    ResourcesPlumbing.ResourceGetResponse plumbingResponse;
    int tries = 0;
    while (true) {
      try {
        plumbingResponse =
            this.stub
                .withCallCredentials(this.parent.getCallCredentials("Resources.Get", req))
                .get(req);
      } catch (Exception e) {
        if (this.parent.shouldRetry(tries, e)) {
          tries++;
          this.parent.jitterSleep(tries);
          continue;
        }
        throw Plumbing.convertExceptionToPorcelain(e);
      }
      break;
    }
    return Plumbing.convertResourceGetResponseToPorcelain(plumbingResponse);
  }
  /** Update replaces all the fields of a Resource by ID. */
  public ResourceUpdateResponse update(Resource resource) throws RpcException {
    ResourcesPlumbing.ResourceUpdateRequest.Builder builder =
        ResourcesPlumbing.ResourceUpdateRequest.newBuilder();
    builder.setResource(Plumbing.convertResourceToPlumbing(resource));
    ResourcesPlumbing.ResourceUpdateRequest req = builder.build();
    ResourcesPlumbing.ResourceUpdateResponse plumbingResponse;
    int tries = 0;
    while (true) {
      try {
        plumbingResponse =
            this.stub
                .withCallCredentials(this.parent.getCallCredentials("Resources.Update", req))
                .update(req);
      } catch (Exception e) {
        if (this.parent.shouldRetry(tries, e)) {
          tries++;
          this.parent.jitterSleep(tries);
          continue;
        }
        throw Plumbing.convertExceptionToPorcelain(e);
      }
      break;
    }
    return Plumbing.convertResourceUpdateResponseToPorcelain(plumbingResponse);
  }
  /** Delete removes a Resource by ID. */
  public ResourceDeleteResponse delete(String id) throws RpcException {
    ResourcesPlumbing.ResourceDeleteRequest.Builder builder =
        ResourcesPlumbing.ResourceDeleteRequest.newBuilder();
    builder.setId((id));
    ResourcesPlumbing.ResourceDeleteRequest req = builder.build();
    ResourcesPlumbing.ResourceDeleteResponse plumbingResponse;
    int tries = 0;
    while (true) {
      try {
        plumbingResponse =
            this.stub
                .withCallCredentials(this.parent.getCallCredentials("Resources.Delete", req))
                .delete(req);
      } catch (Exception e) {
        if (this.parent.shouldRetry(tries, e)) {
          tries++;
          this.parent.jitterSleep(tries);
          continue;
        }
        throw Plumbing.convertExceptionToPorcelain(e);
      }
      break;
    }
    return Plumbing.convertResourceDeleteResponseToPorcelain(plumbingResponse);
  }
  /** List gets a list of Resources matching a given set of criteria. */
  public Iterable<Resource> list(String filter, Object... args) throws RpcException {
    ResourcesPlumbing.ResourceListRequest.Builder builder =
        ResourcesPlumbing.ResourceListRequest.newBuilder();
    builder.setFilter(Plumbing.quoteFilterArgs(filter, args));
    ListRequestMetadata.Builder metaBuilder = ListRequestMetadata.newBuilder();
    Object pageSizeOption = this.parent.testOptions.get("PageSize");
    if (pageSizeOption instanceof Integer) {
      metaBuilder.setLimit((int) pageSizeOption);
    }
    builder.setMeta(metaBuilder);

    Supplier<PageResult<Resource>> pageFetcher =
        () -> {
          // Note: this closure captures and reuses the builder to set the next page
          ResourcesPlumbing.ResourceListRequest req = builder.build();
          ResourcesPlumbing.ResourceListResponse plumbingResponse;
          int tries = 0;
          while (true) {
            try {
              plumbingResponse =
                  this.stub
                      .withCallCredentials(this.parent.getCallCredentials("Resources.List", req))
                      .list(req);
            } catch (Exception e) {
              if (this.parent.shouldRetry(tries, e)) {
                tries++;
                this.parent.jitterSleep(tries);
                continue;
              }
              throw Plumbing.convertExceptionToPorcelain(e);
            }
            break;
          }

          List<Resource> page =
              Plumbing.convertRepeatedResourceToPorcelain(plumbingResponse.getResourcesList());

          boolean hasNextCursor = plumbingResponse.getMeta().getNextCursor() != "";
          builder.setMeta(
              ListRequestMetadata.newBuilder()
                  .setCursor(plumbingResponse.getMeta().getNextCursor()));

          return new PageResult<Resource>(page, hasNextCursor);
        };

    Iterator<Resource> iterator = new PageIterator<>(pageFetcher);

    return () -> iterator;
  }
}
